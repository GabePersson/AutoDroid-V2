{"task": "Ensure a note is open and is the current note, then open more options for that note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) > 0:\n    tap(note_titles[0])\ntap($more_options_note)"}
{"task": "Open a note from the home page and create a checklist", "solution": "tap($open_note)\n# Open the first note from the list\nfirst_note = $open_note_title_list[0]\ntap(first_note)\ntap($create_note)\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open the settings page and set the app alignment to center", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu in the current checklist.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nchecklist_found = False\nfor title in open_note_titles:\n    if 'checklist' in get_text(title).lower():\n        tap(title)\n        checklist_found = True\n        break\nif not checklist_found:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a checklist note if none are currently opened, then move the checklist item 'Read a Book' to the top of the list.", "solution": "if len($checklist_item_list) == 0:\n    # Checklist not open, open a note\n    tap($open_note)\n    tap($open_note_title_list.match({'type': 'checklist'})[0])\n# Now move the checklist item 'Read a Book' to the top of the list\nlong_tap($checklist_item_list.match('Read a Book')[0])\ntap($move_selected_item_to_the_top)"}
{"task": "Open the settings of the app to enable automatic backups", "solution": "tap($settings)\ntap($set_enable_automatic_backups)"}
{"task": "Create checklist items, mark some as done, and then remove all done items from the current checklist.", "solution": "\ntap($add_checklist_item)\nset_text($add_checklist_item, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item, 'Item 2')\ntap($add_checklist_item_ok)\ntap($checklist_item)\ntap($remove_done_checklist_items)"}
{"task": "Open a checklist note containing 'Meeting at 3PM' if one is not already opened, then rename the checklist item 'Meeting at 3PM' to 'Team Meeting at 3PM'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Checklist')) > 0:\n    tap($open_note_title_list.match('Checklist')[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nif len($checklist_item_list.match('Meeting at 3PM')) > 0:\n    long_tap($checklist_item_list.match('Meeting at 3PM')[0])\n    tap($rename_selected_checklist_item)\n    set_text($rename_input, 'Team Meeting at 3PM')\n    tap($rename_ok)\nelse:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Meeting at 3PM')\n    tap($add_checklist_item_ok)\n    long_tap($checklist_item_list.match('Meeting at 3PM')[0])\n    tap($rename_selected_checklist_item)\n    set_text($rename_input, 'Team Meeting at 3PM')\n    tap($rename_ok)"}
{"task": "Enable setting to show keyboard on startup by navigating to settings from the home page", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Ensure an item is selected or opened and then tell me the title of the current item shown", "solution": "title = get_text($item_title)\nprint(title)\n"}
{"task": "Ensure a note is open and then access its more options in the Notes app.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, and then sort the items of the current checklist by date", "solution": "tap($open_note)\ntitles = $open_note_title_list\nif len(titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(titles[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open an existing note or create a new one if necessary, then show the title of the current note", "solution": "try:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n    else:\n        tap($open_note_title_list[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nprint(get_text($item_title))"}
{"task": "Open the font size settings and adjust the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Open settings from the more options in the current checklist.", "solution": "tap($more_options_checklist)\ntap($settings)\n"}
{"task": "Open a note or create one if there is none, then access note options to open settings", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the note 'Journal Entry' and navigate to the app settings.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Journal Entry':\n        tap(note)\n        break\ntap($settings)"}
{"task": "Open a note or checklist item or ensure there is an item open, then switch to the next item.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\ntap($switch_to_next_item)"}
{"task": "Disable setting to show keyboard on startup by navigating to settings directly from the home page", "solution": "tap($settings)\nif not get_attributes($set_show_keyboard_on_startup)[\"checked\"]:\n    tap($set_show_keyboard_on_startup)"}
{"task": "Create a checklist item titled 'Walk the Dog', mark it as checked, and then uncheck it.", "solution": "if len($checklist_item_list) > 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Walk the Dog')\n    tap($add_checklist_item_ok)\n    checklist_items = $checklist_item_list.match({'text': 'Walk the Dog'})\n    tap(checklist_items[0])\n    tap(checklist_items[0])"}
{"task": "Open the settings page and customize the app colors.", "solution": "tap($open_note)\ntap($settings)"}
{"task": "Create the note titled 'Project Ideas' if it doesn't exist, then open the note titled 'Project Ideas'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Project Ideas':\n        tap(open_note_titles[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Project Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Project Ideas')[0])"}
{"task": "Tap on the 'Search' button and input the text 'meeting notes' in the search field.", "solution": "tap($search_within_note)\nset_text($search_text, 'meeting notes')"}
{"task": "Ensure a note is open and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Tap 'Open Note' from the home page.", "solution": "tap($open_note)"}
{"task": "Open the settings page and set the primary color to green", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_types.match('green'))\ntap($save_set_colors)"}
{"task": "Open a note, enter the word 'dinner' at least twice, then search for the word 'dinner' in the current note and go to the next occurrence.", "solution": "def task_1():\n    tap($open_note)\n    tap($open_note_title_list[0])\n    set_text($note_content, get_text($note_content) + ' dinner dinner')\n    tap($save_note)\n    tap($search_within_note)\n    set_text($search_text, 'dinner')\n    tap($next_matchhed_text)\ntask_1()"}
{"task": "Ensure a note is open and then delete the current note.", "solution": "if get_attributes($note_content)['scrollable']:\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\nelse:\n    tap($open_note)\n    open_notes = $open_note_title_list\n    if len(open_notes) > 0:\n        tap(open_notes[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Starting from the home page, open the more options menu for the current checklist", "solution": "tap($switch_item)\nopen_note_titles = $open_note_title_list\nfor idx, note_title in enumerate(open_note_titles):\n    tap($open_note_title_list[idx])\n    if get_attributes(note_title)['selected']:\n        tap($more_options_checklist)\n        break"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note if one is not currently open, then open more options for the current note", "solution": "if not get_attributes($note_content)['scrollable']:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings menu to customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the note in the Notes app where the cursor needs to be placed at the end and then set the cursor to start at the end of the note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nif not get_attributes($set_place_cursor_to_the_end_of_note)['checked']:\n    tap($set_place_cursor_to_the_end_of_note)"}
{"task": "Create checklist items and mark all checklist items as completed.", "solution": "notes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n# Create checklist items\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\n# Mark all items as completed\nitems = $checklist_item_list\nfor item in items:\n    tap(item)"}
{"task": "Create a note titled 'Meeting Notes' if it doesn't already exist, then delete the 'Meeting Notes' note.", "solution": "note_titles = [get_text(title) for title in $open_note_title_list]\nif 'Meeting Notes' not in note_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\nnote_index = note_titles.index('Meeting Notes') if 'Meeting Notes' in note_titles else None\nif note_index is not None:\n    tap($open_note_title_list[note_index])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\nelse:\n    tap($open_note_title_list[-1])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Open the note in which the search will be performed and search for the word 'meeting' within the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Ensure a note is open and then delete all text in the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nset_text($note_content, '')"}
{"task": "Open a checklist note with at least three items or create one if there is none, then mark the third checklist item as completed.", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'New Checklist')    tap($checklist_type)    tap($add_note_ok)if len($checklist_item_list) < 3:    tap($add_checklist_item)    set_text($add_checklist_item_title, 'First Item')    tap($add_checklist_item_ok)    tap($add_checklist_item)    set_text($add_checklist_item_title, 'Second Item')    tap($add_checklist_item_ok)    tap($add_checklist_item)    set_text($add_checklist_item_title, 'Third Item')    tap($add_checklist_item_ok)tap($checklist_item_list[2])"}
{"task": "Open the settings page and set the app icon color to red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_types.match('red')[0])\ntap($save_set_colors)"}
{"task": "Open settings and enable display save success messages", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'down')\ntap($set_display_save_success_messages)\n"}
{"task": "Open a checklist note or create one if there is none, then move the checklist item 'Buy Groceries' to the top of the list.", "solution": "\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($switch_to_next_item)\nmatch_items = $checklist_item_list.match({'text': 'Buy Groceries'})\nif len(match_items) > 0:\n    long_tap($checklist_item_list.match({'text': 'Buy Groceries'})[0])\n    tap($move_selected_item_to_the_top)\n"}
{"task": "Ensure a checklist note is open and then show the information about the app from the current checklist", "solution": "tap($more_options_checklist)\ntap($about)"}
{"task": "Open a note (or create one if none exists) and edit the content of the note to say 'Meeting at 10am on Monday'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\nset_text($note_content, 'Meeting at 10am on Monday')\ntap($save_note)"}
{"task": "Open settings and change the font size of the app to 90%.", "solution": "tap($settings)\n    tap($set_font_size)\n    tap($font_size_90%)"}
{"task": "Show the current font size directly from the home page", "solution": "tap($settings)\ntap($current_font_size)\nprint(get_text($current_font_size))"}
{"task": "Open the settings menu and customize app colors by tapping 'Customize colors'", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the more options for the current checklist from the home page", "solution": "tap($more_options_checklist)"}
{"task": "Open the settings page if the current page is not the settings page, then set the font size to 200%", "solution": "if not get_attributes($settings)['selected']:\n    tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Open the settings menu, then tap on the 'Theme' button to change theme colors after tapping on 'Customize colors' and selecting 'custom' from the theme color types.", "solution": "\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\nfor theme in $theme_color_types:\n    if get_text(theme) == 'Custom':\n        tap(theme)\n        break\n"}
{"task": "Ensure a note is open, and then navigate to settings from the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "If the current page is not the settings page, open the settings page. Then, set the font size to 250%.", "solution": "if len($scroll_settings_page) == 0:\n    tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\ntap($exit_settings)"}
{"task": "If a note with the title 'Grocery List' already exists, rename it; then create a new note with the title 'Grocery List'", "solution": "# Check if a note with the title 'Grocery List' already exists\ntap($open_note)\nopen_note_titles = $open_note_title_list\nexisting_notes = [get_text(note) for note in open_note_titles]\nif 'Grocery List' in existing_notes:\n    idx = existing_notes.index('Grocery List')\n    tap(open_note_titles[idx])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Grocery List')\n    tap($rename_ok)\nback()\n# Create a new note\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)\nback()"}
{"task": "Open the app settings", "solution": "tap($settings)"}
{"task": "Display the current font size.", "solution": "tap($settings)\ntap($current_font_size)\nfor size in $font_size_types:\n    if get_attributes(size)['selected']:\n        print(get_text(size))\n        break"}
{"task": "Ensure a note is open, then open more options for the current note", "solution": "try:\n    tap($open_note)\n    tap($open_note_title_list[0])\n    tap($more_options_note)\nexcept Exception as e:\n    pass"}
{"task": "Open a checklist note and then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a note, make it the current note, and then search for 'important dates' within the current note.", "solution": "tap($open_note); tap($open_note_title_list[0]); tap($search_within_note); set_text($search_text, 'important dates');"}
{"task": "Ensure no other note with the title 'Meeting Agenda' exists, then create a new note with the title 'Meeting Agenda'", "solution": "tap($open_note)\ntitles = [get_text(title) for title in $open_note_title_list]\nif 'Meeting Agenda' not in titles:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Agenda')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Open a note or create one if there is none, then export the current note as a file", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the settings page of the Notes App and set the primary color to blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Ensure no other note with the title 'Shopping List' exists, then create a new note titled 'Shopping List' with a checklist.", "solution": "from time import sleep\n\n# Ensure no other note with the title 'Shopping List' exists\ntap($open_note)\nnote_titles = $open_note_title_list\nfor note in note_titles:\n    if get_text(note) == 'Shopping List':\n        tap(note)\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        tap($open_note)\n        note_titles = $open_note_title_list\n        continue\n\n# Create a new note titled 'Shopping List' with a checklist\nback()\ntap($create_note)\nset_text($add_note_title, 'Shopping List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Ensure a note is open and is the current note, then set the alignment in the settings after opening more options of the note", "solution": "if get_attributes($more_options_note)[\"selected\"] == false:\n    tap($switch_item)\n    tap($switch_item)\ntap($more_options_note)\ntap($settings)\ntap($set_alignment)"}
{"task": "Open a checklist and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list.match({'checked': True})[0])\ntap($more_options_checklist)"}
{"task": "Make sure a checklist is open and is the current checklist, then open the more options menu of the current checklist.", "solution": "if len($checklist_item_list) > 0:\n    tap($more_options_checklist)\nelse:\n    # Create a new checklist if none exists\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)"}
{"task": "Open a note with the phrase 'birthday reminders' or create one if there is none, then search for the phrase 'birthday reminders' within the current note.", "solution": "tap($open_note)\nnote_exists = False\nfor i in range(len($open_note_title_list)):\n    if 'birthday reminders' in get_text($open_note_title_list[i]).lower():\n        tap($open_note_title_list[i])\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Birthday Reminders')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'birthday reminders')"}
{"task": "Ensure no other checklist note with the title 'Grocery List' exists, then create a checklist note with the title 'Grocery List'", "solution": "\n# Ensuring no other checklist note with the title 'Grocery List' exists\nopen_note_elements = $open_note_title_list.match('Grocery List')\nif len(open_note_elements) > 0:\n    for element in open_note_elements:\n        tap(element)\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        back()\n\n# Creating a new checklist note titled 'Grocery List'\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($checklist_type)\ntap($add_note_ok)\n"}
{"task": "Ensure a note is open and then open the file of the current note", "solution": "\ntry:\n    tap($more_options_note)\n    tap($open_file)\nexcept:\n    raise RuntimeError('Failed to open the file of the current note')"}
{"task": "Ensure the item 'Workout at 5 PM' exists in the checklist, then delete it.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    checklist_items = $checklist_item_list\n    workout_items = checklist_items.match(\"Workout at 5 PM\")\n    if len(workout_items) > 0:\n        long_tap(workout_items[0])\n        tap($delete_selected_checklist_item)"}
{"task": "Open the settings of the Notes APP and customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Verify the checklist contains the item 'Plan Vacation' and rename it to 'Book Flights'.", "solution": "if get_text($item_title) == '':\n    tap($open_note)\nif not get_attributes($open_note_title_list)[\"selected\"]:\n    tap($open_note_title_list[0])\nif any(get_text(c) == 'Plan Vacation' for c in $checklist_item_list):\n    for i, item in enumerate($checklist_item_list):\n        if get_text(item) == 'Plan Vacation':\n            long_tap(item)\n            tap($rename_selected_checklist_item)\n            set_text($rename_input, 'Book Flights')\n            tap($rename_ok)\n            break"}
{"task": "Open a checklist note or create one if there is none, then open settings from the more options of the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Untitled Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    note_titles = $open_note_title_list\n    checklist_found = False\n    for i in range(len(note_titles)):\n        note_attributes = get_attributes(note_titles[i])\n        if note_attributes['selected']:\n            tap(note_titles[i])\n            checklist_found = True\n            break\n    if not checklist_found:\n        tap(note_titles[0])\ntap($more_options_checklist)\n"}
{"task": "Open settings and set the theme color to auto light/dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)"}
{"task": "Open a note or create one if there is none, and set the app to place the cursor at the end of the note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nif get_text($item_title) != 'Settings':\n    tap($more_options_note)\n    tap($settings)\ntap($set_place_cursor_to_the_end_of_note)\nback()"}
{"task": "Add the text 'meeting notes' to the note and then search for the text 'meeting notes' within the current note.", "solution": "set_text($note_content, 'meeting notes')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'meeting notes')"}
{"task": "Open the settings menu and scroll down the settings page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Search for the term 'budget' within the current note and navigate to the next matching text.", "solution": "tap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Open an existing note or create a new one if there is none, then open settings from the more options in the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($save_note)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open a checklist and sort its items by title", "solution": "if get_attributes($checklist_item_list).get('checked', False) == False:\n    tap($open_note)\n    checklists = $open_note_title_list.match('checklist')\n    if len(checklists) > 0:\n        tap(checklists[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist note or create one if there is none, then lock the current checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Create a note titled 'Meeting Notes' if it doesn't already exist, then open the note titled 'Meeting Notes'", "solution": "if len($open_note_title_list.match('Meeting Notes')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match('Meeting Notes')[0])"}
{"task": "Open the settings of the app and navigate to the font size settings.", "solution": "tap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'up')\ntap($set_font_size)"}
{"task": "Change the font size to 300% via the font size option.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('300%')[0])"}
{"task": "Open the settings page and check the current font size", "solution": "tap($settings)\ntap($current_font_size)\nget_text($current_font_size)"}
{"task": "Starting from the home page, open more options for the current checklist", "solution": "tap($open_note)\nswitch_to_checklist = [$open_note_title for title in $open_note_title_list if 'checklist' in get_text(title).lower()]\nif len(switch_to_checklist) > 0:\n  tap(switch_to_checklist[0])\n  tap($more_options_checklist)"}
{"task": "Open a note or create one if there is none, then print the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "If a note with the title 'Grocery List' already exists, rename it to something else. Then, rename the current note to 'Grocery List'.", "solution": "tap($open_note)\ntitles = $open_note_title_list\nfor i in range(len(titles)):\n    if get_text(titles[i]) == 'Grocery List':\n        long_tap(titles[i])\n        tap($rename_note)\n        set_text($rename_input, 'Renamed Note')\n        tap($rename_ok)\n        break\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)\n"}
{"task": "Ensure the note contains multiple occurrences of the word 'deadline' and then find the next occurrence of 'deadline' in the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nset_text($note_content, 'Here is a deadline. Another deadline is here.')\nget_text($note_content)\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($next_matchhed_text)"}
{"task": "Open or create a checklist note to ensure it exists, then print the current checklist", "solution": "if len($open_note_title_list.match('checklist_type')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list.match('checklist_type')[0])\ntap($more_options_checklist)\ntap($print_note)"}
{"task": "Create at least three checklist items and then move the third checklist item to the bottom of the list.", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list[2])\ntap($move_selected_item_to_the_buttom)"}
{"task": "Ensure a checklist note is open, then open the file of the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list.match({\"checked\": false})[0])\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Open the 'Settings' menu and customize the app's colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Make sure a note is open and is the current note, then search for the keyword 'meeting' within the current note.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes) > 0:\n    tap(open_notes[0])\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Make sure a note is open and is the current note, then open more options of the current note by tapping on the 'more options' button.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure a note is open and print the current note.", "solution": "tap($more_options_note)\ntap($print_note)"}
{"task": "Start from the home page and open the settings of the Notes app", "solution": "tap($settings)"}
{"task": "Create a checklist item 'Clean Room' if it does not exist, then delete the checklist item 'Clean Room'", "solution": "if len($checklist_item_list.match('Clean Room')) == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Clean Room')\n    tap($add_checklist_item_ok)\nlong_tap($checklist_item_list.match('Clean Room')[0])\ntap($delete_selected_checklist_item)"}
{"task": "Open settings from a checklist note by first creating a checklist note or opening an existing one.", "solution": "\nif not $checklist_item_list:\n    tap($open_note)\n    open_notes = $open_note_title_list.match({'title': 'Checklist'})\n    if open_notes:\n        tap(open_notes[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\n"}
{"task": "Open the settings menu to customize the colors in the Notes APP.", "solution": "tap($settings)"}
{"task": "Open a note in the Notes app if one is not currently open, then open the more options menu for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Tap on 'Customize colors' in the 'Settings' menu to customize the colors of the Notes APP.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure a checklist is open and print the current checklist", "solution": "if 'checklist' not in get_text($item_title).lower():\n    tap($open_note)\n    for item in $open_note_title_list:\n        if 'checklist' in get_text(item).lower():\n            tap(item)\n            break\nprint(get_text($item_title))"}
{"task": "Open a checklist note and then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open a checklist note or create one if there is none, then tap 'Settings' from 'more options' and uncheck the 'Show word count' checkbox.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)\nif get_attributes($set_show_word_count)['checked']:\n    tap($set_show_word_count)\nback()"}
{"task": "Open a note or create one if there is none, then set the cursor to be placed at the end of the note", "solution": "notes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap(notes[0])\ntap($more_options_note)\ntap($settings)\nif not get_attributes($set_place_cursor_to_the_end_of_note)['checked']:\n    tap($set_place_cursor_to_the_end_of_note)\n"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else, then create a new checklist note and title it 'Grocery List'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Grocery List')) > 0:\n    tap($open_note_title_list.match('Grocery List')[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Grocery List')\n    tap($rename_ok)\n    back()\n    back()\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Go to settings from the note options.", "solution": "tap($more_options_note)"}
{"task": "Open the app settings", "solution": "tap($settings)"}
{"task": "Ensure a note titled 'Study Schedule' exists and open it", "solution": "tap($create_note)\nset_text($add_note_title, 'Study Schedule')\ntap($text_note_type)\ntap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match('Study Schedule'))"}
{"task": "Open the settings page and view the current font size of the app", "solution": "tap($settings)\ntap($current_font_size)\nfont_sizes = $font_size_types\nfor i in range(len(font_sizes)):\n    if get_attributes(font_sizes[i])[\"selected\"]:\n        print(get_text(font_sizes[i]))"}
{"task": "Open the settings page and enable the option to show keyboard on startup.", "solution": "tap($settings)\nif not get_attributes($set_show_keyboard_on_startup)[\"checked\"]:\n    tap($set_show_keyboard_on_startup)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note to something else. Then, create a new note titled 'Grocery List'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_exists = False\nfor i in range(len(note_titles)):\n    if get_text($open_note_title_list[i]) == 'Grocery List':\n        note_exists = True\n        tap($open_note_title_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Grocery List')\n        tap($rename_ok)\n        back()\n        break\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open any existing note or create a new note, then enable Incognito mode for keyboards in notes.", "solution": "if len($open_note_title_list) == 0: tap($create_note) \n tap($text_note_type)\n tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list[0])\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_incognito_mode_of_keyboards)\nback()"}
{"task": "Open any existing note or create a new note, and then enable line wrap in the note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\nwhile not get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)\nback()"}
{"task": "Check if a note with the title 'Grocery List' already exists. If it does, rename it to something else. Then rename the current note to 'Grocery List'.", "solution": "existing_notes = $open_note_title_list\nrename_needed = False\nif len(existing_notes) > 0:\n    for i in range(len(existing_notes)):\n        if get_text(existing_notes[i]) == 'Grocery List':\n            long_tap(existing_notes[i])\n            tap($rename_selected_checklist_item)\n            set_text($rename_input, 'Temporary Title')\n            tap($rename_ok)\n            rename_needed = True\n            tap(existing_notes[i])\n            break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Adjust the font size to 200% directly from the settings or relevant menu in the Notes APP.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Ensure an item with the text 'Call the doctor' exists in the checklist and is selected, then delete the selected checklist item 'Call the doctor'", "solution": "checklist_items = $checklist_item_list\nitem_exists = False\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Call the doctor':\n        item_exists = True\n        tap(checklist_items[i])\n        long_tap(checklist_items[i])\n        tap($delete_selected_checklist_item)\n        break\nif not item_exists:\n    raise Exception('Item not found in the checklist')"}
{"task": "Open the settings of the app and set the font size to 60%", "solution": "tap($settings)\n# Scroll the settings page down until the 'Font size' button is visible\nwhile True:\n    try:\n        tap($set_font_size)\n        break\n    except: # Element not visible yet\n        scroll($scroll_settings_page, 'down')\n# Select the desired font size and confirm\nfont_sizes = $font_size_types\nfor size in font_sizes:\n    if get_text(size) == '60%':\n        tap(size)\n        tap($sort_checklist_items_ok)\n        break"}
{"task": "Ensure a note titled 'Meeting Agenda' exists and create a shortcut for the note.", "solution": "tap($open_note); open_note_titles = $open_note_title_list; if len(open_note_titles.match('Meeting Agenda')) == 0: tap($create_note); set_text($add_note_title, 'Meeting Agenda'); tap($add_note_ok); back(); tap($open_note); open_note_titles = $open_note_title_list; tap(open_note_titles.match('Meeting Agenda')[0]); tap($more_options_note); tap($create_shortcut); else: tap(open_note_titles.match('Meeting Agenda')[0]); tap($more_options_note); tap($create_shortcut);"}
{"task": "Set the font size to 100% from the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)\nback()"}
{"task": "Open the settings of the app and set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)"}
{"task": "Open any checklist note and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open any note or create a new note if none exist, then search for the term 'budget' within the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'budget')"}
{"task": "Open a note and then open settings from more options of the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($more_option_note_buttons.match('Settings')[0])"}
{"task": "If no note is currently open, open any note. Then close the current note and return to the main screen.", "solution": "if get_text($item_title) == '':\n    tap($open_note)\n    if len($open_note_title_list) > 0:\n        $open_note_title_list[0].tap()\nback()"}
{"task": "Open the font size settings and change the font size to 100% in the app settings", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "Open settings from more options of an opened checklist", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Open a note about travel plans or create one if it doesn't exist, then open more options for the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\ntravel_note = notes.match('Travel Plans')\nif len(travel_note) > 0:\n    tap(travel_note[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a note if none are currently opened, then open more options for the current note.", "solution": "if get_attributes($item_title)['selected'] == False:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "If no checklist note is currently open, open one first, and then open more options for the current checklist.", "solution": "if not len($checklist_item_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open or create a note and then open more options for the current note", "solution": "# Open or create note and then open more options\n# Attempt to open an existing note\ntap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu for the current checklist", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nchecklist_notes = [note for note in open_note_titles if get_attributes(note)[\"checked\"]]\nif len(checklist_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"New Checklist\")\n    tap($checklist_type)\n    tap($add_note_ok)\ntap(checklist_notes[0] if len(checklist_notes) > 0 else $open_note_title_list[-1])\ntap($more_options_checklist)"}
{"task": "Open the settings page and switch the app's theme to black and white using the theme settings", "solution": "tap($settings); tap($set_colors); tap($set_theme_color); tap($theme_color_black_white); tap($save_set_colors); back()"}
{"task": "Go to the next instance of the matching text 'budget' in the current note.", "solution": "tap($next_matchhed_text)"}
{"task": "Open the settings menu and choose 'custom' theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match({'title': 'Custom'})[0])\ntap($save_set_colors)\n"}
{"task": "Ensure a checklist is currently open and then access more options for the current checklist", "solution": "if 'checklist_item_list' not in globals():\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Tap on the 'Settings' button to open the app settings from the home page.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the settings of the app from the home page directly", "solution": "tap($settings)"}
{"task": "Open the search box within the note and then close it", "solution": "tap($search_within_note)\ntap($close_search_box)"}
{"task": "Ensure the 'Travel itinerary' note exists, open it, and then export it as a file.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Travel itinerary':\n        tap(open_notes[i])\n        break\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open a note or create one if there is none, then tap on 'more options' for the current note", "solution": "try:\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) == 0:\n        raise Exception('No notes available')\n    tap(notes[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n\ntap($more_options_note)"}
{"task": "If a checklist note titled 'To-Do List' already exists, rename it to something else. Then, create a new checklist note titled 'To-Do List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i, note in enumerate(notes):\n    if get_text(notes[i]) == 'To-Do List':\n        tap(notes[i])\n        tap($more_options_checklist)\n        tap($rename_note)\n        set_text($rename_input, 'Archived To-Do List')\n        tap($rename_ok)\n        back()\n        break\nback()\ntap($create_note)\ntap($checklist_type)\nset_text($add_note_title, 'To-Do List')\ntap($add_note_ok)"}
{"task": "Ensure a note is open, then edit the content of the current note by typing 'Meeting notes for tomorrow's agenda'", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nset_text($note_content, \"Meeting notes for tomorrow's agenda\")"}
{"task": "Open any note or create a new note if none exist, make changes, and save the changes made to the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    set_text($note_content, 'New content for the note')\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Temporary Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    set_text($note_content, 'New content for the note')\ntap($save_note)"}
{"task": "Navigate to settings from the home page, go to Theme, and choose Black & White.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Open a checklist note if none are currently opened, then access the settings from the more options menu of the checklist.", "solution": "if get_attributes($more_options_checklist)['scrollable'] == False:\n    tap($open_note)\n    tap($open_note_title_list.match({'text': 'Checklist'})[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Ensure the note titled 'Work Tasks' exists, add the checklist item 'Finish report' if it doesn't exist, and then mark it as completed.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Work Tasks':\n        tap(note_titles[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Work Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\nitems = $checklist_item_list\nfor i in range(len(items)):\n    if get_text(items[i]) == 'Finish report':\n        tap(items[i])\n        break\nelse:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Finish report')\n    tap($add_checklist_item_ok)\n    items = $checklist_item_list\n    for i in range(len(items)):\n        if get_text(items[i]) == 'Finish report':\n            tap(items[i])\n            break"}
{"task": "Navigate to the settings in the Notes app and set the theme to Dark red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open the settings menu to adjust the font size of the Notes app", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\n# Now the user can interact with the font size settings manually."}
{"task": "Ensure that a note titled 'Grocery List' exists and is opened, then print the current note about the grocery list.", "solution": "\n# Ensure that a note titled 'Grocery List' exists and is opened, then print the current note about the grocery list.\ndef ensure_note_exists(title):\n    tap($open_note)\n    notes = $open_note_title_list\n    note_titles = [get_text(note) for note in notes]\n    if title not in note_titles:\n        back()\n        tap($create_note)\n        set_text($add_note_title, title)\n        tap($text_note_type)\n        tap($add_note_ok)\n        return\n    back()\n    for note in notes:\n        if get_text(note) == title:\n            tap(note)\n            return\n\ndef open_grocery_list_and_print():\n    ensure_note_exists('Grocery List')\n    print(get_text($note_content))\n\nopen_grocery_list_and_print()\n"}
{"task": "Open the settings of the app from the home page", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Open a text note or create one if there is none, then search within the current note for the keyword 'deadline'.", "solution": "notes = $open_note_title_list\nnote_to_open = next((note for note in notes if get_text(note) == 'text'), None)\nif note_to_open is None:\n    tap($create_note)\n    set_text($add_note_title, 'Untitled')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(note_to_open)\ntap($search_within_note)\nset_text($search_text, 'deadline')"}
{"task": "Open the settings menu and show the current font size", "solution": "tap($settings)\ntap($current_font_size)"}
{"task": "Tap \"Create Note\" on the home page to add a new note.", "solution": "\ntap($create_note)\n"}
{"task": "Navigate to settings and customize colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a text note or create one if there is none, then search for the phrase 'project deliverables' within the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    tap($search_within_note)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($search_within_note)\nset_text($search_text, 'project deliverables')"}
{"task": "Open the settings menu and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('90%'))"}
{"task": "Open the settings page and mark the 'Show word count' option", "solution": "tap($settings)\nif not get_attributes($set_show_word_count)['checked']:\n    tap($set_show_word_count)\n"}
{"task": "Customize the colors of the app directly from the settings.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings of the Notes app and change the theme color to dark_red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)"}
{"task": "Open the 'Christmas shopping' checklist, then delete my 'Christmas shopping checklist'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Christmas shopping':\n        tap(open_note_titles[i])\n        break\nelse:\n    raise Exception('Christmas shopping checklist not found')\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Ensure that a checklist note containing 'Buy Milk' exists, open the note, and edit the current checklist to remove 'Buy Milk'.", "solution": "# Task 2: Ensure that a checklist note containing 'Buy Milk' exists, open the note, and edit the current checklist to remove 'Buy Milk'.\ntap($open_note)\nchecklist_notes = $open_note_title_list.match({'contains': 'Checklist'})\nif len(checklist_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(checklist_notes[0])\nitem_found = False\nchecklist_items = $checklist_item_list\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Buy Milk':\n        item_found = True\n        long_tap(checklist_items[i])\n        tap($delete_selected_checklist_item)\n        break\nif not item_found:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Buy Milk')\n    tap($add_checklist_item_ok)\n    # Now remove it again\n    for i in range(len(checklist_items)):\n        if get_text(checklist_items[i]) == 'Buy Milk':\n            long_tap(checklist_items[i])\n            tap($delete_selected_checklist_item)\n            break\n"}
{"task": "Open the settings page in the Notes app and scroll through it.", "solution": "tap($settings_button)\nscroll($scroll_settings_page, 'down')"}
{"task": "Ensure a checklist is opened and sort the items in the current checklist by date created.", "solution": "def task_4():\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($date_created_type)\n    tap($sort_checklist_items_ok)\n\ntask_4()"}
{"task": "Open the checklist containing the item 'Prepare Presentation' and show the content of the checklist item 'Prepare Presentation'.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Prepare Presentation')\nif notes:\n    tap(notes[0])\n    items = $checklist_item_list.match('Prepare Presentation')\n    if items:\n        tap(items[0])"}
{"task": "Open or create a new note if there is none, then open the more options menu for the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then confirm the current checklist sorting type", "solution": "def task2():\n    tap($open_note)\n    notes_titles = $open_note_title_list\n    if len(notes_titles) == 0:\n        tap($create_note)\n        tap($checklist_type)\n        set_text($add_note_title, 'New Checklist')\n        tap($add_note_ok)\n    else:\n        tap($open_note_title_list[0])\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    back()\n\ntask2()"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure there is no checklist titled 'Weekend Tasks' and then create a new checklist note titled 'Weekend Tasks'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Weekend Tasks':\n        return\nback()\ntap($create_note)\nset_text($add_note_title, 'Weekend Tasks')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "If a note with the title 'Meeting notes' already exists, rename the note title to something else, then create a new text note with the title 'Meeting notes'.", "solution": "tap($open_note)\nif any(get_text(note) == 'Meeting notes' for note in $open_note_title_list):\n    meeting_note = $open_note_title_list.match('Meeting notes')[0]\n    tap(meeting_note)\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Meeting notes')\n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'Meeting notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Create the note titled 'Recipes' if it doesn't exist, then open more options for the note titled 'Recipes'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(note) == 'Recipes' for note in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Recipes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Recipes')[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then check all items listed in the current checklist", "solution": "\n# Open a checklist note or create one if there is none\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n\n# Check all items listed in the current checklist\nfor i in range(len($checklist_item_list)):\n    tap($checklist_item_list[i])"}
{"task": "Open any existing note or create a new note, then open more options for the current note.", "solution": "# Task 3: Open any existing note or create a new note, then open more options for the current note.\ntap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Ensure a checklist is currently open, then open the more options menu for the current checklist.", "solution": "tap($more_options_checklist);\n"}
{"task": "Create checklist items titled 'Finish homework' and at least one item after it, then show the content of the checklist item after 'Finish homework'.", "solution": "tap($create_note)\ntap($checklist_type)\nset_text($add_note_title, 'My Checklist')\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Finish homework')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Another item')\ntap($add_checklist_item_ok)\ntap($checklist_item_list[1])\nget_text($checklist_item)"}
{"task": "Open the current checklist and tap 'Settings' after opening 'more options'", "solution": "\ntap($more_options_checklist)\ntap($settings)\n"}
{"task": "Ensure the word 'budget' is present in the note, then scroll to the next instance of 'budget' within the current note.", "solution": "if 'budget' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' budget')\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Open a checklist note or create one if there is none, then rename the current checklist to 'Grocery List'", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'Dummy Checklist')\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Open the app settings and set the theme color of the app to White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "If the note 'Workout Schedule' does not exist, create it. Then, open the note titled 'Workout Schedule'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Workout Schedule')\nif len(notes) == 0:\n     back()\n     tap($create_note)\n     set_text($add_note_title, 'Workout Schedule')\n     tap($text_note_type)\n     tap($add_note_ok)\ntap(notes[0])"}
{"task": "Open the app settings directly from the home page.", "solution": "tap($settings)"}
{"task": "Open the more options menu for the current note from the home page.", "solution": "\ntap($open_note)\ntap($more_options_note)\n"}
{"task": "Show the information of the Notes app from the home page.", "solution": "tap($more_options_note)\ntap($about)"}
{"task": "Ensure a note is currently open and then open the more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Change the primary color of the app to red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom.match('Dark red')[0])\ntap($save_set_colors)"}
{"task": "Open the settings and uncheck the box for 'display save success messages'", "solution": "tap($settings);\ntap($set_display_save_success_messages);"}
{"task": "Starting from the home page, navigate to the settings and enable line wrap mode.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)"}
{"task": "Open the settings of the app and set the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open the settings menu and check the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)\n"}
{"task": "Confirm the sort type of the current checklist from the home page.", "solution": "tap($switch_item)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_ok)"}
{"task": "Open an existing checklist note or create a new one if necessary, then sort the items in the checklist by title.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open a note to access more options for the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($more_options_note)\n"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist by title.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a note if there is none or if no note is opened, then switch to the next note", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nif len(notes_list) == 0:\n    tap($create_note)\nelif not get_attributes($item_title)['selected']:\n    tap(notes_list[0])\nelse:\n    tap($switch_to_next_item)\n"}
{"task": "Open the settings of the app and set the text color", "solution": "tap($settings)\ntap($set_colors.match('Text color'))"}
{"task": "Create the note 'Daily Journal' if it doesn't exist and then open the note titled 'Daily Journal'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('Daily Journal')) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Daily Journal')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\nnotes = $open_note_title_list\nindex = next(i for i, item in enumerate(notes) if get_text(item) == 'Daily Journal')\ntap(notes[index])"}
{"task": "Open the settings of the notes app", "solution": "tap($more_options_note)tap($settings)"}
{"task": "Ensure a note is currently open and then lock the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)\n"}
{"task": "Open the checklist containing the item 'Shopping List' and rename the checklist item 'Shopping List' to 'Groceries List'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    tap(note_titles[i])\n    checklist_items = $checklist_item_list\n    if len(checklist_items.match('Shopping List')) > 0:\n        break\n    back()\nlong_tap($checklist_item.match('Shopping List')[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Groceries List')\ntap($rename_ok)"}
{"task": "Open a note or create one if there is none, then open more options for the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Enable the show word count option from the settings.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_show_word_count)"}
{"task": "Show the checklist items in the current list starting from the home page.", "solution": "tap($open_note)\ntap($open_note_title_list[0]) # Assuming the checklist is the first note\n"}
{"task": "Start from the home page and open the first note in the list.", "solution": "tap($open_note)\ntap($open_note_title_list[0])"}
{"task": "Navigate to the settings page from the home screen and enable the 'Use monospaced font' option.", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Open the settings of the app from the home page.", "solution": "tap($open_note)\ntap($settings)"}
{"task": "Navigate to the settings page from the home page and enable the 'Use Incognito mode of keyboards' setting.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "Ensure a note is currently open, then open the file of the current note", "solution": "tap($more_options_note)\ntap($open_file)"}
{"task": "Open the settings page and disable the use of a monospaced font in the Notes app.", "solution": "tap($settings)\nif get_attributes($set_use_monospaced_font)['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Open the settings of the app and set font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types[10])\nback()"}
{"task": "Create the checklist note 'Daily Tasks' if it doesn't exist and export it as a file.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes.match('Daily Tasks')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Daily Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\n    back()\ntap(open_notes.match('Daily Tasks')[0])\ntap($more_options_checklist)\ntap($export_as_file)"}
{"task": "Open the set colors screen and then close the set colors popup window", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Navigate to the Notes APP settings and set the font size to 175%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('175%')[0])"}
{"task": "Open the current note and then open more options for that note in the Notes APP", "solution": "tap($open_note)\ntap($open_note_titles[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, and sort the current checklist items by Custom", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n\tback()\t\n\ttap($create_note)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($checklist_type)\n\ttap($add_note_ok)\n\t\nelse:\n\tfor note in $open_note_title_list:\n\t\tif 'checklist' in get_text(note).lower():\n\t\t\ttap(note)\n\t\t\tbreak\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($open_note)\ntap($settings)"}
{"task": "Open any checklist note and then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Create multiple checklist items and then sort the items of the current checklist by Custom", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open or create a new note if there is none, then rename the current note to 'Meeting Notes'", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open the current checklist, return to the main screen, and tap on 'more options' of the checklist.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($switch_to_next_item)\ntap($switch_to_next_item)\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then confirm the sort type of the current checklist", "solution": "def task_0():\n\tif len($open_note_title_list) == 0:\n\t\ttap($create_note)\n\t\ttap($checklist_type)\n\t\ttap($add_note_ok)\n\telse:\n\t\ttap($open_note_title_list[0])\n\ttap($more_options_checklist)\n\ttap($sort_checklist_items)\n\ttap($sort_checklist_items_ok)\n\ttask_0()"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nnotes = $open_note_title\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the set colors screen and save the colors", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open the settings page and scroll down.", "solution": "tap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the current checklist and lock it", "solution": "tap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a note or create one if none exists, then disable the use of monospaced font in notes.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list[0])\nif get_attributes($set_use_monospaced_font)['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Open a note to ensure there is an active note in the view, then delete the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($more_option_note_buttons.match('delete note')[0])\ntap($delete_note_ok)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the checklist containing information about the app and find out more information from it.", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if 'About' in get_text($open_note_title_list[i]):\n        tap($open_note_title_list[i])\n        break\ntap($more_options_checklist)\ntap($about)"}
{"task": "Ensure the note titled 'Passwords' exists and lock the note 'Passwords'.", "solution": "tap($open_note)\nmatched_notes = $open_note_title_list.match('Passwords')\nif len(matched_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Passwords')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(matched_notes[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Ensure the note titled 'Budget Report' exists and contains an attached file, then open the attached file.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Budget Report' in note_titles:\n    idx = note_titles.index('Budget Report')\n    tap(notes[idx])\n    tap($more_options_note)\n    tap($open_file)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    checklists = $open_note_title_list.match(\"Checklist\")\n    if len(checklists) > 0:\n        tap(checklists[0])\n        tap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then add a new checklist item titled 'Buy groceries'", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy groceries')\ntap($add_checklist_item_ok)"}
{"task": "Open a text note or create one if there is none, then lock the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    if 'note' in get_text(notes[0]).lower():\n        tap(notes[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the current note and create a shortcut for it", "solution": "tap($open_note)\ntap($open_note_title[0])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open settings and set the font size to 175% in the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_font_size)\ntap($font_size_types.match(\"175%\"))\n"}
{"task": "From the home page, tap on 'more options' to open additional settings.", "solution": "tap($more_options_checklist)"}
{"task": "Open a checklist and open the more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list.match({'checked': false})[0])\ntap($more_options_checklist)"}
{"task": "Open the current note and then open more options in that note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)"}
{"task": "If a note with the title 'Grocery List' exists, rename the note title to something else; then create a new note titled 'Grocery List'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles.match('Grocery List')) > 0:\n    tap(note_titles.match('Grocery List')[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Grocery List (Old)')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the Notes App from the home screen, go to settings, and set the app font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\n"}
{"task": "Ensure there is no existing note with the title 'Grocery List' and then create a new note titled 'Grocery List' and confirm", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        long_tap(notes[i])\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)\n"}
{"task": "Set app font size to 250% from the settings accessible from the home screen.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\nback()"}
{"task": "Open the settings menu in the Notes app and set the app font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('125%')[0])"}
{"task": "Open a note or create one if there is none, then open settings from more options in the current note.", "solution": "try:\n    tap($open_note)\n    if len($open_note_title_list) > 0:\n        tap($open_note_title_list[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'My Note')\n        tap($text_note_type)\n        tap($add_note_ok)\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "If a checklist note with the title 'Daily Workout Routine' already exists, rename the checklist title to something else. Then, open the Notes APP and create a new checklist note for 'Daily Workout Routine'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Daily Workout Routine')) > 0:\n    long_tap($open_note_title_list.match('Daily Workout Routine')[0])\n    tap($rename_note)\n    set_text($rename_input, 'Old Daily Workout Routine')\n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'Daily Workout Routine')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open the settings of the Notes app and increase the font size to 150%", "solution": "tap($more_options_note['main'])\ntap($settings)\ntap($set_font_size)\ntap($font_size_150%)\n"}
{"task": "Open any note or create a new note if none exist, then search the current note for the text 'meeting agenda'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'meeting agenda')"}
{"task": "Open a checklist note or create one if there is none, then confirm the sort type of the current checklist", "solution": "try:\n    tap($open_note)\n    checklist_note = $open_note_title_list.match({'type': 'checklist'})\n    if len(checklist_note) > 0:\n        tap(checklist_note[0])\n    else:\n        raise Exception('No checklist notes found')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n\ntry:\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($sort_checklist_items_ok)\nexcept Exception as e:\n    print(f'An error occurred: {e}')"}
{"task": "Create multiple checklist items and then open the sort options to sort the checklist by date created", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($back)\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nfor item in ['item 1', 'item 2', 'item 3']:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, item)\n    tap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Open a text note or create one if there is none, then scroll to the next instance of the word 'milestone' within the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0: \n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($search_within_note)\nset_text($search_text, 'milestone')\ntap($next_matchhed_text)"}
{"task": "If a note with the title 'Project Meeting Notes' already exists, rename the existing note to something else. Then, rename the note titled 'Meeting Notes' to 'Project Meeting Notes'.", "solution": "\ntap($open_note)\nnotes = $open_note_title_list.match('Project Meeting Notes')\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Project Meeting Notes Renamed')\n    tap($rename_ok)\nnote_to_rename = $open_note_title_list.match('Meeting Notes')\nif len(note_to_rename) > 0:\n    tap(note_to_rename[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Project Meeting Notes')\n    tap($rename_ok)\nback()"}
{"task": "Open a note or create one if none exists, include the word 'meeting' inside, and then search the word 'meeting' within the current note.", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nif len(notes_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes_list[0])\nset_text($note_content, 'This is a note containing the word meeting.')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Verify that a checklist is currently open, and then open the more options menu for the current checklist.", "solution": "if len($checklist_item_list) > 0:\n    tap($more_options_checklist)"}
{"task": "Create the checklist note 'Travel Packing List' if it doesn't exist, then open the Notes APP, access the more options of the checklist titled 'Travel Packing List', and create a shortcut for it.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Travel Packing List')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Packing List')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note_title_list.match('Travel Packing List')[0])\ntap(notes[0])\ntap($more_options_checklist)\ntap($create_shortcut)"}
{"task": "Open a note or create one if there is none, then open the more options menu for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings menu and change the background color to yellow.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Assuming there's a way to set the color to yellow during this step\ntap($save_set_colors)"}
{"task": "Ensure the note titled 'Grocery List' exists; if not, create it, then open the note titled 'Grocery List' and save it after making changes to the content", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Grocery List' not in note_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\ngrocery_note_idx = note_titles.index('Grocery List')\ntap(notes[grocery_note_idx])\nset_text($note_content, get_text($note_content) + ' Updated')\ntap($save_note)"}
{"task": "If a checklist note with the title 'Grocery List' already exists, rename the existing note title to something else. Then, rename the current checklist to 'Grocery List'.", "solution": "\n# Task 3: If a checklist note with the title 'Grocery List' already exists, rename the existing note title to something else. Then, rename the current checklist to 'Grocery List'.\n\ndef task_3():\n    tap($open_note)\n    notes = $open_note_title_list.match({\"selected\": false})\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Grocery List':\n            tap(notes[i])\n            tap($more_options_checklist)\n            tap($rename_note)\n            set_text($rename_input, 'Grocery List Old')\n            tap($rename_ok)\n            break\n    \n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Grocery List')\n    tap($rename_ok)\n\ntask_3()\n"}
{"task": "Open any note or create a new note if none exist, then edit the content and save the current note", "solution": "tap($open_note)\nopen_titles = $open_note_title_list\nif len(open_titles) > 0:\n    tap(open_titles[0])\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nset_text($note_content, 'This is the new content.')\ntap($save_note)"}
{"task": "Open a note or create one if none exists, then save the current note.", "solution": "\nelement_dict = get_attributes($open_note_title_list)\nif len(element_dict) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"New Note\")\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($save_note)\n"}
{"task": "Verify that a note is currently open and then open more options for the current note.", "solution": "\n# Verify that a note is currently open and then open more options for the current note.\n\ntry:\n    if 'note_content' in globals():\n        tap($more_options_note)\n    else:\n        raise Exception('No note is currently open')\nexcept Exception as e:\n    print(e)\n"}
{"task": "Ensure locking action has been initiated, then tap on 'OK' to confirm locking the current note", "solution": "tap($lock_note_ok)"}
{"task": "Set the font size to 250% from the home page of the Notes APP", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\ntap($exit_settings)"}
{"task": "Ensure the word 'deadline' exists in the current note, then search for it.", "solution": "content = get_text($note_content)\nif 'deadline' not in content:\n    set_text($note_content, content + ' deadline')\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($next_matchhed_text)"}
{"task": "Open a checklist note or create one if none exists, then sort the current checklist by 'Custom'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    checklist_titles = $open_note_title_list\n    for i in range(len(checklist_titles)):\n        tap($checklist_titles[i])\n        if $checklist_titles[i].match({'selected':True}):\n            break\n    attributes = get_attributes($more_options_checklist)\n    if attributes['selected'] == False:\n        tap($more_options_checklist)\n        tap($sort_checklist_items)\n        tap($custom_type)\n        tap($sort_checklist_items_ok)"}
{"task": "Open the note titled 'Work Notes' if it exists, then search for the text 'Meeting' within it.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_titles_matched = note_titles.match('Work Notes')\n\nif len(note_titles_matched) > 0:\n    tap(note_titles_matched[0])\n    tap($search_within_note)\n    set_text($search_text, 'Meeting')"}
{"task": "Open the current note and then open the settings of the app from the note options", "solution": "if not get_attributes($note_content)['selected']:\n    if len($open_note_title_list) == 0:\n        tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the settings menu in the Notes app, and set the app's theme to dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Rename the current note to 'Grocery List' from the home page", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)\n"}
{"task": "Open the settings page from the home screen, navigate to the color customization section, and save the customized colors.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "If you are not on the settings page, first navigate to the settings page, then set the theme color of the app to dark mode.", "solution": "\nif not 'settings' in globals():\n    tap($more_options_note)\n\nif not get_attributes($settings)['selected']:\n    tap($settings)\ntap($set_colors)\ntap($set_theme_color)\nif not get_attributes($theme_color_dark)['selected']:\n    tap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "From the home page, set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)\nback()"}
{"task": "Ensure a note is currently open and then access more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Show the current font size.", "solution": "tap($settings)\ntap($current_font_size)\n"}
{"task": "Customize the app's colors through the settings", "solution": "tap($settings)\ntap($set_colors)\n# Customize desired colors\n# Here's a hypothetical example, assuming you want to set theme, text, and background color\n# Set Theme Color\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)\nback()\n# Set Text Color\ntap($set_text_color)\n# Select a specific color for text here, let's assume it's done\nback()\n# Set Background Color\ntap($set_background_color)\n# Select a specific background color here, let's assume it's done\nback()\n# Save the changes\ntap($save_set_colors)\nback()"}
{"task": "Set the font size to 300% from the home page of the Notes APP.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('300%')[0])"}
{"task": "Verify all notes exist in the application and then export all notes", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    tap(open_note_titles[i])\nback()\ntap($settings)\ntap($export_notes)"}
{"task": "Rename the current note to 'Updated Notes'", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Updated Notes')\ntap($rename_ok)\nback()"}
{"task": "Open a checklist note or create one if there is none, then open the more options for the current checklist", "solution": "tap($open_note)\nchecklist_opened = False\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    if len($checklist_item_list) > 0:\n        checklist_opened = True\n        break\n    back()\nif not checklist_opened:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a checklist or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the settings page and set the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Create the note 'Financial Plan' if it doesn't exist, then search for 'budget' within the note titled 'Financial Plan'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nnotes = open_note_titles.match('Financial Plan')\nif len(notes) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Financial Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($search_within_note)\nset_text($search_text, 'budget')"}
{"task": "Open the settings in the Notes APP from the home page.", "solution": "tap($switch_item)\n    tap($settings)"}
{"task": "If you are not already on the settings page, first open the settings page of the app, and then customize the colors of the app.", "solution": "if 'settings' not in get_attributes($set_colors):\n    tap($settings)\ntap($set_colors)"}
{"task": "Rename the current note to 'Meeting Notes'", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Check the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by Date created.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings page and customize the widget colors", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_widget_colors)"}
{"task": "Open settings of the app from the main screen.", "solution": "tap($settings)"}
{"task": "Open a checklist or create one if there is none, and then sort the items of the current checklist by name.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a note or create one if there is none, then open more options of the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Disable the show word count option in the Notes app. Users can directly disable this option from the home page without additional preparation.", "solution": "tap($set_show_word_count)"}
{"task": "Open the settings page from the home screen and customize the colors of the app.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Show the current font size in the Notes app.", "solution": "tap($settings)\ntap($current_font_size)\ncurrent_size = get_text($current_font_size)\nback()\nprint(current_size)"}
{"task": "Enable the incognito mode for keyboards from the home page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Create the note 'Grocery List' if it doesn't exist, then tap the 'Open Note' button to edit the note titled 'Grocery List'", "solution": "tap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($add_note_ok)\ntap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        tap(notes[i])\n        break"}
{"task": "Open the settings of the app", "solution": "tap($settings)"}
{"task": "Open a note or create one if none exists, then rename the current note to 'Grocery List'.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nget_text($item_title)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Open the settings of the app and customize the widget colors", "solution": "tap($more_options_note)\nif 'settings' in get_text($popup_window_elements):\n    tap($settings)\ntap($set_widget_colors)"}
{"task": "If the current page is not the settings page, open the settings page and then enable incognito mode for keyboards.", "solution": "if not len($settings):\n    tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Navigate to customization settings and customize the colors of the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)"}
{"task": "Check the current font size directly from the home page of the Notes app.", "solution": "tap($settings)\ntap($current_font_size)\nfont_size = get_text($current_font_size)\nprint(font_size)\nback()"}
{"task": "Open the settings page and change the app theme to light mode", "solution": "tap($open_note)\nback()\n\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($close_set_colors)"}
{"task": "Ensure the checklist 'Fitness Goals' exists and print it", "solution": "fitness_goals = $open_note_title_list.match('Fitness Goals')\nif not fitness_goals:\n    tap($create_note)\n    set_text($add_note_title, 'Fitness Goals')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap(fitness_goals[0])\nprint('Fitness Goals checklist opened.')"}
{"task": "Open a checklist or create one if there is none, then sort the checklist by custom order.", "solution": "try:\n    open_note()\n    checklist_elements = $open_note_title_list.match({'type': 'checklist'})\n    if len(checklist_elements) > 0:\n        tap(checklist_elements[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($custom_type)\n    tap($sort_checklist_items_ok)\nfinally:\n    back()\n    "}
{"task": "Set the theme color to dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\nback()"}
{"task": "Open settings and set the alignment to right in the Notes app", "solution": "tap($settings)\ntap($set_alignment)\n# Assuming there's an option for 'Right' alignment within the alignment setting window\ntap($alignment_right)\ntap($save_alignment)"}
{"task": "Ensure there are multiple notes or checklist items to switch between, then switch to the next note or checklist item.", "solution": "\nwhile len($open_note_title_list) < 2:\n    tap($create_note)\n    set_text($add_note_title, f'Note {len($open_note_title_list) + 1}')\n    tap($text_note_type)\n    tap($add_note_ok)\nswip($switch_to_next_item, 'down')"}
{"task": "Ensure there is an existing note open, then search within the current note", "solution": "tap($search_within_note)\nset_text($search_text, 'Meeting')"}
{"task": "Open the alignment settings in the Notes APP and set the alignment to right", "solution": "tap($settings)\ntap($set_alignment)\ntap($theme_color_custom)"}
{"task": "Open the note titled 'To-Do List', add the item 'Call plumber' if it doesn't exist, and then check off the item 'Call plumber'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'To-Do List':\n        tap(notes[i])\n        break\nchecklist_items = $checklist_item_list\nitem_exists = False\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Call plumber':\n        item_exists = True\n        break\nif not item_exists:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Call plumber')\n    tap($add_checklist_item_ok)\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Call plumber':\n        tap(checklist_items[i])\n        break"}
{"task": "Open or create a note, then open the settings page through note more options", "solution": "if len($open_note_title_list) == 0: \n    tap($create_note)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Create a new note and select 'Checklist' type from the home page without any preparatory steps.", "solution": "tap($create_note)\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Ensure the note contains the keyword 'project' and then search for the keyword 'project' within the current note", "solution": "\n# Ensure the note contains the keyword 'project'\nnote_content = get_text($note_content)\nif 'project' in note_content:\n    tap($search_within_note)\n    set_text($search_text, 'project')\nelse:\n    print('The note does not contain the keyword \"project\".')\n"}
{"task": "If the 'Daily Tasks' note has less than two checklist items, add multiple checklist items to it and then scroll through the checklist items.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\ndaily_tasks = open_note_titles.match('Daily Tasks')\nif len(daily_tasks) > 0:\n    tap(daily_tasks[0])\n    checklist_items = $checklist_item_list\n    if len(checklist_items) < 2:\n        for i in range(2 - len(checklist_items)):\n            tap($add_checklist_item)\n            set_text($add_checklist_item_title, f'Checklist Item {i+1}')\n            tap($add_checklist_item_ok)\n    else:\n        scroll($checklist_item_list, 'down')\n"}
{"task": "Open a checklist note or create one if none exists, then sort the items of the current checklist by title.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nis_checklist_found = False\nfor i in range(len(notes)):\n    tap(notes[i])\n    is_checklist = len($checklist_item_list) > 0\n    if is_checklist:\n        is_checklist_found = True\n        break\nif not is_checklist_found:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open or create a checklist note if there is none, then open more options for the current checklist.", "solution": "if len($open_note_title_list) == 0:   \n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)   \nelse:\n    tap($switch_to_next_item)\n    try: \n        while len(get_attributes($checklist_item_list)) <= 0:\n            tap($switch_to_next_item)\n        tap($more_options_checklist)\n    except: \n        tap($switch_to_prev_item)\n        tap($more_options_checklist)"}
{"task": "Open the settings page if the current page is not the settings page, then set the theme of the app to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match({'text': 'Dark red'})[0])"}
{"task": "Open the settings of the Notes app and disable 'Use Incognito mode of keyboards'", "solution": "\nif len($settings) == 0:\n    tap($more_options_note)\n    tap($settings)\nelse:\n    tap($settings)\n\nif get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)\n"}
{"task": "Create the note titled 'Private Journal' if it doesn't exist, then open the Notes app and lock the note titled 'Private Journal'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nexisting_notes = [get_text(note) for note in notes]\nif 'Private Journal' not in existing_notes:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Private Journal')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    private_note_idx = existing_notes.index('Private Journal')\n    tap(notes[private_note_idx])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open or create a note if there is none, then lock the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings of the Notes app and enable 'Enable line wrap'", "solution": "\ntap($settings)\ntap($set_enable_line_wrap)\ntap($exit_settings)\n"}
{"task": "Open a note and tap on 'Search' within the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($search_within_note)"}
{"task": "Open the current note and lock it", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings menu in the Notes app and set the font size.", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Enable word count display directly from the home page in the Notes app.", "solution": "tap($settings)\ntap($set_show_word_count)\nback()"}
{"task": "Open settings and set the background color of the app to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# assuming 'white' corresponds to one of the selection options in a popup\n# and it's at the index we select based on prior knowledge.\n# Since we have no such index stated here, this is a placeholder.\n# Replace the index appropriately.\ntap($theme_color_types[4])  # example index\ntap($save_set_colors)"}
{"task": "Open the settings of the app and set alignment", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Open the settings of the app and activate the Black & White theme", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Open multiple notes in the application, then switch to the previous note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\ntap(notes[0])\ntap($open_note)\ntap(notes[1])\ntap($switch_to_prev_item)"}
{"task": "Navigate to the settings page from the home page to show the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)\nprint(get_text($font_size_types.match({'selected': True})[0]))"}
{"task": "Navigate to the settings page and set the app font size to 50%", "solution": "\ntap($settings)\ntap($set_font_size)\ntap($font_size_50%)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Navigate to the settings page and set the app font size to 100%", "solution": "tap($settings)\nfont_sizes = $font_size_types\nfor size in font_sizes:\n    if get_text(size) == '100%':\n        tap(size)\n        break\nback()"}
{"task": "Ensure the note titled 'Project Ideas' exists and create a shortcut for it.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Project Ideas':\n        tap(note_titles[i])\n        break\ntap($more_options_note)\ntap($create_shortcut)\n"}
{"task": "If a note with the title 'Project Plan' already exists, rename or delete it, then create a new note titled 'Project Plan'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nproject_note = note_titles.match('Project Plan')\nif len(project_note) > 0:\n    tap(project_note[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Project Plan')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Initiate the creation of a new note and confirm its creation", "solution": "tap($create_note)\ntap($add_note_ok)"}
{"task": "Open or create a checklist note to make it the current checklist, then open the settings menu from the more options menu to customize the colors of the app.", "solution": "try:\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    for note in open_note_titles:\n        tap(note)\n        if get_attributes($checklist_item_list):\n            break\n    else:\n        raise Exception('No checklist notes available')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\ntap($set_colors)"}
{"task": "Open the settings menu starting from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open a checklist note or create one if none exists, then open more options of the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match({'type': 'checklist'})[0])\ntap($more_options_checklist)"}
{"task": "Open a note that allows accessing more options if none is currently opened, then open more options for the current note", "solution": "if 'note_opened' not in globals() or not note_opened:\n    tap($open_note)\n    tap($open_note_title_list[0])\n    note_opened = True\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if none exists, then tap 'more options', tap 'Sort by', and sort the checklist items by 'Custom'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings page if the current page is not the settings page, then set the font size to 100%", "solution": "if not get_attributes($settings) and not get_attributes($scroll_settings_page):\n    tap($settings)\\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "Open a checklist note or create one if none exists, choose a sort type, and confirm the sorting type of checklist items by tapping 'OK'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($note_titles[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_types[<idx_for_sort_type>])\ntap($sort_checklist_items_ok)"}
{"task": "Open app settings", "solution": "tap($settings)"}
{"task": "Open a note or create one if none exists, then enable the use of monospaced font in the note.", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) == 0:  # If no notes exist\n        tap($create_note)\n        tap($text_note_type)\n        set_text($add_note_title, 'New Note')\n        tap($add_note_ok)\n    else:\n        tap(note_titles[0])\n    tap($more_options_note)\n    tap($settings)\n    tap($set_use_monospaced_font)\n    back()  # Exit settings\nexcept Exception as e:\n    print(e)"}
{"task": "Open the settings page if the current page is not the settings page and change the font size to 125%.", "solution": "if not get_attributes($settings)[\"selected\"]:\n    tap($settings)\nif not get_attributes($font_size_125%)[\"selected\"]:\n    tap($current_font_size)\n    tap($font_size_125%)"}
{"task": "Open the Notes app from the home page and create a new text note", "solution": "tap($open_note)\ntap($create_note)\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Navigate to font settings and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '90%'})[0])"}
{"task": "Navigate to theme settings and change theme to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "From the home screen, go to settings and enable 'show a note picker on startup'.", "solution": "tap($settings)\nif get_attributes($set_show_a_note_picker_on_startup)['checked'] == False:\n    tap($set_show_a_note_picker_on_startup)"}
{"task": "Open the app settings, navigate to the theme color settings, and set the theme color to dark.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings menu and enable line wrap", "solution": "tap($settings)\ntap($set_enable_line_wrap)"}
{"task": "Open a note or create one if there is none, then open the more options menu for the current note", "solution": "note_found = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    tap($more_options_note)\n    note_found = True\n    break\nif not note_found:\n    back()\n    tap($create_note)\n    set_text($add_note_title, \"New Note\")\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the Notes app settings and enable the 'Show keyboard on startup' setting", "solution": "tap($settings)\ncheckbox = get_attributes($set_show_keyboard_on_startup)\nif not checkbox['checked']:\n    tap($set_show_keyboard_on_startup)\n"}
{"task": "Open any note or create one if none exist, then show the title of the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nnote_title = get_text($item_title)\nnote_title"}
{"task": "Ensure at least one note exists and is open, then open the more options of the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings page and change the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\n"}
{"task": "Open more options for the current note after having a note open.", "solution": "tap($more_options_note)"}
{"task": "Ensure a note is open, then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note or create one if there is none, then open more options for the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the current note to ensure it is active on the UI, then export the current note as a file.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the settings menu in the Notes app and check the font size setting", "solution": "tap($settings)\ntap($current_font_size)\nback()"}
{"task": "Open the Font size settings from the Settings and show the current font size setting in the app.", "solution": "tap($settings)\ntap($set_font_size)\ncurrent_size = get_text($current_font_size)\nprint(current_size)"}
{"task": "Open the settings menu and increase the font size in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%) # Increase the font size to 125%\nback() # Go back to the settings menu\nback() # Go back to the main screen"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Set the font size of the app to 200% directly from settings on the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '200%'}))\ntap($sort_checklist_items_ok)\ntap($exit_settings)"}
{"task": "Navigate to the settings page from the home page and enable the 'Show word count' option", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_show_word_count)"}
{"task": "Enable showing keyboard on startup from the Notes APP home page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_show_keyboard_on_startup)\nback()"}
{"task": "Open the settings of the Notes app and disable the option to show a note picker on startup", "solution": "tap($open_note)\ntap($settings)\nif get_attributes($set_show_a_note_picker_on_startup)['checked']:\n    tap($set_show_a_note_picker_on_startup)\nback()"}
{"task": "Navigate to font settings and set the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Open the color settings and set the app icon color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_types.match('Custom')[0])\ntap($save_set_colors)"}
{"task": "Open a note that allows accessing more options and then open more options of the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note or create one if there is none, then tap 'Settings' after tapping 'more options' on the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Navigate to font settings and set the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Open the current checklist to ensure it is active on the UI and then lock it", "solution": "tap($open_note)\ntap($checklist_item_list[0])\ntap($more_options_checklist)\ntap($lock_note)"}
{"task": "Open the settings page if the current page is not the settings page, then customize the app colors.", "solution": "if 'Settings' not in get_text($item_title):\n    tap($open_note)\n    back()\n    tap($more_options_note)\n    options = $more_options_note.match('Settings')\n    tap(options[0])\ntap($set_colors)"}
{"task": "Create the note 'Meeting Minutes' if it doesn't exist, then create a shortcut for the current note titled 'Meeting Minutes'.", "solution": "exists = False\ntap($open_note)\nfor note in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[note]) == 'Meeting Minutes':\n        tap($open_note_title_list[note])\n        exists = True\n        break\nif not exists:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open the theme color settings in the app and set the theme color to black and white", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)"}
{"task": "Open more options for the current note from the home page", "solution": "tap($more_options_note)"}
{"task": "If the current page is not the settings page, open the settings page and then set the theme of the app to custom.", "solution": "try:\n    tap($settings)\nexcept:\n    tap($more_options_note)\n    tap($settings)\nfinally:\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_custom)"}
{"task": "Set the font size to 150% in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\nback()"}
{"task": "Open the settings from the current note by first ensuring a note is available and open. If no note exists, create a new one.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($settings)"}
{"task": "Create a checklist titled 'Completed Tasks' if it doesn't exist, then delete the checklist titled 'Completed Tasks'", "solution": "tap($open_note)\nif not len($open_note_title_list.match('Completed Tasks')): \n    tap($create_note)\n    set_text($add_note_title, 'Completed Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Completed Tasks')[0])\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings of the Notes App from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the font size settings within the app settings and set the font size of the app.", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "If no note is currently open, open a note, then open more options for the current note.", "solution": "if not get_text($item_title):\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Create the note titled 'Project Plan' if it doesn't exist, then open the note titled 'Project Plan'", "solution": "title_existed = False\ntap($open_note)\nfor title in range(len($open_note_title_list)):\n\tif get_text($open_note_title_list[title]) == 'Project Plan':\n\t\ttitle_existed = True\n\t\ttap($open_note_title_list[title])\n\t\tbreak\nif not title_existed:\n\ttap($create_note)\n\tset_text($add_note_title, 'Project Plan')\n\ttap($text_note_type)\n\ttap($add_note_ok)\n\ttap($open_note)\nfor title in range(len($open_note_title_list)):\n\tif get_text($open_note_title_list[title]) == 'Project Plan':\n\t\ttap($open_note_title_list[title])\n\t\tbreak"}
{"task": "Create the note titled 'Birthday Invitation' if it doesn't exist, then print the note titled 'Birthday Invitation'", "solution": "def create_and_print_note(note_title):\n    tap($create_note)\n    set_text($add_note_title, note_title)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    notes = $open_note_title_list\n    if note_title not in [get_text(note) for note in notes]:\n        tap($create_note)\n        set_text($add_note_title, note_title)\n        tap($text_note_type)\n        tap($add_note_ok)\n        tap($open_note)\n    note = notes.match(note_title)[0]\n    tap(note)\n    tap($more_options_note)\n    tap($print_note)\n\ncreate_and_print_note('Birthday Invitation')"}
{"task": "Navigate to the settings page and tap 'export notes'", "solution": "tap($settings)\ntap($export_notes)"}
{"task": "Navigate to customization settings and then customize the colors in the Notes app.", "solution": "tap($more_options_note)\ntap($rename_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open a note or create one if there is none, then set the font size to 300%", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($settings)\ntap($set_font_size)\ntap($font_size_300%)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings of the app and adjust the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)\nback()"}
{"task": "Navigate to the settings from the home page, and set the theme color of the Notes APP to Black & White.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('Black & White')[0])\ntap($save_set_colors)"}
{"task": "Open a checklist note if it doesn't exist or create one, then open more options of the current checklist", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'Checklist Note')    tap($checklist_type)    tap($add_note_ok)tap($more_options_checklist)"}
{"task": "Open the settings page and scroll through it.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Navigate to the settings page and change the font size to 300%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"300%\"))"}
{"task": "Navigate to the settings page from the home page and show information about the app", "solution": "\ntap($settings)\ntap($about)\n"}
{"task": "Ensure 'budget' is a term within the note titled 'Financial Plan', then search for the term 'budget' within the note.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Financial Plan')\nif len(notes) > 0:\n    tap(notes[0])\nnote_content = get_text($note_content)\nif 'budget' not in note_content:\n    note_content += '\\nbudget'\n    set_text($note_content, note_content)\n    tap($save_note)\ntap($search_within_note)\nset_text($search_text, 'budget')"}
{"task": "Create the note 'Project Ideas' if it doesn't exist and interact with more options for the note titled 'Project Ideas'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(note) == 'Project Ideas' for note in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Project Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\nnote_titles = $open_note_title_list\nfor note in note_titles:\n    if get_text(note) == 'Project Ideas':\n        tap(note)\n        tap($more_options_note)\n        break"}
{"task": "Open any existing note and save the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($save_note)"}
{"task": "Import notes", "solution": "\n# Import notes\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($import_notes)\nback()\n"}
{"task": "Navigate to the settings page from the home page and set the primary color of the notes app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Open the font size settings and set the font size of the app", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Open the settings page from the home screen", "solution": "tap($settings);"}
{"task": "Ensure 'budget' is a term used multiple times in the note titled 'Financial Plan', then find the next instance of 'budget' in the note.", "solution": "tap($open_note)\ntap($open_note_title_list.match('Financial Plan'))\nset_text($note_content, 'budget budget budget')\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Create the note titled 'Shopping List' if it doesn't exist, then open it.", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    match_titles = note_titles.match('Shopping List')\n    if len(match_titles) > 0:\n        tap(match_titles[0])\n    else:\n        raise ValueError('Note not found')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)\n    open_notes = $open_note_title_list.match('Shopping List')\n    tap(open_notes[0])"}
{"task": "If a note titled 'Grocery List' does not exist, create it, and then scroll through the items until you find the note titled 'Grocery List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        tap(notes[i])\n        break\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Grocery List':\n            tap(notes[i])\n            break"}
{"task": "Ensure there is at least one existing note, then open the latest note", "solution": "open_note_button_exists = len($open_note) > 0\nif open_note_button_exists:\n    tap($open_note)\n    note_titles = $open_note_title\n    if len(note_titles) > 0:\n        tap(note_titles[-1])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Set the font size to 60% using the settings page in the Notes APP on your smartphone.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"60%\"))\ntap($save_set_colors)"}
{"task": "Open any existing note, search for the word 'deadline', and tap the 'Previous' button to find the previous occurrence of 'deadline' within the note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($prev_matched_text)"}
{"task": "Ensure there is at least one note after the current one, then switch to the note following the current one.", "solution": "if get_attributes($switch_to_next_item).get('scrollable', False):\n    tap($switch_to_next_item)\nelse:\n    print('There is no note after the current one.')"}
{"task": "Open the Font size settings from the Settings and set the font size to 175%", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "If a checklist with the title 'Groceries' already exists, rename it to something else, then create a new checklist with the title 'Groceries'", "solution": "tap($open_note)\ntitles = [get_text(item) for item in $open_note_title_list]\nif 'Groceries' in titles:\n    idx = titles.index('Groceries')\n    tap($open_note_title_list[idx])\n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Groceries - old')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Groceries')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open the settings of the Notes app and turn on line wrap", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_enable_line_wrap)\nback()"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checkbox.match('Checklist'))\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open any existing note and lock the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the theme settings within the app settings and set the theme color to light", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)"}
{"task": "Open the current checklist and then print it", "solution": "tap($checklist_item_list)\ntap($more_options_checklist)\ntap($print_note)"}
{"task": "Enable show keyboard on startup directly from settings on the home page.", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Open the Font size settings from the Settings and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Open a note or create one if there is none, then delete the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\ntap(notes[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Set the font size of the app to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open the customize colors settings to allow for modifying the colors of the Notes app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure a note is open and then open more options for the current note", "solution": "if not get_attributes($open_note)['selected']:\n    tap($open_note)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then open more options in the checklist and set the font size to 60%", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($current_font_size)\ntap($font_size_types.match('60%')[0])\ntap($sort_checklist_items_ok)"}
{"task": "Apply color customizations to the Notes App and save the customized colors.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Ensure a note titled 'Trip Itinerary' exists and then open the file of the note titled 'Trip Itinerary'", "solution": "tap($create_note)\nset_text($add_note_title, 'Trip Itinerary')\ntap($add_note_ok)\nif len($open_note_title_list.match('Trip Itinerary')) == 0:\n    tap($open_note)\ntap($open_note_title_list.match('Trip Itinerary')[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open the settings of the Notes APP from the home page", "solution": "\ntap($settings)\n"}
{"task": "Add multiple checklist items and then sort them by title.", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "If a checklist with the title 'Grocery List' already exists, rename that checklist to something else and then rename the current checklist to 'Grocery List'", "solution": "\ntap($open_note)\nfor item in $open_note_title_list:\n\tif get_text(item) == 'Grocery List':\n\t\tlong_tap(item)\n\t\ttap($more_options_checklist)\n\t\ttap($rename_note)\n\t\tset_text($rename_input, 'Old Grocery List')\n\t\ttap($rename_ok)\n\t\tbreak\ntap($create_note)\ntap($checklist_type)\nset_text($add_note_title, 'Grocery List')\ntap($add_note_ok)"}
{"task": "Set the font size to 100% in the Notes APP on your smartphone", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"100%\"))"}
{"task": "Open a checklist note with the item 'Buy groceries' and delete the item 'Buy groceries'", "solution": "open_checklist_item_title = 'Buy groceries'\ntap($open_note)\ntap($open_note_title_list.match({'text': open_checklist_item_title})[0])\nlong_tap($checklist_item_list.match({'text': open_checklist_item_title})[0])\ntap($delete_selected_checklist_item)"}
{"task": "Rename a checklist to any new title and then confirm the rename operation for the current checklist", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'New Checklist Title')\ntap($rename_ok)"}
{"task": "Ensure a note is open and then open settings from the more options in the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($more_options_note)\ntap($settings)"}
{"task": "Ensure there is no existing note titled 'Grocery List' and then create a new checklist note titled 'Grocery List'", "solution": "tap($open_note)\nif $open_note_title_list.match('Grocery List'):\n    tap($open_note_title_list.match('Grocery List')[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open the settings of the Notes app and use monospaced font", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Sort the checklist by a specific type (e.g., custom order, alphabetical order) to ensure there is a specific sort type applied, then confirm the sort type for the current checklist", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open settings in the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Open the more options menu for the current checklist and then open the settings page from the more options checklist menu.", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Open a note, then open the more options of the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Open the color settings and then close the color settings popup by clicking the close button.", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "If there are fewer than four checklist items, create additional checklist items until there are at least four, then tap on the fourth checklist item", "solution": "if len($checklist_item_list) < 4:\n    needed_items = 4 - len($checklist_item_list)\n    for _ in range(needed_items):\n        tap($add_checklist_item)\n        tap($add_checklist_item_ok)\ntap($checklist_item_list[3])"}
{"task": "Ensure there is no existing note titled 'Meeting Notes' and then create a new note with the title 'Meeting Notes'.", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nfor i in range(len(note_list)):\n    if get_text(note_list[i]) == 'Meeting Notes':\n        long_tap(note_list[i])\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($back)\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "From the home page, navigate to settings and set the theme color of the app to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('Dark red')[0])\ntap($close_set_colors)"}
{"task": "Open a checklist note if it doesn't exist or create one, then open the more options menu for the current checklist.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif not open_note_titles:\n\ttap($create_note)\n\tset_text($add_note_title, 'My Checklist')\n\tcheckboxes = $add_note_types\n\ttap(checkboxes[1])  # Assuming the second checkbox is for checklist note\n\ttap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Input a search term in the search box and tap on 'Next' to find the next occurrence", "solution": "set_text($search_text, 'search term')\ntap($next_matchhed_text)"}
{"task": "Open any note or create one if there is none, then lock the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Create the note titled 'Work Schedule' if it does not exist, then lock the note titled 'Work Schedule'", "solution": "tap($open_note)\nnotes_titles = $open_note_title_list\nif not any([get_text(note) == 'Work Schedule' for note in notes_titles]):\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Work Schedule')\n    tap($add_note_ok)\ntap(notes_titles.match('Work Schedule')[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then open the file of the current checklist", "solution": "all_notes = $open_note_title_list\nif len(all_notes) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Create checklist items, mark them as done, and then remove done items from the current checklist.", "solution": "if get_attributes($checklist_item_list)['exists']:\n    for i in range(3):\n        tap($add_checklist_item)\n        set_text($add_checklist_item_title, f'Item {i+1}')\n        tap($add_checklist_item_ok)\n    for item in $checklist_item_list:\n        tap(item)\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)"}
{"task": "Search within the current note for the term 'goals' and then close the search box.", "solution": "tap($search_within_note)\nset_text($search_text, 'goals')\ntap($close_search_box)"}
{"task": "Enable the 'Show a note picker on startup' setting from the settings page", "solution": "tap($settings)\nif not get_attributes($set_show_a_note_picker_on_startup)['checked']:\n    tap($set_show_a_note_picker_on_startup)"}
{"task": "Open a checklist note or create one if there is none, so it can be printed during the execution of the main task.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n"}
{"task": "Open the text color settings and set the text color of the notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_text_color)"}
{"task": "Open the settings page and then exit the settings page.", "solution": "tap($settings)\nback()"}
{"task": "Open the Notes app, create a note titled 'Travel Itinerary' if it doesn't exist, and print the note titled 'Travel Itinerary'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Travel Itinerary')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($save_note)\nnotes = $open_note_title_list.match('Travel Itinerary')\ntap(notes[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "If the checklist titled 'Shopping List' does not exist, create it. Then, open the Notes APP and open the checklist file for 'Shopping List'.", "solution": "tap($open_note)\ntitles = [get_text($open_note_title_list[i]) for i in range(len($open_note_title_list))]\nif 'Shopping List' not in titles:\n    tap($create_note)\n    set_text($add_note_title, \"Shopping List\")\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match(\"Shopping List\"))"}
{"task": "Create a note titled 'Workout Routine' if it doesn't exist, then open the Notes app and open the note titled 'Workout Routine'", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nfor i in range(len(notes_list)):\n    if get_text(notes_list[i]) == 'Workout Routine':\n        tap(notes_list[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Workout Routine')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(notes_list)):\n        if get_text(notes_list[i]) == 'Workout Routine':\n            tap(notes_list[i])\n            break"}
{"task": "Open the Notes app and add a new checklist item called 'Buy groceries'", "solution": "tap($create_note)\ntap($checklist_type)\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy groceries')\ntap($add_checklist_item_ok)"}
{"task": "Change the app's font size to 75%", "solution": "tap($set_font_size)\ntap($font_size_75%)"}
{"task": "Create a note titled 'Weekly Report' if it doesn't exist, then delete the note titled 'Weekly Report'.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nexisting_titles = [get_text(note) for note in open_notes]\nif 'Weekly Report' not in existing_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Weekly Report')\n    tap($text_note_type)\n    tap($add_note_ok)\nback()\ntap($open_note)\nnotes = $open_note_title_list.match('Weekly Report')\ntap(notes[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the Theme settings to set the theme color", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Set the font size of the app to 100% by accessing the settings page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('100%')[0])\n"}
{"task": "Open the settings page from the home page and enable auto light/dark theme for the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)"}
{"task": "Open the settings page from the home page and set the primary color of the app to green.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom)\nset_text($customize_primary_ok, 'green')\ntap($save_set_colors)"}

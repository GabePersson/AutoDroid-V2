{"task": "Ensure a note is open and is the current note, then open more options for that note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) > 0:\n    tap(note_titles[0])\ntap($more_options_note)"}
{"task": "Navigate to the home page of the Notes APP, go to settings, and customize the colors of the app.", "solution": "back()\ntap($settings)\ntap($set_colors)"}
{"task": "Navigate to the settings page and set the theme color of the app to custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu in the current checklist.", "solution": "back()\nif len($open_note_title_list) == 0:\n    tap($open_note)\ntitles = $open_note_title_list\nfound = False\nfor i in range(len(titles)):\n    tap(titles[i])\n    if len($checklist_item_list) > 0:\n        found = True\n        break\nif not found:\n    tap($create_note)\n    set_text($add_note_title, \"New Checklist Note\")\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Navigate to the settings page and increase the font size of the app to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)"}
{"task": "Open a note and tap on the 'more options' button for the current note", "solution": "tap($open_note)\n# Select the first note from the list and open it\nfirst_note = $open_note_title_list[0]\ntap(first_note)\ntap($more_options_note)"}
{"task": "Open a note from the home page and create a checklist", "solution": "tap($open_note)\n# Open the first note from the list\nfirst_note = $open_note_title_list[0]\ntap(first_note)\ntap($create_note)\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open or create a checklist note if it doesn't exist, then open more options for the current checklist", "solution": "tap($open_note)\n# Check if there is any checklist in note titles\nnote_titles = $open_note_title_list\nchecklist_found = False\nfor i in range(len(note_titles)):\n    tap(note_titles[i])\n    if get_attributes($note_content)[\"selected\"] == False and get_attributes($checklist_type)[\"selected\"]:\n        checklist_found = True\n        tap($more_options_checklist)\n        break\nif not checklist_found:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)"}
{"task": "Open the settings of the app", "solution": "tap($more_options_note)\nmore_option_buttons = $more_option_note_buttons\nfor button in more_option_buttons:\n    if get_text(button) == \"Settings\":\n        tap(button)\n        break"}
{"task": "Open an existing note or create a new one if necessary, then open more options in the current note.", "solution": "tap($open_note)\n# Check if there are any existing notes to open\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a checklist about weekend chores or create one if it doesn't exist, then open more options for the current checklist.", "solution": "if len($open_note) > 0:\n    tap($open_note)\n    notes = $open_note_title_list.match('weekend chores')\n    if len(notes) > 0:\n        tap(notes[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'weekend chores')\n        tap($checklist_type)\n        tap($add_note_ok)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'weekend chores')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Open the settings page and set the app alignment to center", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Open a checklist about office supplies or create one if it doesn't exist, then print the current checklist for office supplies", "solution": "if len($open_note) > 0:\n    tap($open_note)\n    notes = $open_note_title_list.match('office supplies')\n    if len(notes) > 0:\n        tap(notes[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'office supplies')\n        tap($checklist_type)\n        tap($add_note_ok)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'office supplies')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($print_note)"}
{"task": "Open the note creation interface, then create a new note entitled 'Grocery List' and type 'Milk, Eggs, Bread' and save it.", "solution": "tap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)\nset_text($note_content, 'Milk, Eggs, Bread')\ntap($save_note)"}
{"task": "Open the settings page of the Notes App and set the theme color to Black & White.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('Black & White'))"}
{"task": "Ensure a note titled 'Grocery List' exists, and then open it.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Grocery List':\n        tap(note)\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Open a checklist note if none are currently opened, then switch to the next checklist item.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nchecklist_found = False\nfor title in open_note_titles:\n    if 'checklist' in get_text(title).lower():\n        tap(title)\n        checklist_found = True\n        break\nif not checklist_found:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($switch_to_next_item)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu in the current checklist.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nchecklist_found = False\nfor title in open_note_titles:\n    if 'checklist' in get_text(title).lower():\n        tap(title)\n        checklist_found = True\n        break\nif not checklist_found:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note or create one if there is none, then save changes to the current note", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nnote_found = False\nfor title in open_note_titles:\n    if 'note' in get_text(title).lower():\n        tap(title)\n        note_found = True\n        break\nif not note_found:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($save_note)"}
{"task": "Ensure a checklist is opened and sort the items in the current checklist by custom criteria.", "solution": "if len($checklist_item_list) == 0:\n    # Checklist not open, open a note\n    tap($open_note)\n    tap($open_note_title_list.match({'type': 'checklist'})[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist note with the item 'Walk the dog' or create one if there is none, then rename the checklist item 'Walk the dog' to 'Evening walk with dog'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Walk the dog':\n        tap(note_titles[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Walk the dog')\n    tap($checklist_type)\n    tap($add_note_ok)\n# Now rename the checklist item\nlong_tap($checklist_item_list.match('Walk the dog')[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Evening walk with dog')\ntap($rename_ok)"}
{"task": "Ensure that a note titled 'Meeting Notes' exists and then scroll through the list of existing notes to find 'Meeting Notes'.", "solution": "note_titles = $open_note_title_list\nmeeting_notes_exists = False\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Meeting Notes':\n        meeting_notes_exists = True\n        break\nif not meeting_notes_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\n# Scroll through the list to find 'Meeting Notes'\ntap($open_note)\nwhile True:\n    notes = $open_note_title_list\n    for note in notes:\n        if get_text(note) == 'Meeting Notes':\n            tap(note)\n            exit()\n    scroll($open_note_title_list, 'up')"}
{"task": "Open the note titled 'Grocery List' and print the grocery list note.", "solution": "tap($open_note)\ngrocery_list_exists = False\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Grocery List':\n        tap($open_note_title_list[i])\n        grocery_list_exists = True\n        break\nif grocery_list_exists:\n    tap($more_options_note)\n    tap($print_note)"}
{"task": "Open a checklist note if none are currently opened, then move the checklist item 'Read a Book' to the top of the list.", "solution": "if len($checklist_item_list) == 0:\n    # Checklist not open, open a note\n    tap($open_note)\n    tap($open_note_title_list.match({'type': 'checklist'})[0])\n# Now move the checklist item 'Read a Book' to the top of the list\nlong_tap($checklist_item_list.match('Read a Book')[0])\ntap($move_selected_item_to_the_top)"}
{"task": "Open the settings menu and set the font size of the Notes app to 'Large'", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Navigate to the home page of the Notes APP and set the theme color by going to the settings.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings menu and show the current font size of the Notes app", "solution": "tap($settings)\ntap($current_font_size)\n# Assuming get_text() will return the font size\nfont_size = get_text($current_font_size)\nprint(font_size)"}
{"task": "Navigate to the settings page and decrease the font size of the app to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open a checklist note if one is not currently open and then open more options for the current checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif notes:\n    if any('checklist' in get_text(note) for note in notes):\n        note = next(note for note in notes if 'checklist' in get_text(note))\n        tap(note)\n        tap($more_options_checklist)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)"}
{"task": "Open the settings of the app to enable automatic backups", "solution": "tap($settings)\ntap($set_enable_automatic_backups)"}
{"task": "Ensure a note titled 'Meeting Notes' exists and then open the note titled 'Meeting Notes'", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Meeting Notes':\n        tap(notes[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($add_note_ok)"}
{"task": "Open or create a note containing a recipe for pasta, then print the current note.", "solution": "\ntap($open_note)\nnote_found = False\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if 'recipe for pasta' in get_text(notes[i]).lower():\n        tap(notes[i])\n        note_found = True\n        break\nif not note_found:\n    tap($create_note)\n    set_text($add_note_title, 'Recipe for Pasta')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($print_note)"}
{"task": "Access the more options menu for the current note from the home page", "solution": "\ntap($more_options_note)"}
{"task": "Open a note containing the address of the new apartment or create one if it doesn't exist, then delete the note.", "solution": "\ntap($open_note)\nnote_found = False\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if 'address of the new apartment' in get_text(notes[i]).lower():\n        tap(notes[i])\n        note_found = True\n        break\nif not note_found:\n    tap($create_note)\n    set_text($add_note_title, 'Address of the new apartment')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings menu and enable the word count display in the Notes app.", "solution": "tap($settings)\ntap($set_show_word_count)"}
{"task": "Create checklist items, mark some as done, and then remove all done items from the current checklist.", "solution": "\ntap($add_checklist_item)\nset_text($add_checklist_item, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item, 'Item 2')\ntap($add_checklist_item_ok)\ntap($checklist_item)\ntap($remove_done_checklist_items)"}
{"task": "Make sure a note is open and is the current note, then open the more options menu for that note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Navigate to the settings from the home page and set the text color in the Notes APP.", "solution": "tap($settings)\ntap($set_text_color)"}
{"task": "Make sure a checklist is open and is the current checklist, then open the more options menu for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Ensure multiple notes are present, then navigate to the next note", "solution": "if len($open_note_title_list) > 1:\n    tap($switch_to_next_item)"}
{"task": "Open a checklist note with the item 'Finish project report' or create one if there is none, then move the checklist item 'Finish project report' to the bottom.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Checklist')) > 0:\n    tap($open_note_title_list.match('Checklist')[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nif len($checklist_item_list.match('Finish project report')) > 0:\n    long_tap($checklist_item_list.match('Finish project report')[0])\n    tap($move_selected_item_to_the_buttom)\nelse:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Finish project report')\n    tap($add_checklist_item_ok)\n    long_tap($checklist_item_list.match('Finish project report')[0])\n    tap($move_selected_item_to_the_buttom)"}
{"task": "Open a checklist note containing 'Meeting at 3PM' if one is not already opened, then rename the checklist item 'Meeting at 3PM' to 'Team Meeting at 3PM'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Checklist')) > 0:\n    tap($open_note_title_list.match('Checklist')[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nif len($checklist_item_list.match('Meeting at 3PM')) > 0:\n    long_tap($checklist_item_list.match('Meeting at 3PM')[0])\n    tap($rename_selected_checklist_item)\n    set_text($rename_input, 'Team Meeting at 3PM')\n    tap($rename_ok)\nelse:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Meeting at 3PM')\n    tap($add_checklist_item_ok)\n    long_tap($checklist_item_list.match('Meeting at 3PM')[0])\n    tap($rename_selected_checklist_item)\n    set_text($rename_input, 'Team Meeting at 3PM')\n    tap($rename_ok)"}
{"task": "Open a checklist note with the item 'Call mom' or create one if there is none, then rename the checklist item 'Call mom' to 'Call family'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Checklist')) > 0:\n    tap($open_note_title_list.match('Checklist')[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nif len($checklist_item_list.match('Call mom')) > 0:\n    long_tap($checklist_item_list.match('Call mom')[0])\n    tap($rename_selected_checklist_item)\n    set_text($rename_input, 'Call family')\n    tap($rename_ok)\nelse:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Call mom')\n    tap($add_checklist_item_ok)\n    long_tap($checklist_item_list.match('Call mom')[0])\n    tap($rename_selected_checklist_item)\n    set_text($rename_input, 'Call family')\n    tap($rename_ok)"}
{"task": "Open a checklist note containing 'Dentist Appointment' if none are currently opened, then delete the checklist item 'Dentist Appointment'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Checklist')) > 0:\n    tap($open_note_title_list.match('Checklist')[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nif len($checklist_item_list.match('Dentist Appointment')) > 0:\n    long_tap($checklist_item_list.match('Dentist Appointment')[0])\n    tap($delete_selected_checklist_item)\nelse:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Dentist Appointment')\n    tap($add_checklist_item_ok)\n    long_tap($checklist_item_list.match('Dentist Appointment')[0])\n    tap($delete_selected_checklist_item)"}
{"task": "Make sure a note is open and is the current note, then open the more options for the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open settings in the app", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Navigate to the settings page and set the font size of the app to 150%", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Enable setting to show keyboard on startup by navigating to settings from the home page", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Open a checklist note or create one if there is none, then sort the checklist items by title.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'new checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure a checklist is opened, then open more options in the current checklist.", "solution": "tap($more_options_checklist)"}
{"task": "Open a checklist note if none are currently opened, then tap 'more options' button in the current checklist.", "solution": "if 'checklist_screen' not in get_attributes($main_screen)['visible_children']:\n    tap($open_note)\n    for i in range(len($open_note_title_list)):\n        title = get_text($open_note_title_list[i])\n        if 'checklist' in title:\n            tap($open_note_title_list[i])\n            break\ntap($more_options_checklist)\n"}
{"task": "Open a checklist note if none are currently opened, then remove done items from the current checklist via the 'Remove done items' button.", "solution": "if 'checklist_screen' not in get_attributes($main_screen)['visible_children']:\n    tap($open_note)\n    for i in range(len($open_note_title_list)):\n        title = get_text($open_note_title_list[i])\n        if 'checklist' in title:\n            tap($open_note_title_list[i])\n            break\ntap($more_options_checklist)\ntap($remove_done_checklist_items)\n"}
{"task": "Create a note titled 'Workout Plan' if it doesn't exist, then navigate to the note titled 'Workout Plan'", "solution": "note_exists = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Workout Plan':\n        note_exists = True\n        tap($open_note_title_list[i])\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Workout Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Workout Plan':\n        tap($open_note_title_list[i])\n        break\n"}
{"task": "Ensure an item is selected or opened and then tell me the title of the current item shown", "solution": "title = get_text($item_title)\nprint(title)\n"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "def task_0():\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) > 0:\n        tap(notes[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\ntask_0()"}
{"task": "Open an existing note or create a new one if necessary, then replace the content with 'Shopping list'", "solution": "def task_1():\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) > 0:\n        tap(notes[0])\n    else:\n        tap($create_note)\n        tap($text_note_type)\n        tap($add_note_ok)\n    set_text($note_content, 'Shopping list')\n    tap($save_note)\ntask_1()"}
{"task": "Ensure no other note with the title 'Home Maintenance Tasks' exists, then create a new note with the title 'Home Maintenance Tasks'.", "solution": "def task_2():\n    tap($open_note)\n    notes = $open_note_title_list\n    for note in notes:\n        if get_text(note) == 'Home Maintenance Tasks':\n            return\n    tap($create_note)\n    set_text($add_note_title, 'Home Maintenance Tasks')\n    tap($text_note_type)\n    tap($add_note_ok)\ntask_2()"}
{"task": "Ensure the note contains the text 'action items' and then search within the note for the text 'action items'.", "solution": "def task_3():\n    tap($open_note)\n    notes = $open_note_title_list\n    found = False\n    for note in notes:\n        tap(note)\n        content = get_text($note_content)\n        if 'action items' in content:\n            found = True\n            break\n        else:\n            tap($switch_to_next_item)\n    if not found:\n        tap($create_note)\n        set_text($note_content, 'action items')\n        tap($save_note)\n    tap($search_within_note)\n    set_text($search_text, 'action items')\ntask_3()"}
{"task": "Open a checklist note and sort the checklist items by custom order.", "solution": "def task_4():\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) > 0:\n        tap(notes[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($custom_type)\n    tap($sort_checklist_items_ok)\ntask_4()"}
{"task": "Ensure a note is open and then access its more options in the Notes app.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($more_options_note)"}
{"task": "Open settings and adjust the font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"125%\"))"}
{"task": "Open a checklist note and add a new checklist item with the text 'Complete homework'", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($open_note_title_list.match({\"title\": \"checklist note\"}))\ntap($add_checklist_item)\nset_text($add_checklist_item_title, \"Complete homework\")\ntap($add_checklist_item_ok)"}
{"task": "Open the settings of the Notes app", "solution": "tap($settings)"}
{"task": "Ensure an item with the text 'Buy milk' exists in the checklist, then check the checklist item with the text 'Buy milk'.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($open_note_title_list.match({\"title\": \"checklist note\"}))\nif len($checklist_item_list.match(\"Buy milk\")) == 0:\n    raise Exception('Item with text \"Buy milk\" does not exist')\nelse:\n    for item in $checklist_item_list.match(\"Buy milk\"):\n        if not get_attributes(item)[\"checked\"]:\n            tap(item)"}
{"task": "Ensure an item with the text 'Complete homework' exists in the checklist and is checked, then uncheck the checklist item with the text 'Complete homework'.", "solution": "checklist_items = $checklist_item_list\nitem = checklist_items.match('Complete homework')[0]\nif not get_attributes(item)['checked']:\n    tap(item)\ntap(item)"}
{"task": "Open a checklist note or create one if there is none, and then sort the items of the current checklist by date", "solution": "tap($open_note)\ntitles = $open_note_title_list\nif len(titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(titles[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open settings and check the current font size of the app", "solution": "tap($settings)\ntap($current_font_size)\nsize_options = $font_size_types\ncurrent_size = size_options.match({'selected': True})[0]\nsize_text = get_text(current_size)\nback()\nback()\nsize_text"}
{"task": "Ensure a checklist note is open and then open more options for the current checklist in the Notes app", "solution": "tap($switch_to_next_item) if len($checklist_item_list) == 0 else None\ntap($more_options_checklist)"}
{"task": "Change the font size in the Notes app by navigating to settings from the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)\ntap($exit_settings)"}
{"task": "If the current page is not the settings page, open the settings page. Then, exit the settings page.", "solution": "try:\n    tap($settings)\n    tap($exit_settings)\nexcept:\n    print('Already on the settings page')\n    tap($exit_settings)"}
{"task": "Add items to the checklist if none exist, then display all checklist items", "solution": "tap($switch_item)\ntap($checklist_item_list)\nif len($checklist_item_list) == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Item 1')\n    tap($add_checklist_item_ok)\n# Display all checklist items\for item in $checklist_item_list:\n    print(get_text(item))"}
{"task": "Open an existing note or create a new one if necessary, then show the title of the current note", "solution": "try:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n    else:\n        tap($open_note_title_list[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nprint(get_text($item_title))"}
{"task": "Open an existing note or create a new one if there is none, then open more options for the current note", "solution": "try:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n    else:\n        tap($open_note_title_list[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open an existing note or create a new one if there is none, then open the settings of the app from the more options of that note", "solution": "try:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n    else:\n        tap($open_note_title_list[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the settings menu and change the primary color of the Notes APP to orange", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_orange)\ntap($save_set_colors)"}
{"task": "Customize colors and then set the text color in the Notes APP.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\ntap($theme_color_your_choice)\ntap($save_set_colors)"}
{"task": "Open the settings menu and change the app icon color of the Notes APP to navy blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_navy_blue)\ntap($save_set_colors)"}
{"task": "Open the font size settings and adjust the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Turn on the 'Make links and emails clickable' option in the settings.", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Open a note or create one if there is none, then set the theme color of the app to white by opening settings from more options in the current note and then customizing colors.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)\ntap($exit_settings)\n"}
{"task": "Ensure the word 'appointment' appears multiple times in different locations within the current note, then find the next occurrence of the word 'appointment'.", "solution": "set_text($note_content, 'appointment\\nsome text\\nappointment\\nanother appointment\\nmore text\\nappointment')\ntap($search_within_note)\nset_text($search_text, 'appointment')\ntap($next_matchhed_text)\n"}
{"task": "Open more options in the current checklist.", "solution": "tap($more_options_checklist)\n"}
{"task": "Make sure a checklist is open and is the current checklist, then open more options of the current checklist by tapping on the 'more options' button on the main screen.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\n"}
{"task": "Open settings from the more options in the current checklist.", "solution": "tap($more_options_checklist)\ntap($settings)\n"}
{"task": "Open the settings of the Notes APP starting from the home page.", "solution": "tap($more_options_checklist.match('Settings'))"}
{"task": "Ensure a checklist note titled 'Completed Tasks' exists, then delete the checklist 'Completed Tasks'.", "solution": "tap($open_note)\nif any(get_text(t) == 'Completed Tasks' for t in $open_note_title_list):\n    for idx, title in enumerate($open_note_title_list):\n        if get_text(title) == 'Completed Tasks':\n            tap($open_note_title_list[idx])\n            tap($more_options_checklist)\n            tap($delete_note)\n            tap($delete_note_ok)\n"}
{"task": "Open the settings page and set the text color to blue", "solution": "tap($more_options_checklist.match('Settings'))\ntap($set_colors)\ntap($set_text_color)\ntap($theme_color_custom)\ntap($save_set_colors)\n"}
{"task": "Ensure an item with the text 'Buy milk' exists in the checklist and then delete the checklist item with the text 'Buy milk'", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    if get_text($item_title) == ' 'Buy milk'':\n        long_tap($checklist_item_list.match(\"Buy milk\"))\n        tap($delete_selected_checklist_item)\n"}
{"task": "Open a checklist note or create one if it doesn't exist, then go to the next item in the list.", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    if get_text($item_title).lower() == 'checklist':\n        back()\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($switch_to_next_item)\n"}
{"task": "Open a note or create one if there is none, then access note options to open settings", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the font size settings to show the current font size", "solution": "tap($settings)\ntap($set_font_size)\ntap($current_font_size)"}
{"task": "Turn off the 'Make links and emails clickable' option in the settings.", "solution": "tap($settings)\nattributes = get_attributes($set_make_links_and_emails_clickable)\nif attributes.get('checked'):\n    tap($set_make_links_and_emails_clickable)"}
{"task": "Ensure you are on the home page or within a note view, then tap on the 'Search' button.", "solution": "if not get_attributes($note_content).get('selected'):\n    tap($open_note_title[0])\ntap($search_within_note)"}
{"task": "Open a checklist note or create one if there is none, then open settings from checklist options", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings page and set the background color to light yellow", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\ntap($theme_color_custom)\nset_text($theme_color_custom, 'light yellow')\ntap($save_set_colors)"}
{"task": "Open the note 'Journal Entry' and navigate to the app settings.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Journal Entry':\n        tap(note)\n        break\ntap($settings)"}
{"task": "Open a checklist note or create one if it doesn't exist, then switch to the next checklist item.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nchecklist_note_exists = False\nfor note in notes:\n    if 'checklist' in get_text(note).lower():\n        tap(note)\n        checklist_note_exists = True\n        break\nif not checklist_note_exists:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'Checklist Note')\n    tap($add_note_ok)\ntap($switch_to_next_item)"}
{"task": "Open a checklist note and mark all checklist items as checked", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if 'checklist' in get_text(note).lower():\n        tap(note)\n        break\nchecklist_items = $checklist_item_list\nfor item in checklist_items:\n    tap(item)  # Toggle to checked state if not already"}
{"task": "Open an existing note and set the font size to 75%", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if 'note' in get_text(note).lower():\n        tap(note)\n        break\ntap($settings)\ntap($set_font_size)\ntap($font_size_75%)\ntap($close_set_colors)"}
{"task": "Ensure that the word 'meeting' is mentioned in the current note, then search for the word 'meeting' in the same note.", "solution": "if 'meeting' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' meeting')\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Open a note or checklist item if there is none, then show the current item title", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\nprint(get_text($item_title))"}
{"task": "Open a note or checklist item or ensure there is an item open, then switch to the next item.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\ntap($switch_to_next_item)"}
{"task": "Open a checklist note if none are currently opened, then view all items in the checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\nprint(get_text($checklist_item_list))"}
{"task": "Open a checklist note or create one if there is none, then list all checklist items.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\nelse:\n    for i in range(len($open_note_title_list)):\n        if get_text($open_note_title_list[i]) == 'New Checklist':\n            tap($open_note_title_list[i])\n            break\nitems = $checklist_item_list\nfor i in range(len(items)):\n    print(get_text(items[i]))"}
{"task": "Make sure a checklist is open and is the current checklist, then open the more options for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Open the settings menu of the app from the home page", "solution": "tap($settings)"}
{"task": "Navigate to the settings page and set the font size of the app to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "Disable setting to show keyboard on startup by navigating to settings directly from the home page", "solution": "tap($settings)\nif not get_attributes($set_show_keyboard_on_startup)[\"checked\"]:\n    tap($set_show_keyboard_on_startup)"}
{"task": "Open a checklist note or create one if there is none, then sort the checklist items by date created.", "solution": "# Ensure a note or checklist is open\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Create a checklist item titled 'Finish Report' if it doesn't exist, then check the checklist item 'Finish Report'.", "solution": "if len($checklist_item_list) > 0:\n    checklist_items = $checklist_item_list.match({'text': 'Finish Report'})\n    if len(checklist_items) == 0:  # if the item doesn't exist\n        tap($add_checklist_item)\n        set_text($add_checklist_item_title, 'Finish Report')\n        tap($add_checklist_item_ok)\n    else:\n        checklist_item = checklist_items[0]\n        tap(checklist_item)"}
{"task": "Ensure items exist within the opened note or checklist, then scroll to the next item", "solution": "if len($open_note_title_list) > 0 or len($checklist_item_list) > 0:\n    scroll($switch_item, 'down')"}
{"task": "Ensure items exist within the opened note or checklist, then scroll to the previous item", "solution": "if len($open_note_title_list) > 0 or len($checklist_item_list) > 0:\n    scroll($switch_item, 'up')"}
{"task": "Ensure a checklist is opened, then open the 'more options' in the current checklist", "solution": "if len($checklist_item_list) > 0:\n    tap($more_options_checklist)"}
{"task": "Create a checklist item titled 'Walk the Dog', mark it as checked, and then uncheck it.", "solution": "if len($checklist_item_list) > 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Walk the Dog')\n    tap($add_checklist_item_ok)\n    checklist_items = $checklist_item_list.match({'text': 'Walk the Dog'})\n    tap(checklist_items[0])\n    tap(checklist_items[0])"}
{"task": "Ensure a checklist is opened and sort the items in the current checklist by date created", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Create the note titled 'Meeting Agenda' if it doesn't exist, then open the note titled 'Meeting Agenda'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_exists = False\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Meeting Agenda':\n        note_exists = True\n        tap(notes[i])\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Agenda')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len($open_note_title_list)):\n        if get_text($open_note_title_list[i]) == 'Meeting Agenda':\n            tap($open_note_title_list[i])\n            break"}
{"task": "Ensure that a checklist item titled 'Buy Groceries' exists and then delete the checklist item 'Buy Groceries'.", "solution": "buy_groceries_exists = False\nfor item in $checklist_item_list:\n    if get_text(item) == 'Buy Groceries':\n        buy_groceries_exists = True\n        long_tap(item)\n        tap($delete_selected_checklist_item)\n        break\nif not buy_groceries_exists:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Buy Groceries')\n    tap($add_checklist_item_ok)\n    for item in $checklist_item_list:\n        if get_text(item) == 'Buy Groceries':\n            long_tap(item)\n            tap($delete_selected_checklist_item)\n            break"}
{"task": "Close the search box in the current note", "solution": "tap($close_search_box)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else. Then, create a new note titled 'Grocery List'.", "solution": "rename_needed = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Grocery List':\n        long_tap($open_note_title_list[i])\n        rename_needed = True\n        tap($rename_note)\n        new_title = 'Grocery List ' + str(len($open_note_title_list) + 1)\n        set_text($rename_input, new_title)\n        tap($rename_ok)\n        break\ntap($back)\nif not rename_needed:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Grocery List':\n        tap($open_note_title_list[i])\n        break"}
{"task": "Open the settings page and customize the app colors.", "solution": "tap($open_note)\ntap($settings)"}
{"task": "Open an existing note or create a new one if necessary, then go to app settings from the note options", "solution": "\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Open an existing checklist note or create a new one if necessary, then go to app settings from the checklist options.", "solution": "\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "If a note with the title 'Project Ideas' already exists, rename the note title to something else. Then, create a new note with the title 'Project Ideas'.", "solution": "\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Project Ideas':\n        tap($open_note_title_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Project Ideas')\n        tap($rename_ok)\n        break\n\ntap($create_note)\nset_text($add_note_title, 'Project Ideas')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open settings and adjust the font size to 100%", "solution": "\ntap($open_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_100%)\ntap($sort_checklist_items_ok)"}
{"task": "Open or create the note titled 'Birthday Party' and then export it as a file", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Birthday Party':\n        tap(open_note_titles[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Birthday Party')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Create the note titled 'Project Ideas' if it doesn't exist, then open the note titled 'Project Ideas'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Project Ideas':\n        tap(open_note_titles[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Project Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Project Ideas')[0])"}
{"task": "Ensure a checklist is opened, then sort the items in the current checklist by custom criteria.", "solution": "if get_attributes($more_options_checklist)['checked'] == False:\n    for i in range(len($open_note_title_list)):\n        if get_text($open_note_title_list[i]) == 'Checklist Title':\n            tap($open_note_title_list[i])\n            break\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure a note is opened and then tap on 'more options' of the current note", "solution": "if get_attributes($note_content)['checked'] == False:\n    tap($create_note)\n    set_text($add_note_title, 'Note Title')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Create and confirm a new note titled 'Daily Journal'", "solution": "tap($create_note)\nset_text($add_note_title, 'Daily Journal')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Turn on the \"use monospaced font\" option in the settings.", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_use_monospaced_font)"}
{"task": "Turn off the 'use monospaced font' option in the settings of the Notes APP on your smartphone.", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\nattributes = get_attributes($set_use_monospaced_font)\nif attributes['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Tap on the 'Search' button and input the text 'meeting notes' in the search field.", "solution": "tap($search_within_note)\nset_text($search_text, 'meeting notes')"}
{"task": "Tap on 'Customize colors' in the note options to proceed with color customization.", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_colors)"}
{"task": "Open a note or create one if there is none, then search for the term 'project deadline' within the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'project deadline')"}
{"task": "Open a note and add a checklist titled 'Weekend Chores'", "solution": "tap($open_note)\ntap($open_note_title_list.match('Weekend Chores')[0])\nset_text($note_content, 'Weekend Chores')\ntap($save_note)"}
{"task": "Open the color customization window and then close it.", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Ensure that the checklist for project tasks is open, then open more options for the current checklist for project tasks", "solution": "tap($open_note)\ntap($open_note_title_list.match('project tasks')[0])\ntap($more_options_checklist)"}
{"task": "Ensure a note is open and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Create a checklist note titled 'Workout Plan' if it doesn't exist and create a shortcut for it.", "solution": "tap($create_note)\nset_text($add_note_title, 'Workout Plan')\ntap($checklist_type)\ntap($add_note_ok)\ntap($more_options_checklist)\ntap($create_shortcut)"}
{"task": "Open a checklist note or create one if there is none, then tap on 'Settings' from the 'more options' of the current checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Tap on 'Customize colors' in the checklist options and then customize colors from the checklist options.", "solution": "tap($more_options_checklist)\ntap($set_colors)"}
{"task": "Navigate to 'Customize colors' in the settings, tap on 'App icon color', and set the app icon color to red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_types.match('Red'))"}
{"task": "Open a note if none are currently opened, then open more options for the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Tap 'Open Note' from the home page.", "solution": "tap($open_note)"}
{"task": "Ensure that the note about upcoming birthdays is open and then print the current note about upcoming birthdays.", "solution": "if not any('birthdays' in get_text($open_note_title_list[idx]) for idx in range(len($open_note_title_list))):\n    tap($open_note)\nnote_titles = $open_note_title_list.match('birthdays')\nif note_titles:\n    tap(note_titles[0])\nnote_content = get_text($note_content)\nprint(note_content)\n"}
{"task": "Tapping the 'more options' button on the main screen", "solution": "tap($more_options_checklist)\n"}
{"task": "Ensure a checklist is open and export the current checklist as a file.", "solution": "if not get_attributes($checklist_item)['selected']:\n    tap($open_note)\n    checklist_titles = $open_note_title_list.match({'type': 'checklist'})\n    if checklist_titles:\n        tap(checklist_titles[0])\ntap($more_options_checklist)\ntap($export_as_file)\n"}
{"task": "Open a checklist note if one is not currently open, then open 'more options' and tap the 'Sort by' button.", "solution": "if not get_attributes($checklist_item)['selected']:\n    tap($open_note)\n    checklist_titles = $open_note_title_list.match({'type': 'checklist'})\n    if checklist_titles:\n        tap(checklist_titles[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\n"}
{"task": "Open a checklist note if one is not currently open, then tap the 'Title' checkbox to sort items by title.", "solution": "if not get_attributes($checklist_item)['selected']:\n    tap($open_note)\n    checklist_titles = $open_note_title_list.match({'type': 'checklist'})\n    if checklist_titles:\n        tap(checklist_titles[0])\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open the settings page and set the primary color to green", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_types.match('green'))\ntap($save_set_colors)"}
{"task": "Open an existing note or create a new one if necessary, then open the more options menu of the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n\ttap(notes[0])\nelse:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Note')\n\ttap($text_note_type)\n\ttap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open or create a checklist note if it doesn't exist and then open the more options menu of the current checklist", "solution": "tap($open_note)\nexisting_checklists = $open_note_title_list.match('checklist')\nif len(existing_checklists) > 0:\n\ttap(existing_checklists[0])\nelse:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($checklist_type)\n\ttap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the checklist 'House Cleaning Schedule' and then open the app settings from it.", "solution": "tap($open_note)\nchecklists = $open_note_title_list.match('House Cleaning Schedule')\nif len(checklists) > 0:\n\ttap(checklists[0])\nelse:\n\ttap($create_note)\n\tset_text($add_note_title, 'House Cleaning Schedule')\n\ttap($checklist_type)\n\ttap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Ensure a note titled 'Grocery List' exists and open the note.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Grocery List')\nif len(notes) > 0:\n\ttap(notes[0])\nelse:\n\ttap($create_note)\n\tset_text($add_note_title, 'Grocery List')\n\ttap($text_note_type)\n\ttap($add_note_ok)"}
{"task": "If a note with the title 'Travel Itinerary' already exists, rename the note title to something else, then create a new note titled 'Travel Itinerary'.", "solution": "def task_0():\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Travel Itinerary':\n            tap(notes[i])\n            tap($more_options_note)\n            tap($rename_note)\n            set_text($rename_input, 'Travel Itinerary Old')\n            tap($rename_ok)\n            break\n    tap(create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($text_note_type)\n    tap($add_note_ok)\ntask_0()"}
{"task": "Open a note, enter the word 'dinner' at least twice, then search for the word 'dinner' in the current note and go to the next occurrence.", "solution": "def task_1():\n    tap($open_note)\n    tap($open_note_title_list[0])\n    set_text($note_content, get_text($note_content) + ' dinner dinner')\n    tap($save_note)\n    tap($search_within_note)\n    set_text($search_text, 'dinner')\n    tap($next_matchhed_text)\ntask_1()"}
{"task": "Create a note titled 'Shopping List' if it doesn't exist, then open it and add oranges to the list", "solution": "def task_2():\n    exists = False\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Shopping List':\n            exists = True\n            tap(notes[i])\n            break\n    if not exists:\n        tap($create_note)\n        set_text($add_note_title, 'Shopping List')\n        tap($checklist_type)\n        tap($add_note_ok)\n        notes = $open_note_title_list\n        for i in range(len(notes)):\n            if get_text(notes[i]) == 'Shopping List':\n                tap(notes[i])\n                break\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'oranges')\n    tap($add_checklist_item_ok)\ntask_2()"}
{"task": "Create a note titled 'Study Plan' if it doesn't exist, then open the note and summarize the contents.", "solution": "def task_3():\n    exists = False\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Study Plan':\n            exists = True\n            tap(notes[i])\n            break\n    if not exists:\n        tap($create_note)\n        set_text($add_note_title, 'Study Plan')\n        tap($text_note_type)\n        tap($add_note_ok)\n        notes = $open_note_title_list\n        for i in range(len(notes)):\n            if get_text(notes[i]) == 'Study Plan':\n                tap(notes[i])\n                break\n    set_text($note_content, get_text($note_content) + '\\nSummary of contents: ...')\n    tap($save_note)\ntask_3()"}
{"task": "Ensure a note titled 'Project Ideas' exists, and then open the 'Project Ideas' note.", "solution": "def task_4():\n    exists = False\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Project Ideas':\n            exists = True\n            tap(notes[i])\n            break\n    if not exists:\n        tap($create_note)\n        set_text($add_note_title, 'Project Ideas')\n        tap($text_note_type)\n        tap($add_note_ok)\n        notes = $open_note_title_list\n        for i in range(len(notes)):\n            if get_text(notes[i]) == 'Project Ideas':\n                tap(notes[i])\n                break\ntask_4()"}
{"task": "Ensure a note is open and then print the current note", "solution": "if get_attributes($note_content)['scrollable']:\n    print(get_text($note_content))\nelse:\n    tap($open_note)\n    open_notes = $open_note_title_list\n    if len(open_notes) > 0:\n        tap(open_notes[0])\n    print(get_text($note_content))"}
{"task": "Ensure a checklist is open, then print the current checklist.", "solution": "if get_attributes($checklist_item_list)['scrollable']:\n    for item in $checklist_item_list:\n        print(get_text(item))\nelse:\n    tap($switch_item)\n    tap($open_note)\n    open_notes = $open_note_title_list\n    if len(open_notes) > 0:\n        tap(open_notes[0])\n    for item in $checklist_item_list:\n        print(get_text(item))"}
{"task": "Ensure a note is open and then delete the current note.", "solution": "if get_attributes($note_content)['scrollable']:\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\nelse:\n    tap($open_note)\n    open_notes = $open_note_title_list\n    if len(open_notes) > 0:\n        tap(open_notes[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Navigate to the settings page and change the font size.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Open a checklist and tap on the 'more options' button for the current checklist", "solution": "if get_attributes($checklist_item_list)['scrollable']:\n    tap($more_options_checklist)\nelse:\n    tap($open_note)\n    open_notes = $open_note_title_list\n    if len(open_notes) > 0:\n        tap(open_notes[0])\n    tap($more_options_checklist)"}
{"task": "Ensure a note is open, then scroll through the content in the note to review previous entries", "solution": "if len($note_content) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nscroll($note_content, 'up')"}
{"task": "Open a note and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure a note is open and long tap the note content to select text for copying.", "solution": "if len($note_content) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nlong_tap($note_content)"}
{"task": "Starting from the home page, open the more options menu for the current checklist", "solution": "tap($switch_item)\nopen_note_titles = $open_note_title_list\nfor idx, note_title in enumerate(open_note_titles):\n    tap($open_note_title_list[idx])\n    if get_attributes(note_title)['selected']:\n        tap($more_options_checklist)\n        break"}
{"task": "Ensure a checklist with multiple items is opened and scroll to the previous item in the checklist", "solution": "if len($checklist_item_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list.match({'checked': True})[0])\nfor _ in range(len($checklist_item_list)):\n    scroll($checklist_item_list, 'up')"}
{"task": "Tap on 'Theme' in the note options and set the theme to light mode.", "solution": "tap($more_options_note)\ntap($set_theme_color)\ntap($theme_color_types.match('light')[0])"}
{"task": "Open a note (or create one if there is none) and then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings page if the current page is not the settings page. Then, tap on 'Customize colors' in the 'Settings' menu.", "solution": "if len($more_option_note_buttons.match('Settings')) == 0:\n    tap($more_options_note)\n    tap($settings)\ntap($set_colors)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else. Then, create a new note titled 'Grocery List.'", "solution": "tap($open_note)\nfor note in $open_note_title_list:\n    if get_text(note) == 'Grocery List':\n        tap(note)\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Grocery List')\n        tap($rename_ok)\n        break\nelse:\n    back()\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "If the current page is not the settings page, open the settings page and then tap on 'Theme' to set the theme color", "solution": "if get_text($item_title) != 'Settings':\n    tap($more_options_checklist)\n    tap($settings)\ntap($set_theme_color)"}
{"task": "Open a note or create one if there is none, then add a checklist item 'Buy Milk' to the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($switch_item)\nif get_text($item_title) != 'New Note':\n    tap($switch_to_next_item)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy Milk')\ntap($add_checklist_item_ok)"}
{"task": "Open settings directly from the home page of the Notes APP", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Open a note or create one if there is none, then add a checklist item 'Buy Eggs' to the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($switch_item)\nif get_text($item_title) != 'New Note':\n    tap($switch_to_next_item)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy Eggs')\ntap($add_checklist_item_ok)"}
{"task": "Tap on 'Theme' to set the theme color and choose 'Auto light / dark' theme color", "solution": "tap($set_theme_color)\ntap($theme_color_auto_light_dark)"}
{"task": "Open a note if one is not currently open, then open more options for the current note", "solution": "if not get_attributes($note_content)['scrollable']:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note and export it as a file", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open settings from the main screen", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Ensure a checklist is open, then delete the current checklist.", "solution": "if not get_attributes($checklist_item_list)['scrollable']:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open a checklist and export the current checklist as a file", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($export_as_file)"}
{"task": "Navigate to the settings page and display the current font size of the app.", "solution": "tap($settings)\nfont_size_text = get_text($current_font_size)\nback()\nprint(font_size_text)"}
{"task": "Open the settings menu to customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a note if one is not currently open, then tap the 'more options' button on the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) > 0:\n    tap(note_titles[0])\ntap($more_options_note)"}
{"task": "Open the settings menu and set the theme color to custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Open the specific note where the content should be edited and type 'Meeting notes.'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor note in note_titles:\n    if get_text(note) == 'Your Note Title Here':\n        tap(note)\n        break\ntap($note_content)\nset_text($note_content, 'Meeting notes.')"}
{"task": "Go to the app settings", "solution": "tap($settings)"}
{"task": "Open the settings menu and customize the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the note in the Notes app where the cursor needs to be placed at the end and then set the cursor to start at the end of the note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nif not get_attributes($set_place_cursor_to_the_end_of_note)['checked']:\n    tap($set_place_cursor_to_the_end_of_note)"}
{"task": "Ensure a note is open, then press more options in the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings menu and set the theme color to 'Black & White'.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\nif not get_attributes($theme_color_black_white)['checked']:\n    tap($theme_color_black_white)"}
{"task": "Ensure a checklist note is open and press more options in the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then sort the checklist items by custom order.", "solution": "notes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure a note is open and then open the settings for the current note.", "solution": "notes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Create checklist items and mark all checklist items as completed.", "solution": "notes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n# Create checklist items\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\n# Mark all items as completed\nitems = $checklist_item_list\nfor item in items:\n    tap(item)"}
{"task": "Open the settings menu and set the theme color to 'Custom'", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by title.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\n\n# Assuming we are now in the checklist screen\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_by_title)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings menu, then access 'Customize colors', tap on 'Theme', and select 'light' from the theme color types.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\nback()"}
{"task": "Customize the colors of the app by opening settings from the more options in the current checklist.", "solution": "tap($open_note_title_list[0])\n# Assuming we are now in the checklist screen\ntap($more_options_checklist)\ntap($settings)\ntap($set_colors)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by date created.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\n\n# Assuming we are now in the checklist screen\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_by_date_created)\ntap($sort_checklist_items_ok)"}
{"task": "Create a note titled 'Meeting Notes' if it doesn't already exist, then delete the 'Meeting Notes' note.", "solution": "note_titles = [get_text(title) for title in $open_note_title_list]\nif 'Meeting Notes' not in note_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\nnote_index = note_titles.index('Meeting Notes') if 'Meeting Notes' in note_titles else None\nif note_index is not None:\n    tap($open_note_title_list[note_index])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\nelse:\n    tap($open_note_title_list[-1])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Open a checklist and rename it to 'Grocery List'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Ensure a note is open, then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note, lock the current note and confirm", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a checklist, lock it, and confirm", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Ensure a checklist is currently open and then open more options for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Open the note in which the search will be performed and search for the word 'meeting' within the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Ensure a checklist note is open, then open the settings for the current checklist", "solution": "if get_attributes($item_title)['selected']:\n    tap($more_options_checklist)"}
{"task": "Create checklist items, mark some as checked, and then show only unchecked checklist items.", "solution": "if get_attributes($item_title)['selected']:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Item 1')\n    tap($add_checklist_item_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Item 2')\n    tap($add_checklist_item_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Item 3')\n    tap($add_checklist_item_ok)\n    tap($checklist_item_list[1])\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)"}
{"task": "Ensure a note is open and then show the information about the app from the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($about)"}
{"task": "Open the note in which the search will be performed and find the next occurrence of the word 'schedule' in the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'schedule')\ntap($next_matchhed_text)"}
{"task": "Open a checklist and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure a note is open and then delete all text in the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nset_text($note_content, '')"}
{"task": "Create a checklist item titled 'Respond to Emails' if it doesn't exist, then complete the checklist item 'Respond to Emails'", "solution": "open_note()\ntap($open_note_title_list.match({'type': 'checklist'})[0])\ntitles = [get_text(item) for item in $checklist_item_list]\nif 'Respond to Emails' not in titles:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Respond to Emails')\n    tap($add_checklist_item_ok)\nfor idx, item in enumerate($checklist_item_list):\n    if get_text(item) == 'Respond to Emails':\n        tap($checklist_item_list[idx])"}
{"task": "Open or create a checklist note if it doesn't exist, then open more options for the current checklist", "solution": "try:\n    tap($open_note)\n    checklists = $open_note_title_list.match({'type': 'checklist'})\n    if len(checklists) > 0:\n        tap(checklists[0])\n    else:\n        raise Exception('No checklist found')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the app settings starting from the home page", "solution": "tap($switch_item)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open an existing note or create one if there is none, then open more options for the current note.", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'New Note')    tap($text_note_type)    tap($add_note_ok)tap($more_options_note)"}
{"task": "Open a checklist note with at least two items or create one if there is none, then check the content of the second checklist item", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'New Checklist')    tap($checklist_type)    tap($add_note_ok)if len($checklist_item_list) < 2:    tap($add_checklist_item)    set_text($add_checklist_item_title, 'First Item')    tap($add_checklist_item_ok)    tap($add_checklist_item)    set_text($add_checklist_item_title, 'Second Item')    tap($add_checklist_item_ok)get_text($checklist_item_list[1])"}
{"task": "Open a checklist note with at least three items or create one if there is none, then mark the third checklist item as completed.", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'New Checklist')    tap($checklist_type)    tap($add_note_ok)if len($checklist_item_list) < 3:    tap($add_checklist_item)    set_text($add_checklist_item_title, 'First Item')    tap($add_checklist_item_ok)    tap($add_checklist_item)    set_text($add_checklist_item_title, 'Second Item')    tap($add_checklist_item_ok)    tap($add_checklist_item)    set_text($add_checklist_item_title, 'Third Item')    tap($add_checklist_item_ok)tap($checklist_item_list[2])"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'New Note')    tap($text_note_type)    tap($add_note_ok)tap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist.", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'New Checklist')    tap($checklist_type)    tap($add_note_ok)tap($more_options_checklist)"}
{"task": "Open the Settings menu", "solution": "tap($settings)"}
{"task": "Ensure an item in the checklist with the text 'Buy Milk' is selected and then delete the selected checklist item.", "solution": "long_tap($checklist_item_list.match('Buy Milk')[0])\ntap($delete_selected_checklist_item)"}
{"task": "Open a checklist note and add a new item 'Call Doctor' to the checklist.", "solution": "tap($open_note)\ntap($open_note_title_list.match({'type': 'checklist'})[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Call Doctor')\ntap($add_checklist_item_ok)"}
{"task": "Open the settings page and set the app icon color to red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_types.match('red')[0])\ntap($save_set_colors)"}
{"task": "Open settings and change the font size of the app to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('75%')[0])\ntap($font_size_ok)"}
{"task": "Starting from the home page, delete the current note by accessing any note and selecting the delete option.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)\n"}
{"task": "Go to settings from the home page", "solution": "tap($settings)\n"}
{"task": "Ensure a note is open and then add a list of tasks.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Task 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Task 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Task 3')\ntap($add_checklist_item_ok)\n"}
{"task": "Ensure a note is open, then change the font size of the note content to large", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($settings)\ntap($set_font_size)\ntap($font_size_types[7])\nback()\n"}
{"task": "Open settings and enable display save success messages", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'down')\ntap($set_display_save_success_messages)\n"}
{"task": "Open the font size settings and set the font size to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Export all notes.", "solution": "tap($settings)\ntap($export_notes)"}
{"task": "Tap on 'Theme' to set the theme color, then choose 'light' theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)"}
{"task": "Open the font size settings", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Tap 'Create Note' to add a new note and select 'Text Note Type' for the new note.", "solution": "tap($create_note)\ntap($text_note_type)"}
{"task": "Open a checklist note or create one if there is none, then move the checklist item 'Buy Groceries' to the top of the list.", "solution": "\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($switch_to_next_item)\nmatch_items = $checklist_item_list.match({'text': 'Buy Groceries'})\nif len(match_items) > 0:\n    long_tap($checklist_item_list.match({'text': 'Buy Groceries'})[0])\n    tap($move_selected_item_to_the_top)\n"}
{"task": "Open the font size settings and check the current font size of the app.", "solution": "\ntap($settings)\ntap($set_font_size)\nprint(get_text($current_font_size['selected']))\n"}
{"task": "Open the settings of the Notes app from the home page.", "solution": "\ntap($settings)\n"}
{"task": "Open a note or create one if there is none, then lock the current note.", "solution": "\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($switch_to_next_item)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)\n"}
{"task": "Open the settings page if the current page is not the settings page, then set the font size to 175%", "solution": "\ntap($settings)\nif not get_attributes($settings)['selected']:\n    tap($back)\n    tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\n"}
{"task": "Create at least four checklist items and then move the fourth checklist item to the second position.", "solution": "tap($create_note)\nset_text($add_note_title, 'Checklist Note')\ntap($checklist_type)\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 4')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list[3])\ntap($move_selected_item_to_the_top)\nlong_tap($checklist_item_list[1])\ntap($move_selected_item_to_the_buttom)"}
{"task": "Ensure a checklist note is open and then show the information about the app from the current checklist", "solution": "tap($more_options_checklist)\ntap($about)"}
{"task": "Open a checklist note or create one if there is none, then sort checklist items alphabetically.", "solution": "if len($open_note_title_list) == 0:\n\ttap($create_note)\n\tset_text($add_note_title, 'Checklist Note')\n\ttap($checklist_type)\n\ttap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure the checklist has multiple items and then confirm the sort type of the current checklist", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items_ok)"}
{"task": "Open the Notes app and create a new note titled 'Meeting Notes'", "solution": "tap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open settings and disable display save success messages", "solution": "tap($settings)\nset_text($set_display_save_success_messages, False)"}
{"task": "Create the note titled 'Groceries' if it doesn't exist, then open more options of the note named 'Groceries'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('Groceries')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Groceries')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes.match('Groceries')[0])\ntap($more_options_note)"}
{"task": "Open a note (or create one if none exists) and edit the content of the note to say 'Meeting at 10am on Monday'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\nset_text($note_content, 'Meeting at 10am on Monday')\ntap($save_note)"}
{"task": "From the home page, navigate to the settings page to show the current font size setting in the Notes APP on your smartphone.", "solution": "tap($settings)\ntap($current_font_size)"}
{"task": "Ensure a checklist is open and tap the 'Date created' checkbox to sort items by date created in the checklist.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(notes.match({'type': 'checklist'})[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure an item with the text 'Read Book' exists in the checklist, then remove the checklist item 'Read Book'", "solution": "if 'Read Book' in [get_text(item) for item in $checklist_item_list]:\n    long_tap($checklist_item_list.match('Read Book')[0])\n    tap($delete_selected_checklist_item)"}
{"task": "Create at least one checklist item and then check off the first checklist item", "solution": "if len($checklist_item_list) == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'First Item')\n    tap($add_checklist_item_ok)\ntap($checklist_item_list[0])"}
{"task": "Ensure a note is open and then open the more options of the current note", "solution": "if 'note_content' in [elem['description'] for elem in get_attributes()]:\n    tap($more_options_note)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n    tap($more_options_note)"}
{"task": "Open settings and change the font size of the app to 90%.", "solution": "tap($settings)\n    tap($set_font_size)\n    tap($font_size_90%)"}
{"task": "Open settings and set the font size to large in the Notes app settings", "solution": "tap($settings)\n    tap($set_font_size)\n    tap($font_size_150%)"}
{"task": "Verify the checklist contains the item 'Buy Groceries' and then rename it to 'Buy Vegetables'", "solution": "tap($open_note)\nchecklist_items = $open_note_title_list.match('Checklists')\nfor item in checklist_items:\n    title = get_text(item)\n    if title == 'Checklists':\n        tap(item)\n        break\ntap($more_options_checklist)\nchecklist_item_list = $checklist_item_list\nfor item in checklist_item_list:\n    if get_text(item) == 'Buy Groceries':\n        long_tap(item)\n        tap($rename_selected_checklist_item)\n        set_text($rename_input, 'Buy Vegetables')\n        tap($rename_ok)\n        break"}
{"task": "Create a checklist titled 'Weekend Trip' if it doesn't exist, then open more options of the checklist titled 'Weekend Trip'", "solution": "tap($open_note)\ntitles_list = $open_note_title_list\nfor title in titles_list:\n    if get_text(title) == 'Weekend Trip':\n        tap(title)\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Weekend Trip')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for title in titles_list:\n        if get_text(title) == 'Weekend Trip':\n            tap(title)\n            break\ntap($more_options_checklist)"}
{"task": "Go to the app settings from the home page.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Create a checklist item 'Read Book' if it does not exist, and then rename the checklist item 'Read Book' to 'Read Novel'", "solution": "tap($open_note)\nfor title in $open_note_title_list:\n    if get_text(title) == 'Checklists':\n        tap(title)\n        break\nitems = $checklist_item_list\nexists = False\nfor item in items:\n    if get_text(item) == 'Read Book':\n        exists = True\n        break\nif not exists:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Read Book')\n    tap($add_checklist_item_ok)\nfor item in items:\n    if get_text(item) == 'Read Book':\n        long_tap(item)\n        tap($rename_selected_checklist_item)\n        set_text($rename_input, 'Read Novel')\n        tap($rename_ok)\n        break"}
{"task": "Show the current font size directly from the home page", "solution": "tap($settings)\ntap($current_font_size)\nprint(get_text($current_font_size))"}
{"task": "Ensure a checklist note is open, then open the more options of the current checklist.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Enable display save success messages", "solution": "tap($settings)\nset_selected = get_attributes($set_display_save_success_messages)[\"selected\"]\nif not set_selected:\n    tap($set_display_save_success_messages)\nback()"}
{"task": "Create at least three checklist items and uncheck the third item.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"Checklist Note\")\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(open_note_titles[0])\nfor i in range(3):\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, f\"Checklist Item {i+1}\")\n    tap($add_checklist_item_ok)\nchecklist_items = $checklist_item_list\nlong_tap(checklist_items[2])\nget_attributes(checklist_items[2])[\"checked\"] and tap(checklist_items[2])"}
{"task": "Open an existing checklist note or create a new one, then add a new checklist item 'Buy groceries'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"Checklist Note\")\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(open_note_titles[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, \"Buy groceries\")\ntap($add_checklist_item_ok)"}
{"task": "Ensure a checklist note is open, then open the more options menu for the current checklist.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings menu and customize app colors by tapping 'Customize colors'", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings of the Notes APP", "solution": "tap($settings)"}
{"task": "Open a checklist note or create one if there is none, then set the theme color of the app to dark red by opening settings from more options in the current checklist and customizing colors.", "solution": "\ntap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items using custom sorting.", "solution": "\ntap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings from the checklist's more options in the Notes APP.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Set the font size to 300% in the Notes app from the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Open the more options for the current checklist from the home page", "solution": "tap($more_options_checklist)"}
{"task": "Ensure a note titled 'Meeting Notes' exists by creating it if necessary, then open it by tapping 'Open Note'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_exists = any(get_text(note) == 'Meeting Notes' for note in note_titles)\nif not note_exists:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\nfor note in note_titles:\n    if get_text(note) == 'Meeting Notes':\n        tap(note)\n        break"}
{"task": "Create a note titled 'Birthday Plans' if it doesn't exist, then long tap to select the note titled 'Birthday Plans'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_exists = any(get_text(note) == 'Birthday Plans' for note in note_titles)\nif not note_exists:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Birthday Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\nfor note in note_titles:\n    if get_text(note) == 'Birthday Plans':\n        long_tap(note)\n        break"}
{"task": "Open the 'Settings' menu in the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Tap 'Create Note' to add a new note, then add a note title 'Shopping List'.", "solution": "tap($create_note)\nset_text($add_note_title, 'Shopping List')"}
{"task": "Open a checklist note or create one if there is none, then open the file of the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nswitch_to_checklist = any('checklist' in get_text($open_note_title_list[i]).lower() for i in range(len($open_note_title_list)))\nif switch_to_checklist:\n    for i in range(len($open_note_title_list)):\n        if 'checklist' in get_text($open_note_title_list[i]).lower():\n            tap($open_note_title_list[i])\n            break\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Open the settings page if the current page is not the settings page, then set the font size to 200%", "solution": "if not get_attributes($settings)['selected']:\n    tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Tap 'Create Note' to add a new note, then add 'Checklist Type' for the new note.", "solution": "tap($create_note)\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open a note or create one if there is none, then export the current note as a file.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\ntap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the settings of the Notes APP and show the information of the Notes APP", "solution": "tap($more_options_note)\ntap($about)"}
{"task": "Ensure the note 'Ideas' exists, then open it and draft a new section.", "solution": "\nnote_title = 'Ideas'\nfound_note = False\n\ntap($open_note)\n\nopen_notes_list = $open_note_title_list\nfor i in range(len(open_notes_list)):\n    if get_text(open_notes_list[i]) == note_title:\n        tap(open_notes_list[i])\n        found_note = True\n        break\n\nif not found_note:\n    tap($create_note)\n    set_text($add_note_title, note_title)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(open_notes_list)):\n        if get_text(open_notes_list[i]) == note_title:\n            tap(open_notes_list[i])\n            break\n\n# Draft a new section\nset_text($note_content, '\\nNew section: ')"}
{"task": "Create the note 'Dream Journal' if it doesn't exist, then open it and update today's entry.", "solution": "\nnote_title = 'Dream Journal'\n\nentry_text = 'Today's entry: ...'\nfound_note = False\n\ntap($open_note)\n\nopen_notes_list = $open_note_title_list\nfor i in range(len(open_notes_list)):\n    if get_text(open_notes_list[i]) == note_title:\n        tap(open_notes_list[i])\n        found_note = True\n        break\n\nif not found_note:\n    tap($create_note)\n    set_text($add_note_title, note_title)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(open_notes_list)):\n        if get_text(open_notes_list[i]) == note_title:\n            tap(open_notes_list[i])\n            break\n\n# Update today's entry\nset_text($note_content, entry_text)\ntap($save_note)"}
{"task": "Open the settings menu, then tap on the 'Theme' button to change theme colors after tapping on 'Customize colors' and selecting 'custom' from the theme color types.", "solution": "\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\nfor theme in $theme_color_types:\n    if get_text(theme) == 'Custom':\n        tap(theme)\n        break\n"}
{"task": "Create the note 'Project Tasks' if it doesn't exist, retrieve it, and change the deadline of task 3.", "solution": "\nnote_title = 'Project Tasks'\n\nfound_note = False\n\ntap($open_note)\n\nopen_notes_list = $open_note_title_list\nfor i in range(len(open_notes_list)):\n    if get_text(open_notes_list[i]) == note_title:\n        tap(open_notes_list[i])\n        found_note = True\n        break\n\nif not found_note:\n    tap($create_note)\n    set_text($add_note_title, note_title)\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(open_notes_list)):\n        if get_text(open_notes_list[i]) == note_title:\n            tap(open_notes_list[i])\n            break\n\n# Change the deadline of task 3\nlong_tap($checklist_item_list[2]) # Assuming task 3 is the third item in the list\n# Code to update the deadline field if exists or toggle the task."}
{"task": "Open a note and then open the more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure a note is open and then open more options for the current note.", "solution": "\ntap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Navigate to the settings page and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Ensure a note is open, and then navigate to settings from the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Ensure a note is open and is the current note, then search for the phrase 'client feedback' and find the next occurrence in the current note", "solution": "tap($search_within_note)\nset_text($search_text, 'client feedback')\ntap($next_matchhed_text)"}
{"task": "Tap on 'Open Note' from the home page.", "solution": "tap($open_note)"}
{"task": "Add a checklist item titled 'Buy Groceries' if it doesn't already exist, and then rename the checklist item 'Buy Groceries' to 'Purchase Groceries'", "solution": "if 'Buy Groceries' not in [get_text(item) for item in $checklist_item_list]:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Buy Groceries')\n    tap($add_checklist_item_ok)\nitem_index = [i for i, item in enumerate($checklist_item_list) if get_text(item) == 'Buy Groceries'][0]\nlong_tap($checklist_item_list[item_index])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Purchase Groceries')\ntap($rename_ok)"}
{"task": "If the checklist item 'Finish Homework' does not already exist, add it; then delete the checklist item 'Finish Homework'.", "solution": "if 'Finish Homework' not in [get_text(item) for item in $checklist_item_list]:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Finish Homework')\n    tap($add_checklist_item_ok)\nitem_index = [i for i, item in enumerate($checklist_item_list) if get_text(item) == 'Finish Homework'][0]\nlong_tap($checklist_item_list[item_index])\ntap($delete_selected_checklist_item)"}
{"task": "Tap on 'Create Note' button from the home page.", "solution": "tap($create_note)"}
{"task": "If the current page is not the settings page, open the settings page. Then, set the font size to 250%.", "solution": "if len($scroll_settings_page) == 0:\n    tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\ntap($exit_settings)"}
{"task": "Tap 'Create Note' to add a new note and then tap 'OK' to confirm the new note.", "solution": "tap($create_note)\ntap($add_note_ok)"}
{"task": "Export all my notes from the Notes APP", "solution": "if len($scroll_settings_page) == 0:\n    tap($settings)\ntap($export_notes)"}
{"task": "Open a note if none are currently opened, then open more options for the current note.", "solution": "if len($note_content) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings page if the current page is not the settings page, then set the font size to 300%", "solution": "if len($scroll_settings_page) == 0:\n    tap($settings)\ntap($set_font_size)\ntap($font_size_300%)\ntap($exit_settings)"}
{"task": "Open the settings of the Notes app and change the background color to blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Assuming there's a color selector and setting 'blue' color\nset_text($set_background_color, 'blue')\ntap($save_set_colors)\nback()"}
{"task": "If a note with the title 'Grocery List' already exists, rename it; then create a new note with the title 'Grocery List'", "solution": "# Check if a note with the title 'Grocery List' already exists\ntap($open_note)\nopen_note_titles = $open_note_title_list\nexisting_notes = [get_text(note) for note in open_note_titles]\nif 'Grocery List' in existing_notes:\n    idx = existing_notes.index('Grocery List')\n    tap(open_note_titles[idx])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Grocery List')\n    tap($rename_ok)\nback()\n# Create a new note\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)\nback()"}
{"task": "Create a note if no note exists, then open a note.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    back()\nelse:\n    tap(open_note_titles[0])\nback()\ntap($open_note)"}
{"task": "Open the settings of the Notes app and set the theme color to 'dark_red'", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)\nback()"}
{"task": "If a note with the title 'Meeting Agenda' already exists, rename it. Then create a new note with the title 'Meeting Agenda'.", "solution": "# Check if a note with the title 'Meeting Agenda' already exists\ntap($open_note)\nopen_note_titles = $open_note_title_list\nexisting_notes = [get_text(note) for note in open_note_titles]\nif 'Meeting Agenda' in existing_notes:\n    idx = existing_notes.index('Meeting Agenda')\n    tap(open_note_titles[idx])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Meeting Agenda')\n    tap($rename_ok)\nback()\n# Create a new note\ntap($create_note)\nset_text($add_note_title, 'Meeting Agenda')\ntap($text_note_type)\ntap($add_note_ok)\nback()"}
{"task": "Open a note or create one if none exist, then show the word count in the Notes app.", "solution": "if len($open_note_title_list) == 0:\\n    tap($open_note)\\n    tap($create_note)\\n    set_text($add_note_title, 'New Note')\\n    tap($text_note_type)\\n    tap($add_note_ok)\\nelse:\\n    tap($open_note_title[0])\\ntap($note_content)\\ntap($more_options_note)\\nscroll($scroll_settings_page, 'down')\\ntap($set_show_word_count)"}
{"task": "Disable display save success messages directly from the main task without any prerequisite.", "solution": "tap($open_note)\\ntap($more_options_note)\\nscroll($scroll_settings_page, 'down')\\ntap($set_display_save_success_messages)"}
{"task": "Open the app settings", "solution": "tap($settings)"}
{"task": "Open an existing note and then open more options for the current note", "solution": "tap($open_note)\\nif len($open_note_title_list) > 0:\\n    tap($open_note_title[0])\\ntap($more_options_note)"}
{"task": "Create at least five checklist items and then remove the fifth checklist item.", "solution": "tap($open_note)\\nif len($open_note_title_list) > 0:\\n    tap($open_note_title[0])\\ntap($checklist_item_list)\\nfor i in range(5):\\n    tap($add_checklist_item)\\n    set_text($add_checklist_item_title, f'Checklist Item {i+1}')\\n    tap($add_checklist_item_ok)\\nlong_tap($checklist_item[4])\\ntap($delete_selected_checklist_item)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Make sure a note is open and is the current note, then close the search box after looking up 'travel plans' within the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'travel plans')\ntap($search_close)"}
{"task": "Open the notes font size settings.", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Display the current font size.", "solution": "tap($settings)\ntap($current_font_size)\nfor size in $font_size_types:\n    if get_attributes(size)['selected']:\n        print(get_text(size))\n        break"}
{"task": "Open settings from the more options of a note or checklist, then tap on the button 'Customize colors.'", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Ensure a note titled 'Travel Plans' exists and then open the note labeled 'Travel Plans'", "solution": "try:\n    notes = $open_note_title_list\n    if not len(notes.match('Travel Plans')):\n        tap($open_note)\n        if not len($open_note_title_list.match('Travel Plans')):\n            tap($create_note)\n            set_text($add_note_title, 'Travel Plans')\n            tap($add_note_ok)\n            back()\n        else:\n            note = $open_note_title_list.match('Travel Plans')[0]\n            tap(note)\n    else:\n        tap($open_note)\n        travel_plan_note = $open_note_title_list.match('Travel Plans')[0]\n        tap(travel_plan_note)\nexcept Exception as e:\n    pass"}
{"task": "Customize the widget colors in the Notes app, which can be accessed directly from the home page.", "solution": "try:\n    tap($settings)\n    tap($set_widget_colors)\n    # Assuming the desired widget color customizations are pre-set\n    tap($save_set_colors)\n    back()\nexcept Exception as e:\n    pass"}
{"task": "Open the note in which the search will be performed, then locate the previous instance of the term 'deadline' in the current note", "solution": "try:\n    tap($open_note)\n    tap($open_note_title_list[0])\n    tap($search_within_note)\n    set_text($search_text, 'deadline')\n    tap($prev_matched_text)\nexcept Exception as e:\n    pass"}
{"task": "Open a note or create one if there is none, then open more options for the current note.", "solution": "try:\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($add_note_ok)\n        back()\n    tap($open_note_title_list[0])\n    tap($more_options_note)\nexcept Exception as e:\n    pass"}
{"task": "Ensure a note is open, then open more options for the current note", "solution": "try:\n    tap($open_note)\n    tap($open_note_title_list[0])\n    tap($more_options_note)\nexcept Exception as e:\n    pass"}
{"task": "Navigate to the settings page and set the font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('250%')[0])"}
{"task": "Open the settings page and customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)\n# Add more operations if needed"}
{"task": "Navigate to the settings page and customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)\n# Add more operations if needed"}
{"task": "Save my current note", "solution": "tap($save_note)"}
{"task": "Open any note with multiple items, switch back to the previous item, and display its title.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($switch_to_prev_item)\nget_text($item_title)"}
{"task": "Open a checklist note and then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then open the file of the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Open settings and make links and emails clickable in the Notes app", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)\nback()"}
{"task": "Create at least two checklist items and then edit the second checklist item to say 'Finish project report'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list[1])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Finish project report')\ntap($rename_ok)"}
{"task": "Open the Notes app settings from the home page", "solution": "tap($settings)"}
{"task": "Open the settings of the Notes App from the home page.", "solution": "tap($open_note); tap($more_options_note); tap($settings);"}
{"task": "Open a note, make it the current note, and then search for 'important dates' within the current note.", "solution": "tap($open_note); tap($open_note_title_list[0]); tap($search_within_note); set_text($search_text, 'important dates');"}
{"task": "Open the settings by tapping on the 'Settings' button in the more options of the current note.", "solution": "tap($more_options_note); tap($settings);"}
{"task": "If the current page is not the settings page, open the settings page of the Notes APP; then exit the settings page.", "solution": "try:\n    if not get_attributes($scroll_settings_page)['scrollable']:\n        tap($more_options_note)\n        tap($settings)\nexcept Exception as e:\n    back()"}
{"task": "Make sure a note is open and is the current note, then find the next match for 'action items' after performing a search within the current note", "solution": "tap($search_within_note); set_text($search_text, 'action items'); tap($next_matchhed_text);"}
{"task": "Ensure the current note contains the word 'important' and then search for the word 'important' within the note.", "solution": "if 'important' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' important')\ntap($search_within_note)\nset_text($search_text, 'important')"}
{"task": "Open an existing note or create a new one if necessary, then rename the current note to 'Meeting Minutes 10-10-2023'", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Minutes 10-10-2023')\ntap($rename_ok)"}
{"task": "Ensure no other note with the title 'Meeting Agenda' exists, then create a new note with the title 'Meeting Agenda'", "solution": "tap($open_note)\ntitles = [get_text(title) for title in $open_note_title_list]\nif 'Meeting Agenda' not in titles:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Agenda')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Open a checklist note and verify the state of the first checklist item.", "solution": "tap($open_note)\ntap($open_note_title_list[match('checklist')])\nstate = get_attributes($checklist_item_list[0])\nprint('State of first checklist item:', state['checked'])"}
{"task": "Create a note titled 'Travel Itinerary' if it doesn't exist, then create a shortcut for the note 'Travel Itinerary'", "solution": "tap($open_note)\ntitles = [get_text(title) for title in $open_note_title_list]\nif 'Travel Itinerary' not in titles:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[match('Travel Itinerary')])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open an existing note and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there isn't any, then rename it to 'Grocery List'", "solution": "tap($open_note)\nexisting_checklists = $open_note_title_list.match({'type': 'checklist'})\nif len(existing_checklists) > 0:\n    tap(existing_checklists[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'CheckList')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Open an existing note or create a new one if there is none, then open more options in the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a note or create one if there is none, then export the current note as a file", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Go to the app settings from the home page of the Notes APP", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Customize the colors of the Notes App by navigating from the home page to the settings page for color customization.", "solution": "tap($settings)"}
{"task": "Open the settings menu from the more options of the current note by first opening the more options for the current note.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Make sure a note is open and is the current note, then search for 'conference details' in the current note and close the search box afterward.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'conference details')\ntap($close_search_box)"}
{"task": "Open settings, navigate to color customization options, open 'Customize colors,' and set the app icon color to blue by tapping on the 'App icon color' button.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)"}
{"task": "Open the settings page of the Notes App and set the primary color to blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Ensure a checklist exists and is opened, then show more options for the current checklist", "solution": "if not len($checklist_item_list):\n    if not len($open_note_title_list):\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n    else:\n        tap($open_note)\n        checklist_notes = $open_note_title_list.match('New Checklist')\n        if not checklist_notes:\n            tap($create_note)\n            set_text($add_note_title, 'New Checklist')\n            tap($checklist_type)\n            tap($add_note_ok)\n        else:\n            tap(checklist_notes[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then tap on 'more options checklist' and select 'Open file'.", "solution": "if not len($checklist_item_list):\n    if not len($open_note_title_list):\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n    else:\n        tap($open_note)\n        checklist_notes = $open_note_title_list.match('New Checklist')\n        if not checklist_notes:\n            tap($create_note)\n            set_text($add_note_title, 'New Checklist')\n            tap($checklist_type)\n            tap($add_note_ok)\n        else:\n            tap(checklist_notes[0])\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Ensure that a note titled 'Meeting Notes' exists and open the 'Meeting Notes' note.", "solution": "if not len($open_note_title_list.match({'text': 'Meeting Notes'})):\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list.match({'text': 'Meeting Notes'})[0])"}
{"task": "Ensure multiple checklists are present and switch to the next checklist", "solution": "if len($open_note_title_list) < 2:\n    for i in range(2 - len($open_note_title_list)):\n        tap($create_note)\n        set_text($add_note_title, f'New Checklist {i}')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($switch_to_next_item)"}
{"task": "Open a note containing the word 'recipe' or create one if necessary, then search for the word 'recipe' within the current note.", "solution": "note_exists = False\nif len($open_note_title_list):\n    tap($open_note)\n    for note in $open_note_title_list:\n        if 'recipe' in get_text(note).lower():\n            tap(note)\n            note_exists = True\n            break\n    if not note_exists:\n        back()\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Recipe Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'recipe')\ntap($next_matchhed_text)"}
{"task": "Ensure no other note with the title 'Shopping List' exists, then create a new note titled 'Shopping List' with a checklist.", "solution": "from time import sleep\n\n# Ensure no other note with the title 'Shopping List' exists\ntap($open_note)\nnote_titles = $open_note_title_list\nfor note in note_titles:\n    if get_text(note) == 'Shopping List':\n        tap(note)\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        tap($open_note)\n        note_titles = $open_note_title_list\n        continue\n\n# Create a new note titled 'Shopping List' with a checklist\nback()\ntap($create_note)\nset_text($add_note_title, 'Shopping List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Ensure multiple notes are present, then switch to the previous note", "solution": "from time import sleep\n\n# Ensure multiple notes are present\nif len($open_note_title_list) > 1:\n    # Switch to the previous note if there are multiple notes\n    tap($switch_to_prev_item)\nelse:\n    print('Not enough notes present')"}
{"task": "Ensure no other note with the title 'Vacation Packing List' exists, then add a new note and title it 'Vacation Packing List'.", "solution": "from time import sleep\n\n# Ensure no other note with the title 'Vacation Packing List' exists\ntap($open_note)\nnote_titles = $open_note_title_list\nfor note in note_titles:\n    if get_text(note) == 'Vacation Packing List':\n        tap(note)\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        tap($open_note)\n        note_titles = $open_note_title_list\n        continue\n\n# Add a new note and title it 'Vacation Packing List'\nback()\ntap($create_note)\nset_text($add_note_title, 'Vacation Packing List')\ntap($add_note_ok)"}
{"task": "Open an existing note or create one if there is none, then tap on 'more options' for the current note.", "solution": "from time import sleep\n\n# Open an existing note or create one if there is none\ntap($open_note)\nif len($open_note_title_list) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\n\n# Tap on 'more options' for the current note\ntap($more_options_note)"}
{"task": "Open or create a note with the keyword 'travel itinerary' and then search for the keyword 'travel itinerary' within the current note", "solution": "from time import sleep\n\n# Open or create a note with the keyword 'travel itinerary'\ntap($open_note)\nnote_titles = $open_note_title_list\nfound = False\nfor note in note_titles:\n    if 'travel itinerary' in get_text(note):\n        tap(note)\n        found = True\n        break\nif not found:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($text_note_type)\n    tap($add_note_ok)\n\n# Search for the keyword 'travel itinerary' within the current note\ntap($search_within_note)\nset_text($search_text, 'travel itinerary')\ntap($next_matchhed_text)"}
{"task": "Make sure a checklist is open and is the current checklist, then open more options of the checklist and enable line wrap in the settings.", "solution": "if get_attributes($more_options_checklist)[\"selected\"] == false:\n    tap($switch_item)\n    tap($switch_item)\ntap($more_options_checklist)\ntap($settings)\nif not get_attributes($set_enable_line_wrap)[\"checked\"]:\n    tap($set_enable_line_wrap)"}
{"task": "Ensure a note is open and is the current note, then set the alignment in the settings after opening more options of the note", "solution": "if get_attributes($more_options_note)[\"selected\"] == false:\n    tap($switch_item)\n    tap($switch_item)\ntap($more_options_note)\ntap($settings)\ntap($set_alignment)"}
{"task": "Create the note 'Workout Routine' if it doesn't exist, then open more options in the note titled 'Workout Routine.'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nworkout_note_exists = False\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Workout Routine':\n        workout_note_exists = True\n        tap(notes[i])\n        break\nif not workout_note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Workout Routine')\n    tap($text_note_type)\n    tap($add_note_ok)\n tap($more_options_note)"}
{"task": "Open settings, navigate to color customization options, then tap on 'Theme' after opening 'Customize colors' and select 'dark' from the theme color types.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)"}
{"task": "If the current page is not the settings page, open the settings page, then scroll down the settings page of the Notes APP.", "solution": "if get_attributes($scroll_settings_page)[\"scrollable\"] == false:\n    tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Ensure 'Settings' option is available in the 'more options' menu, then tap on 'Settings' from the 'more options' of the current note", "solution": "tap($more_options_note)\nif len($more_option_note_buttons.match('Settings')) > 0:\n    tap($more_option_note_buttons.match('Settings')[0])"}
{"task": "Open a note and then access its more options menu", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a checklist and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list.match({'checked': True})[0])\ntap($more_options_checklist)"}
{"task": "Open the settings page and set the font size of the app to 150%", "solution": "tap($more_options_note)\ntap($more_option_note_buttons.match('Settings')[0])\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Open the settings page and show the current font size of the app.", "solution": "tap($more_options_note)\ntap($more_option_note_buttons.match('Settings')[0])\ntap($current_font_size)\nget_text($current_font_size)"}
{"task": "Navigate to the settings page and open settings to set the show keyboard on startup", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Open the settings menu and change the font size to 50%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Open a note or create one if there is none, then open settings from the more options of the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Make sure a checklist is open and is the current checklist, then open the more options menu of the current checklist.", "solution": "if len($checklist_item_list) > 0:\n    tap($more_options_checklist)\nelse:\n    # Create a new checklist if none exists\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\n    if not get_attributes($checklist_item_list)['selected']:\n        tap($switch_to_next_item)\n    tap($more_options_checklist)"}
{"task": "Uncheck the 'Show word count' option in settings.", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\nattrs = get_attributes($set_show_word_count)\nif attrs[\"checked\"]:\n    tap($set_show_word_count)"}
{"task": "Ensure an item is selected or opened, then determine its title.", "solution": "title = get_text($item_title)"}
{"task": "Open the note titled 'Project Plan' or create one if there is none, then open more options of the note.", "solution": "tap($open_note)\nnote_exists = False\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Project Plan':\n        tap($open_note_title_list[i])\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Project Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then tap on 'more options' for the current checklist.", "solution": "note_or_checklist_exists = False\nfor i in range(len($open_note_title_list)):\n    if 'checklist' in get_text($open_note_title_list[i]).lower():\n        tap($open_note_title_list[i])\n        note_or_checklist_exists = True\n        break\nif not note_or_checklist_exists:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note with the phrase 'birthday reminders' or create one if there is none, then search for the phrase 'birthday reminders' within the current note.", "solution": "tap($open_note)\nnote_exists = False\nfor i in range(len($open_note_title_list)):\n    if 'birthday reminders' in get_text($open_note_title_list[i]).lower():\n        tap($open_note_title_list[i])\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Birthday Reminders')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'birthday reminders')"}
{"task": "Open a note or create one if there is none, then print the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ncontent = get_text($note_content)\nprint(content)"}
{"task": "Open settings to show word count.", "solution": "tap($settings)\ntap($set_show_word_count)\nback()"}
{"task": "Ensure multiple checklists are present and navigate to the previous checklist", "solution": "if len($open_note_title_list) < 2:\n    for i in range(2 - len($open_note_title_list)):\n        tap($create_note)\n        set_text($add_note_title, f'Note {i+len($open_note_title_list)+1}')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($switch_to_prev_item)\n"}
{"task": "Open settings to make links and emails clickable.", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)\nback()"}
{"task": "Open a checklist note or create one if there is none, then lock the current checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    checklist_titles = [get_text(item) for item in $open_note_title_list]\n    for idx, title in enumerate(checklist_titles):\n        if 'Checklist' in title:\n            tap($open_note_title_list[idx])\n            break\ntap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Ensure no other checklist note with the title 'Grocery List' exists, then create a checklist note with the title 'Grocery List'", "solution": "\n# Ensuring no other checklist note with the title 'Grocery List' exists\nopen_note_elements = $open_note_title_list.match('Grocery List')\nif len(open_note_elements) > 0:\n    for element in open_note_elements:\n        tap(element)\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        back()\n\n# Creating a new checklist note titled 'Grocery List'\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($checklist_type)\ntap($add_note_ok)\n"}
{"task": "Open a checklist note and then open the more options in the current checklist", "solution": "\n# Open a checklist note and then open the more options in the current checklist\nopen_note_elements = $open_note_title_list.match({'type': 'checklist'})\nif len(open_note_elements) > 0:\n    tap(open_note_elements[0])\n    tap($more_options_checklist)\n"}
{"task": "Open an existing note or create a new one if necessary, then edit the note to add the text 'Meeting at 3 PM tomorrow' at the beginning.", "solution": "\n# Open an existing note or create a new one if necessary\ntap($open_note)\nexisting_notes = $open_note_title_list.match({'type': 'note'})\nif len(existing_notes) > 0:\n    tap(existing_notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n\n# Edit the note\ntap($note_content)\nnote_text = get_text($note_content)\nset_text($note_content, 'Meeting at 3 PM tomorrow\\n' + note_text)\ntap($save_note)\n"}
{"task": "Open a checklist note and sort the checklist items by title", "solution": "\n# Open a checklist note and sort the checklist items by title\nopen_note_elements = $open_note_title_list.match({'type': 'checklist'})\nif len(open_note_elements) > 0:\n    tap(open_note_elements[0])\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($title_type)\n    tap($sort_checklist_items_ok)\n"}
{"task": "Ensure the note contains the word 'important' and then search for the word 'important' within the current note.", "solution": "\n# Ensure the note contains the word 'important' and then search for the word 'important' within the current note\ntap($open_note)\nopen_note_elements = $open_note_title_list.match({'type': 'note'})\nfound_note = False\nfor note in open_note_elements:\n    tap(note)\n    note_text = get_text($note_content)\n    if 'important' in note_text:\n        found_note = True\n        break\n    else:\n        back()\n\nif not found_note:\n    tap($create_note)\n    set_text($add_note_title, 'Important Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    set_text($note_content, 'This is an important note')\n    tap($save_note)\n\n# Search for the word 'important'\ntap($search_within_note)\nset_text($search_text, 'important')\n"}
{"task": "Ensure a note titled 'Holiday Plans' exists, then locate and open it.", "solution": "\ntry:\n    tap($open_note)\n    notes = $open_note_title_list\n    note_titles = [get_text(note) for note in notes]\n    if 'Holiday Plans' in note_titles:\n        idx = note_titles.index('Holiday Plans')\n        tap(notes[idx])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'Holiday Plans')\n        tap($text_note_type)\n        tap($add_note_ok)\nexcept:\n    raise RuntimeError('Failed to ensure or locate the note titled Holiday Plans')"}
{"task": "Ensure a note is open and then open the file of the current note", "solution": "\ntry:\n    tap($more_options_note)\n    tap($open_file)\nexcept:\n    raise RuntimeError('Failed to open the file of the current note')"}
{"task": "Create the note titled 'Workout Schedule' if it doesn't exist, then review and save it.", "solution": "\ntry:\n    tap($open_note)\n    notes = $open_note_title_list\n    note_titles = [get_text(note) for note in notes]\n    if 'Workout Schedule' in note_titles:\n        idx = note_titles.index('Workout Schedule')\n        tap(notes[idx])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'Workout Schedule')\n        tap($text_note_type)\n        tap($add_note_ok)\nexcept:\n    raise RuntimeError('Failed to create or locate the note titled Workout Schedule')"}
{"task": "Create the note titled 'To-Do List' if it doesn't exist, then access the note 'To-Do List' and add a task to call mom.", "solution": "\ntry:\n    tap($open_note)\n    notes = $open_note_title_list\n    note_titles = [get_text(note) for note in notes]\n    if 'To-Do List' in note_titles:\n        idx = note_titles.index('To-Do List')\n        tap(notes[idx])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'To-Do List')\n        tap($checklist_type)\n        tap($add_note_ok)\n        back()\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Call mom')\n    tap($add_checklist_item_ok)\nexcept:\n    raise RuntimeError('Failed to create, access, or add a task to the note titled To-Do List')"}
{"task": "Ensure a checklist is open, then open the file of the current checklist", "solution": "\ntry:\n    tap($more_options_checklist)\n    tap($open_file)\nexcept:\n    raise RuntimeError('Failed to open the file of the current checklist')"}
{"task": "Check the 'Make links and emails clickable' option in settings.", "solution": "tap($settings)\ncheckbox_status = get_attributes($set_make_links_and_emails_clickable)[\"checked\"]\nif not checkbox_status:\n    tap($set_make_links_and_emails_clickable)"}
{"task": "Open a checklist note or create one if there is none, then search for the checklist item with the text 'Doctor appointment.'", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    note_attributes = get_attributes($add_checklist_item)\n    if note_attributes:\n        tap($search_within_note)\n        set_text($search_text, 'Doctor appointment')\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Doctor appointment')\n    tap($add_checklist_item_ok)\n    tap($search_within_note)\n    set_text($search_text, 'Doctor appointment')"}
{"task": "Ensure the item 'Workout at 5 PM' exists in the checklist, then delete it.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    checklist_items = $checklist_item_list\n    workout_items = checklist_items.match(\"Workout at 5 PM\")\n    if len(workout_items) > 0:\n        long_tap(workout_items[0])\n        tap($delete_selected_checklist_item)"}
{"task": "Ensure a note is open and then search for 'meeting notes' within the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    tap($search_within_note)\n    set_text($search_text, 'meeting notes')\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($search_within_note)\n    set_text($search_text, 'meeting notes')"}
{"task": "Ensure the search box is open, then close the search box in the current note.", "solution": "tap($search_within_note)\nif get_attributes($close_search_box):\n    tap($close_search_box)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings of the Notes app from the home page.", "solution": "tap($settings)"}
{"task": "Open the app settings from the home page", "solution": "tap($settings)"}
{"task": "Open the settings of the Notes APP and customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a checklist note or create one if there is none, then open more options for your current checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Navigate to the settings page and set the theme color of the app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Open a note if one is not currently open, then tap more options in the current note", "solution": "if get_text($item_title) == '':\n    tap($open_note)\nif not get_attributes($open_note_title_list)[\"selected\"]:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note if one is not currently open, then tap settings from more options in the note", "solution": "if get_text($item_title) == '':\n    tap($open_note)\nif not get_attributes($open_note_title_list)[\"selected\"]:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Verify the checklist contains the item 'Complete Homework' and then delete the checklist item 'Complete Homework'", "solution": "if get_text($item_title) == '':\n    tap($open_note)\nif not get_attributes($open_note_title_list)[\"selected\"]:\n    tap($open_note_title_list[0])\nif any(get_text(c) == 'Complete Homework' for c in $checklist_item_list):\n    for i, item in enumerate($checklist_item_list):\n        if get_text(item) == 'Complete Homework':\n            long_tap(item)\n            tap($delete_selected_checklist_item)\n            break"}
{"task": "Verify the checklist contains the item 'Plan Vacation' and rename it to 'Book Flights'.", "solution": "if get_text($item_title) == '':\n    tap($open_note)\nif not get_attributes($open_note_title_list)[\"selected\"]:\n    tap($open_note_title_list[0])\nif any(get_text(c) == 'Plan Vacation' for c in $checklist_item_list):\n    for i, item in enumerate($checklist_item_list):\n        if get_text(item) == 'Plan Vacation':\n            long_tap(item)\n            tap($rename_selected_checklist_item)\n            set_text($rename_input, 'Book Flights')\n            tap($rename_ok)\n            break"}
{"task": "Open a checklist note and sort the checklist items by date created.", "solution": "tap($open_note)\nchecklist_notes = $open_note_title_list.match(\"checklist\")\ntap(checklist_notes[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure no other note with the title 'Project Ideas' exists, then add a new note titled 'Project Ideas' with the text note type.", "solution": "existing_notes = $open_note_title_list\nfor note in existing_notes:\n    if get_text(note) == 'Project Ideas':\n        raise Exception('Note with title Project Ideas already exists')\ntap($create_note)\nset_text($add_note_title, 'Project Ideas')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Ensure the checklist has at least one item, then move the first checklist item to the top of the list.", "solution": "if len($checklist_item_list) == 0:\n    tap($add_checklist_item)\n    tap($add_checklist_item_ok)\nlong_tap($checklist_item_list[0])\ntap($move_selected_item_to_the_top)"}
{"task": "Open settings and set the theme color to light", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)"}
{"task": "Ensure the checklist has multiple items, then move the last checklist item to the top of the list.", "solution": "if len($checklist_item_list) <= 1:\n    for _ in range(2 - len($checklist_item_list)):\n        tap($add_checklist_item)\n        tap($add_checklist_item_ok)\nlong_tap($checklist_item_list[-1])\ntap($move_selected_item_to_the_top)"}
{"task": "Open a checklist note or create one if there is none, then open settings from the more options of the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Untitled Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    note_titles = $open_note_title_list\n    checklist_found = False\n    for i in range(len(note_titles)):\n        note_attributes = get_attributes(note_titles[i])\n        if note_attributes['selected']:\n            tap(note_titles[i])\n            checklist_found = True\n            break\n    if not checklist_found:\n        tap(note_titles[0])\ntap($more_options_checklist)\n"}
{"task": "Open the Notes app, create a new note, and title it 'Daily Journal'", "solution": "tap($create_note)\nset_text($add_note_title, 'Daily Journal')\ntap($text_note_type)\ntap($add_note_ok)\n"}
{"task": "Ensure no other note with the title 'Meeting Notes' exists and then rename the current note to 'Meeting Notes' to avoid naming conflicts.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Meeting Notes':\n        tap(open_notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        tap($rename_input)\n        set_text($rename_input, 'Meeting Notes - Temp')\n        tap($rename_ok)\n        break\ntap(open_notes[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)\n"}
{"task": "Open more options for the current checklist in the Notes APP on your smartphone.", "solution": "tap($more_options_checklist)\n"}
{"task": "Navigate to the settings page and enable the incognito mode of keyboards.", "solution": "tap($settings)\ntap($set_use_incognito_mode_of_keyboards)\nback()\n"}
{"task": "Open the settings page and set the background color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)"}
{"task": "Open settings and set the theme color to auto light/dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)"}
{"task": "Open or create a checklist note if it doesn't exist, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open an existing checklist note or create a new one if necessary, then navigate to settings from the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Ensure the checklist has at least two items, then move the second checklist item to the bottom of the list.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nwhile len($checklist_item_list) < 2:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, f'Item {len($checklist_item_list) + 1}')\n    tap($add_checklist_item_ok)\nlong_tap($checklist_item_list[1])\ntap($move_selected_item_to_the_buttom)"}
{"task": "Open the settings page if the current page is not the settings page, then change the font size to 300%", "solution": "if get_text($item_title) != 'Settings':\n    tap($more_options_note)\n    tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Import notes", "solution": "if get_text($item_title) != 'Settings':\n    tap($more_options_note)\n    tap($settings)\ntap($import_notes)"}
{"task": "Open a note or create one if there is none, and set the app to place the cursor at the end of the note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nif get_text($item_title) != 'Settings':\n    tap($more_options_note)\n    tap($settings)\ntap($set_place_cursor_to_the_end_of_note)\nback()"}
{"task": "Customize the colors of the app and save the customized colors.", "solution": "if get_text($item_title) != 'Settings':\n    tap($more_options_note)\n    tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "If the current page is not the settings page, open the settings page and set the app to show the keyboard on startup.", "solution": "if get_text($item_title) != 'Settings':\n    tap($more_options_note)\n    tap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Make sure a checklist is open and is the current checklist, then set the alignment in the settings after opening more options of the checklist", "solution": "if get_text($item_title) != '' and 'checklist' in get_text($item_title).lower():\n    tap($more_options_checklist)\n    tap($settings)\n    tap($set_alignment)"}
{"task": "Make sure a note is open and is the current note, then open more options in the current note", "solution": "if get_text($item_title) != '' and 'note' in get_text($item_title).lower():\n    tap($more_options_note)"}
{"task": "Open the settings page of the Notes App and set the theme color to White.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Add the text 'meeting notes' to the note and then search for the text 'meeting notes' within the current note.", "solution": "set_text($note_content, 'meeting notes')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'meeting notes')"}
{"task": "Make sure a note is open and is the current note, then open settings from the current note.", "solution": "if get_text($item_title) != '' and 'note' in get_text($item_title).lower():\n    tap($more_options_note)\n    tap($settings)"}
{"task": "Add the word 'deadline' to the note, then find the next occurrence of the word 'deadline' in the current note.", "solution": "set_text($note_content, get_text($note_content) + ' deadline')\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($next_matchhed_text)"}
{"task": "Add the text 'project update' to the note, then search for 'project update' in the notes app and close the search box.", "solution": "set_text($note_content, get_text($note_content) + ' project update')\ntap($search_within_note)\nset_text($search_text, 'project update')\ntap($close_search_box)"}
{"task": "Search for the keyword 'invoice' within the current note.", "solution": "tap($search_within_note)\nset_text($search_text, 'invoice')"}
{"task": "Open an existing note or create one if there is none, then open the more options menu in the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings menu and scroll down the settings page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open settings and change the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Ensure there are completed items in the checklist, then move the completed checklist item to the top of the list.", "solution": "while not any(get_attributes($checklist_item_list[x])['checked'] for x in range(len($checklist_item_list))):\n    tap($checklist_item_list[0])\ntap($checklist_item_list.match({'checked': True})[0])\nlong_tap($checklist_item_list.match({'checked': True})[0])\ntap($move_selected_item_to_the_top)"}
{"task": "Open the settings page and set the primary color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($save_set_colors)"}
{"task": "Ensure the note contains the word 'meeting' and then search for the word 'meeting' within the current note.", "solution": "if 'meeting' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' meeting')\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Ensure there are pending items in the checklist, then move the pending checklist item to the bottom of the list.", "solution": "while all(get_attributes($checklist_item_list[x])['checked'] for x in range(len($checklist_item_list))):\n    tap($add_checklist_item)\nif len($checklist_item_list.match({'checked': False})) > 0:\n    long_tap($checklist_item_list.match({'checked': False})[0])\n    tap($move_selected_item_to_the_buttom)"}
{"task": "Search for the term 'budget' within the current note and navigate to the next matching text.", "solution": "tap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Set the theme color of the Notes APP to white by opening settings from more options in the current checklist and then customizing colors.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Open the settings menu and scroll up in the settings page", "solution": "tap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'up')"}
{"task": "Set the font size of the Notes APP to 125%.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text':'125%'})[0])"}
{"task": "Open the settings menu and customize the colors of the app", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_colors)"}
{"task": "Open an existing note or create a new one, then access more options for the current note in the Notes app", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($save_note)\ntap($more_options_note)"}
{"task": "Open an existing note or create a new one if there is none, then open settings from the more options in the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($save_note)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open an existing note and change the font size to 50%", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_50%)\ntap($sort_checklist_items_ok)"}
{"task": "Customize the colors of the app by opening the settings page from the more options menu of the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open or create a checklist note in the Notes app if it doesn't exist, then open more options for the current checklist.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    note_found = False\n    for i in range(len($open_note_title_list)):\n        tap($open_note_title_list[i])\n        if 'checklist' in get_attributes($note_content):\n            note_found = True\n            break\n    if not note_found:\n        back()\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a checklist note if one is not currently open, then tap more options in the current checklist", "solution": "if get_attributes($checklist_item_list).get('checked', False) == False:\n    tap($open_note)\n    checklists = $open_note_title_list.match('checklist')\n    if len(checklists) > 0:\n        tap(checklists[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note if one is not currently open, then tap settings from more options in the checklist.", "solution": "if get_attributes($checklist_item_list).get('checked', False) == False:\n    tap($open_note)\n    checklists = $open_note_title_list.match('checklist')\n    if len(checklists) > 0:\n        tap(checklists[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open a checklist and sort its items by title", "solution": "if get_attributes($checklist_item_list).get('checked', False) == False:\n    tap($open_note)\n    checklists = $open_note_title_list.match('checklist')\n    if len(checklists) > 0:\n        tap(checklists[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Verify the checklist contains the item 'Morning Run' and delete it if it exists.", "solution": "if get_attributes($checklist_item_list).get('checked', False) == False:\n    tap($open_note)\n    checklists = $open_note_title_list.match('checklist')\n    if len(checklists) > 0:\n        tap(checklists[0])\nmatched_items = $checklist_item_list.match('Morning Run')\nif len(matched_items) > 0:\n    long_tap(matched_items[0])\n    tap($delete_selected_checklist_item)"}
{"task": "Open a note if one is not currently open, then open more options for the current note", "solution": "if get_attributes($note_content).get('checked', False) == False:\n    tap($open_note)\n    notes = $open_note_title_list.match('note')\n    if len(notes) > 0:\n        tap(notes[0])\ntap($more_options_note)"}
{"task": "Customize the colors of the app and then close the color customization popup.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)\ntap($close_set_colors)"}
{"task": "Open a note or create one if there is none, then lock the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings page if the current page is not the settings page, then check the current font size of the app", "solution": "tap($settings)\nresult = get_text($current_font_size)\nprint(result)"}
{"task": "Open a checklist note or create one if there is none, then lock the current checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings page in the Notes app", "solution": "tap($settings)"}
{"task": "Open a note or create one if there is none, then delete the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open a note if none are currently opened, then switch to the next note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($switch_to_next_item)"}
{"task": "Open a checklist note or create one if there is none, then show all checklist items in the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match('checklist')[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then delete the checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match('checklist')[0])\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Create a note titled 'Meeting Notes' if it doesn't already exist, then open the note titled 'Meeting Notes'", "solution": "if len($open_note_title_list.match('Meeting Notes')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match('Meeting Notes')[0])"}
{"task": "Set the app icon color of the Notes App to green.", "solution": "\ntap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_colors)\ntap($set_app_icon_color)\n# Assuming 'green' is available as an option in the colors list\ncolors = $theme_color_types.match(\"green\")\nif len(colors) > 0:\n    tap(colors[0])\ntap($save_set_colors)\n"}
{"task": "Ensure the checklist item titled 'Call Mom' exists, and then rename it to 'Contact Mother'", "solution": "\ntap($open_note) # Open the list of all notes\n# Check if 'Call Mom' checklist item exists\nitems = $checklist_item_list.match(\"Call Mom\")\nif len(items) > 0: \n    long_tap(items[0]) # Long tap 'Call Mom' to edit\n    tap($rename_selected_checklist_item) # Tap 'Rename' option\n    set_text($rename_input, \"Contact Mother\") # Set new name\n    tap($rename_ok) # Confirm rename\n"}
{"task": "Open a checklist note or create one if there is none, then add a new checklist item with the text 'Buy milk'", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0: # If no notes exist\n    tap($create_note) # Create new checklist\n    set_text($add_note_title, 'New Checklist') # Set title for new note\n    tap($checklist_type) # Select checklist type\n    tap($add_note_ok) # Confirm creation\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0]) # Open the first note available\n# Now add checklist item\nlong_tap($checklist_item_list[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, \"Buy milk\")\ntap($add_checklist_item_ok)\n"}
{"task": "Open a note if none are currently opened, then open more options for the current note.", "solution": "\nnotes = $open_note_title_list\nif len(notes) == 0:\n    # No notes are currently opened\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) == 0:\n        # If no notes exist, create one\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n    else:\n        tap(notes[0]) # Open the first note available\n# Now open more options for the current note\ntap($more_options_note)\n"}
{"task": "Add a checklist item titled 'Workout at 5 PM' if it doesn't already exist, then delete the checklist item 'Workout at 5 PM'", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0: # If no notes exist\n    tap($create_note) # Create new checklist\n    set_text($add_note_title, 'New Checklist') # Set title for new note\n    tap($checklist_type) # Select checklist type\n    tap($add_note_ok) # Confirm creation\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0]) # Open the first note available\nitems = $checklist_item_list.match(\"Workout at 5 PM\")\nif len(items) == 0: \n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, \"Workout at 5 PM\")\n    tap($add_checklist_item_ok)\nitems = $checklist_item_list.match(\"Workout at 5 PM\")\nif len(items) > 0:\n    long_tap(items[0])\n    tap($delete_selected_checklist_item)\n"}
{"task": "Open the settings of the app and navigate to the font size settings.", "solution": "tap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'up')\ntap($set_font_size)"}
{"task": "Ensure there is no existing note with the title 'Groceries List', and then add a new note with the title 'Groceries List'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Groceries List':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Groceries List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Ensure there is no existing note with the title 'Daily Journal', then create a new text note titled 'Daily Journal'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Daily Journal':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Daily Journal')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the font size settings and change the font size to 50%.", "solution": "tap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'up')\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Ensure a note is opened, then tap the 'more options' button for the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Change the font size to 250% via the current font size option.", "solution": "tap($settings)\ntap($current_font_size)\ntap($font_size_types.match('250%')[0])"}
{"task": "Change the font size to 300% via the font size option.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('300%')[0])"}
{"task": "Navigate to the settings page and disable the incognito mode of keyboards.", "solution": "tap($settings)\nchecked = get_attributes($set_use_incognito_mode_of_keyboards)['checked']\nif checked:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "Ensure a note with the new name exists and confirm the new name of the current note.", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'new_name')\ntap($rename_ok)\n# Ensure the note with the new name exists by saving and confirming the new name\ntap($save_note)\ncurrent_title = get_text($item_title)\nassert current_title == 'new_name'"}
{"task": "Open the settings menu and check the current font size of the Notes APP", "solution": "tap($settings)\ntap($current_font_size)\nchecked_size = [size for size in $font_size_types if get_attributes(size)['checked']][0]\ncurrent_font_size = get_text(checked_size)\nback()"}
{"task": "Open a checklist and sort items of the current checklist by date created.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure a checklist is open, then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings page and check the current font size", "solution": "tap($settings)\ntap($current_font_size)\nget_text($current_font_size)"}
{"task": "Open a checklist and sort items of the current checklist by custom order", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a note and then open the more options in the current note", "solution": "tap($open_note)\ntap($open_note_title_list[1])\ntap($more_options_note)"}
{"task": "Delete any note starting from the home page by selecting it and then choosing the delete option.", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nif len(notes_list) > 0:\n  tap(notes_list[0])\n  tap($more_options_note)\n  tap($delete_note)\n  tap($delete_note_ok)"}
{"task": "Navigate to the checklist section from the home page and rename the current checklist item to 'Groceries'.", "solution": "tap($open_note)\nswitch_to_checklist = [$open_note_title for title in $open_note_title_list if 'checklist' in get_text(title).lower()]\nif len(switch_to_checklist) > 0:\n  tap(switch_to_checklist[0])\n  long_tap($checklist_item_list[0])\n  tap($rename_selected_checklist_item)\n  set_text($rename_input, 'Groceries')\n  tap($rename_ok)"}
{"task": "Ensure a note is open and then export the current note as a file", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nif len(notes_list) > 0:\n  tap(notes_list[0])\n  tap($more_options_note)\n  tap($export_as_file)"}
{"task": "Starting from the home page, open more options for the current checklist", "solution": "tap($open_note)\nswitch_to_checklist = [$open_note_title for title in $open_note_title_list if 'checklist' in get_text(title).lower()]\nif len(switch_to_checklist) > 0:\n  tap(switch_to_checklist[0])\n  tap($more_options_checklist)"}
{"task": "From the home page, lock the current checklist item", "solution": "tap($open_note)\nswitch_to_checklist = [$open_note_title for title in $open_note_title_list if 'checklist' in get_text(title).lower()]\nif len(switch_to_checklist) > 0:\n  tap(switch_to_checklist[0])\n  long_tap($checklist_item_list[0])\n  tap($lock_note)\n  tap($lock_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then export the current checklist as a file.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($export_as_file)\n"}
{"task": "Open an existing note and change the font size to 60%", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_60%)\nback()"}
{"task": "Open a checklist note and switch to the next checklist item", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($switch_to_next_item)"}
{"task": "Open the settings page from the more options menu in the current note, then customize colors to set the theme color of the app to dark red.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Open a note or create one if there is none, then print the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "Ensure a checklist note is open, then open more options for the current checklist", "solution": "if get_attributes($checklist_item_list).get('selected', False):\n    tap($more_options_checklist)\nelse:\n    tap($open_note)\n    checklists = $open_note_title_list.match({'type': 'checklist'})\n    tap(checklists[0])\n    tap($more_options_checklist)"}
{"task": "Navigate to the settings page and enable line wrap.", "solution": "tap($more_options_note)\ntap($settings)\nif not get_attributes($set_enable_line_wrap).get('checked', False):\n    tap($set_enable_line_wrap)"}
{"task": "Ensure a note is open and then open the file of the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list.match({'type': 'note'})\ntap(notes[0])\ntap($save_note)\ntap($open_file)"}
{"task": "Make sure a note is open and is the current note, then open more options in the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match({'type': 'note'})\ntap(notes[0])\ntap($more_options_note)"}
{"task": "Navigate to the settings page and disable line wrap.", "solution": "tap($more_options_note)\ntap($settings)\nif get_attributes($set_enable_line_wrap).get('checked', False):\n    tap($set_enable_line_wrap)"}
{"task": "If a note with the title 'Grocery List' already exists, rename it to something else. Then, rename the current note to 'Grocery List'.", "solution": "tap($open_note)\ntitles = $open_note_title_list\nfor i in range(len(titles)):\n    if get_text(titles[i]) == 'Grocery List':\n        long_tap(titles[i])\n        tap($rename_note)\n        set_text($rename_input, 'Renamed Note')\n        tap($rename_ok)\n        break\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)\n"}
{"task": "Open the settings menu from the home page", "solution": "tap($more_options_note)\ntap($settings)\n"}
{"task": "Ensure a note with the title 'Project Ideas' exists and create a shortcut for it", "solution": "tap($open_note)\ntitles = $open_note_title_list\nexists = False\nfor i in range(len(titles)):\n    if get_text(titles[i]) == 'Project Ideas':\n        exists = True\n        tap(titles[i])\n        break\nif not exists:\n    tap($create_note)\n    set_text($add_note_title, 'Project Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)\n"}
{"task": "Open a checklist note if one is not currently open, then open more options for the current checklist.", "solution": "tap($open_note)\ntitles = $open_note_title_list\nchecklist_exists = False\nfor i in range(len(titles)):\n    title_text = get_text(titles[i])\n    tap(titles[i])\n    if len($checklist_item_list) > 0:\n        checklist_exists = True\n        break\ntap($open_note_title_list.match({'selected': True})[0])\nif not checklist_exists:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\n"}
{"task": "Change the theme to light mode from the home page.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)\nback()\n"}
{"task": "Open an existing note or create a new one if there is none, then open the more options menu in the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure the note contains multiple occurrences of the word 'deadline' and then find the next occurrence of 'deadline' in the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nset_text($note_content, 'Here is a deadline. Another deadline is here.')\nget_text($note_content)\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($next_matchhed_text)"}
{"task": "Open an existing note or create a new one if there is none, then delete the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Ensure the note contains multiple instances of the word 'attachment', then locate the previous instance of 'attachment' in the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nset_text($note_content, 'Attachment here. Another attachment over here.')\nget_text($note_content)\ntap($search_within_note)\nset_text($search_text, 'attachment')\ntap($prev_matched_text)"}
{"task": "Open an existing note or create a new one if there is none, then confirm the deletion of the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Ensure there is more than one note in the application, then switch to the previous note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Sample Note')\n    tap($add_note_ok)\nelse:\n    if len($open_note_title_list) == 1:\n        tap($create_note)\n        set_text($add_note_title, 'Another Note')\n        tap($add_note_ok)\ntap($switch_to_prev_item)"}
{"task": "Open an existing note or create a new one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Sample Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open or create a checklist note to ensure it exists, then print the current checklist", "solution": "if len($open_note_title_list.match('checklist_type')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list.match('checklist_type')[0])\ntap($more_options_checklist)\ntap($print_note)"}
{"task": "Open the settings of the app and set the theme of the app to dark", "solution": "tap($settings)\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_dark)\n    tap($save_set_colors)"}
{"task": "Open the settings of the Notes app from the home page.", "solution": "tap($settings)"}
{"task": "Open the search box, search for 'budget', and then close the search box after finding 'budget' in the current note.", "solution": "tap($search_within_note)\nset_text($search_text, 'budget')\ntap($close_search_box)"}
{"task": "Ensure no other note with the title 'Recipe for Chocolate Cake' exists, then create a new note titled 'Recipe for Chocolate Cake'", "solution": "tap($open_note)\nall_notes = $open_note_title_list\nfor note in all_notes:\n    if get_text(note) == 'Recipe for Chocolate Cake':\n        print('Note with title Recipe for Chocolate Cake already exists')\n        break\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Recipe for Chocolate Cake')\n    tap($add_note_ok)"}
{"task": "Open the settings in the Notes app from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Create at least three checklist items and then move the third checklist item to the bottom of the list.", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list[2])\ntap($move_selected_item_to_the_buttom)"}
{"task": "Ensure the note contains the word 'deadline' and search within the current note for the word 'deadline'", "solution": "note_text = get_text($note_content)\nif 'deadline' in note_text:\n    tap($search_within_note)\n    set_text($search_text, 'deadline')"}
{"task": "Ensure a note is open, then export the current note as a file", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Make sure a checklist is open and is the current checklist, then open more options in the current checklist.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open more options for the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Tap on 'Customize colors' in the 'Settings' menu to set your desired colors, then change the theme to 'light'.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)"}
{"task": "Ensure a checklist note is open, then open the file of the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list.match({\"checked\": false})[0])\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Create at least four checklist items and then move the fourth checklist item to the top of the list.", "solution": "tap($create_note)\nset_text($add_note_title, 'My Checklist')\ntap($checklist_type)\ntap($add_note_ok)\nfor i in range(4):\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, f'Checklist Item {i+1}')\n    tap($add_checklist_item_ok)\nchecklist_items = $checklist_item_list\nlong_tap(checklist_items[3])\ntap($move_selected_item_to_the_top)\n"}
{"task": "Create a high priority checklist item and move it to the top of the list", "solution": "tap($create_note)\nset_text($add_note_title, 'Tasks')\ntap($checklist_type)\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'High Priority Task')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\n"}
{"task": "Ensure a note titled 'Shopping List' exists, then open the note called 'Shopping List'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(nt) == 'Shopping List' for nt in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)\nfor nt in note_titles:\n    if get_text(nt) == 'Shopping List':\n        tap(nt)\n        break\n"}
{"task": "Create a checklist item marked as low priority and move it to the bottom of the list", "solution": "tap($create_note)\nset_text($add_note_title, 'Tasks')\ntap($checklist_type)\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Low Priority Task')\ntap($add_checklist_item_ok)\nchecklist_items = $checklist_item_list\nlong_tap(checklist_items[-1])\ntap($move_selected_item_to_the_buttom)\n"}
{"task": "Ensure no other note with the title 'Weekend Getaway Plans' exists, then create a new note for 'Weekend Getaway Plans'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(nt) == 'Weekend Getaway Plans' for nt in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Weekend Getaway Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\n"}
{"task": "Open the 'Settings' menu and customize the app's colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure a checklist note is open and then export it as a file", "solution": "tap($open_note)\n# Ensure a checklist note is open by selecting the checklist type\nnotes = $open_note_title_list\nfor note in notes:\n    tap(note)\n    if get_attributes($more_options_checklist):\n        break\nback()\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Ensure the current note contains the word 'shopping', and then search for the word 'shopping' within the note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    tap(note)\n    if 'shopping' in get_text($note_content):\n        break\nback()\ntap($search_within_note)\nset_text($search_text, 'shopping')"}
{"task": "Open the settings of the app from the home page", "solution": "tap($settings)"}
{"task": "Ensure a note is open, then open the more options menu for the current note", "solution": "tap($open_note)\n# Ensure a note is open by checking the content\nnotes = $open_note_title_list\nfor note in notes:\n    tap(note)\n    if get_text($note_content):\n        break\nback()\ntap($more_options_note)"}
{"task": "Open the more options menu of the current note.", "solution": "tap($more_options_note)"}
{"task": "Make sure a note is open and is the current note, then search for the keyword 'meeting' within the current note.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes) > 0:\n    tap(open_notes[0])\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Access the Settings of the Notes APP from the home page.", "solution": "tap($settings)"}
{"task": "Open the settings of the Notes app from the home page.", "solution": "tap($settings)"}
{"task": "Customize the colors of the Notes app by accessing the settings page directly from the home page.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open more options for the current checklist in the Notes app.", "solution": "tap($more_options_checklist)"}
{"task": "Open the 'more options' menu.", "solution": "tap($more_options_checklist)"}
{"task": "Make sure a note is open and is the current note, then open more options of the current note by tapping on the 'more options' button.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Add text mentioning 'meeting' multiple times in different locations in the current note if it is not already present, then find the previous occurrence of the word 'meeting' within the current note.", "solution": "tap($note_content)\nif 'meeting' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' meeting' * 5)\ntap($search_within_note)\nset_text($search_text, 'meeting')\ntap($prev_matched_text)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match({'selected': False})[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_ok)"}
{"task": "Open the Notes APP on your smartphone and delete the current checklist item.", "solution": "long_tap($checklist_item)\ntap($delete_selected_checklist_item)"}
{"task": "Ensure a checklist item titled 'Buy groceries' exists, then delete the checklist item titled 'Buy groceries'.", "solution": "items = $checklist_item_list\nfor i in range(len(items)):\n    if get_text(items[i]) == 'Buy groceries':\n        long_tap(items[i])\n        tap($delete_selected_checklist_item)\n        break"}
{"task": "From the home page, show me the list of all checklist items.", "solution": "[get_text(item) for item in $checklist_item_list]"}
{"task": "Ensure a note is open and print the current note.", "solution": "tap($more_options_note)\ntap($print_note)"}
{"task": "Create the note titled 'Meeting Notes' if it doesn't exist, then open the note titled 'Meeting Notes'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Meeting Notes':\n        tap(notes[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    if not get_attributes($text_note_type)['selected']:\n        tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Meeting Notes':\n            tap(notes[i])\n            break"}
{"task": "Starting from the home page, set the font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)\nback()"}
{"task": "Start from the home page of the Notes APP on a smartphone, and set the font size to 150%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\nback()"}
{"task": "Navigate to the settings page and then go back from the settings page.", "solution": "tap($settings)\nback()"}
{"task": "Open a text note or create one if there is none, then open more options of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Start from the home page and open the settings of the Notes app", "solution": "tap($settings)"}
{"task": "Open settings from the more options of a note or checklist, then set the font size of the Notes APP to 150%.", "solution": "\ntap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_150%)\n"}
{"task": "Open an existing note or create one if there is none, then tap on 'more options' in the note.", "solution": "\ntap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\n"}
{"task": "Open a checklist note or create one if there is none, then use the switch item scrollbar to switch to the next checklist.", "solution": "\ntap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    for i in range(len($open_note_title_list)):\n        tap($open_note_title_list[i])\n        if get_attributes($checklist_item_list):\n            break\ntap($switch_to_next_item)\n"}
{"task": "Open a checklist note or create one if there is none, then tap on 'more options' in the checklist.", "solution": "\ntap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    for i in range(len($open_note_title_list)):\n        tap($open_note_title_list[i])\n        if get_attributes($checklist_item_list):\n            break\ntap($more_options_checklist)\n"}
{"task": "Make sure a note is open and is the current note, then search for the keyword 'shopping list' within the current note.", "solution": "\ntap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'shopping list')\n"}
{"task": "Create a checklist item 'Clean Room' if it does not exist, then delete the checklist item 'Clean Room'", "solution": "if len($checklist_item_list.match('Clean Room')) == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Clean Room')\n    tap($add_checklist_item_ok)\nlong_tap($checklist_item_list.match('Clean Room')[0])\ntap($delete_selected_checklist_item)"}
{"task": "Open a note if one is not currently open, then open the more options menu for the current note.", "solution": "if len($note_content) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings page in the Notes app from the home page", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nback()\nif len(open_notes) > 0:\n    tap($more_options_note)\nelse:\n    tap($more_options_checklist)\ntap($settings)"}
{"task": "If a checklist with the title 'Morning Routine' already exists, rename it to something else, then rename the current checklist to 'Morning Routine'.", "solution": "if len($open_note_title_list.match('Morning Routine')) > 0:\n    long_tap($open_note_title_list.match('Morning Routine')[0])\n    set_text($rename_input, 'Old Routine')\n    tap($rename_ok)\nlong_tap($item_title)\nset_text($rename_input, 'Morning Routine')\ntap($rename_ok)"}
{"task": "Open the settings page and set the option to show note picker on startup", "solution": "tap($more_options_note)\ntap($settings)\nattributes = get_attributes($set_show_a_note_picker_on_startup)\nif not attributes['checked']:\n    tap($set_show_a_note_picker_on_startup)"}
{"task": "Open a checklist note if none are currently opened, then open more options for the current checklist.", "solution": "\nif not $checklist_item_list:\n    tap($open_note)\n    open_notes = $open_note_title_list.match({'title': 'Checklist'})\n    if open_notes:\n        tap(open_notes[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\n"}
{"task": "Open settings from a checklist note by first creating a checklist note or opening an existing one.", "solution": "\nif not $checklist_item_list:\n    tap($open_note)\n    open_notes = $open_note_title_list.match({'title': 'Checklist'})\n    if open_notes:\n        tap(open_notes[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\n"}
{"task": "Open a checklist note or create one if there is none, and then rename the checklist item 'Finish Report' to 'Complete Report.'", "solution": "\nif not $checklist_item_list:\n    tap($open_note)\n    open_notes = $open_note_title_list.match({'title': 'Checklist'})\n    if open_notes:\n        tap(open_notes[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\nchecklist_items = $checklist_item_list.match({'content': 'Finish Report'})\nif checklist_items:\n    long_tap(checklist_items[0])\n    tap($rename_selected_checklist_item)\n    set_text($rename_input, 'Complete Report')\n    tap($rename_ok)\n"}
{"task": "Create a note titled 'Project Plan' if it doesn't already exist, then open the note titled 'Project Plan'.", "solution": "\nexisting_notes = $open_note_title_list.match({'title': 'Project Plan'})\nif not existing_notes:\n    tap($create_note)\n    set_text($add_note_title, 'Project Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\nout = $open_note_title_list.match({'title': 'Project Plan'})\ntap(out[0])\n"}
{"task": "Open the font size settings in the Notes app and change the font size to 90%", "solution": "\ntap($settings)\ntap($set_font_size)\ntap($font_size_90%)\ntap($save_set_colors)\n"}
{"task": "Tap on the more options icon and select the share option to share the current checklist.", "solution": "tap($more_options_checklist)\ntap($more_options_checklist_buttons.match('share')[0])"}
{"task": "Open an existing note or create one if there is none. Then tap on 'more options note' and select 'Lock note.'", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($more_options_note_buttons.match('lock note')[0])"}
{"task": "Open the settings menu to customize the colors in the Notes APP.", "solution": "tap($settings)"}
{"task": "Open a checklist note or create one if there is none, then tap on 'more options checklist' and select 'Lock note.'", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list.match({'selected': true})[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($lock_note)"}
{"task": "Open an existing note or create one if there is none, then tap on 'more options note' and select 'Open file'.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($more_options_note_buttons.match('open file')[0])"}
{"task": "If you are not already on the settings page, open the settings page in the Notes app. Then, exit the settings page.", "solution": "tap($settings)\nback()"}
{"task": "Open a checklist note if one is not currently open, then open the more options menu for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a note if one is not currently open, then show information about the app from the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($about)"}
{"task": "Open a note in the Notes app if one is not currently open, then open the more options menu for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure the note contains the text 'meeting agenda' and then search within the current note for that text.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nnote_text = get_text($note_content)\nif 'meeting agenda' not in note_text:\n    set_text($note_content, note_text + ' meeting agenda')\ntap($search_within_note)\nset_text($search_text, 'meeting agenda')"}
{"task": "Open a note or create one if there is none, then use the switch item scrollbar to move to the previous note.", "solution": "if len($open_note_title_list) == 0:\n\ttap($create_note)\n\ttap($add_note_ok)\nelse:\n\ttap($open_note_title_list[0])\nscroll($switch_item, 'up')"}
{"task": "Tap on more options to delete the current checklist.", "solution": "tap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings menu and change the text color of the Notes APP to purple", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\ntap($theme_color_custom)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Enable line wrap in the settings after opening more options in the note.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_enable_line_wrap)"}
{"task": "Tap on 'Customize colors' in the 'Settings' menu to customize the colors of the Notes APP.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Go to the Settings menu in the Notes app", "solution": "tap($settings)"}
{"task": "If a checklist note is not currently open, open one, then open the more options menu for the current checklist in the Notes app.", "solution": "if 'current_note_type' in globals() and current_note_type == 'checklist':\n    tap($more_options_checklist)\nelse:\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        if 'checklist' in get_text(notes[i]).lower():\n            tap(notes[i])\n            break\n    tap($more_options_checklist)"}
{"task": "Ensure a note is open, then open more options for the current note", "solution": "if 'current_note_type' not in globals():\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        if 'note' in get_text(notes[i]).lower():\n            tap(notes[i])\n            break\ntap($more_options_note)"}
{"task": "Open the Notes app, navigate to the settings page, and scroll down the settings page", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Ensure a checklist is open, then open more options for the current checklist", "solution": "if 'current_note_type' in globals() and current_note_type == 'checklist':\n    tap($more_options_checklist)\nelse:\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        if 'checklist' in get_text(notes[i]).lower():\n            tap(notes[i])\n            break\n    tap($more_options_checklist)"}
{"task": "Ensure a checklist is open and print the current checklist", "solution": "if 'checklist' not in get_text($item_title).lower():\n    tap($open_note)\n    for item in $open_note_title_list:\n        if 'checklist' in get_text(item).lower():\n            tap(item)\n            break\nprint(get_text($item_title))"}
{"task": "Save the current note starting from the home page", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note):  # Open the first available note\n        tap(note)\n        break\ntap($save_note)"}
{"task": "Open the settings page and enable autosave notes", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'down')\nautosave_checkbox = [checkbox for checkbox in $scroll_settings_page if 'autosave' in get_text(checkbox).lower()][0]\nif not get_attributes(autosave_checkbox)[\"checked\"]:\n    tap(autosave_checkbox)"}
{"task": "Create the note titled 'Vacation Plans' if it doesn't exist and then open it", "solution": "note_exists = False\ntap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Vacation Plans':\n        tap(note)\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Vacation Plans')\n    tap($text_note_type)  # assumes the default new note is a text note type\n    tap($add_note_ok)"}
{"task": "Open the settings page and disable autosave notes.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'down')\nautosave_checkbox = [checkbox for checkbox in $scroll_settings_page if 'autosave' in get_text(checkbox).lower()][0]\nif get_attributes(autosave_checkbox)[\"checked\"]:\n    tap(autosave_checkbox)"}
{"task": "Starting from the home page, navigate directly to the settings and scroll the settings page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open a checklist note and then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "From the home page, open the existing note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])"}
{"task": "Open a checklist note or create one if there is none, then check the 'Use monospaced font' checkbox after tapping 'Settings' from 'more options' in the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)\ntap($set_use_monospaced_font)\nback()"}
{"task": "Open the settings of the app and set the theme of the app to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open the more options for the current note from the home page", "solution": "tap($more_options_note)"}
{"task": "Ensure a note is open, then open more options for the current note", "solution": "\nif not get_attributes($checklist_item_list)['scrollable']:\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    if len(open_note_titles) > 0:\n        tap(open_note_titles[0])\ntap($more_options_note)\n"}
{"task": "Open the settings of the app from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Ensure a checklist is open and show information about the app from the current checklist", "solution": "\nif not get_attributes($checklist_item_list)['scrollable']:\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    if len(open_note_titles) > 0:\n        tap(open_note_titles[0])\ntap($more_options_checklist)\ntap($about)\n"}
{"task": "Open the settings of the app and set the font size to 50%", "solution": "\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_50%)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open a text note or create one if there is none, then tap 'Settings' from 'more options' in the current note and uncheck the 'Show word count' checkbox.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\nif get_attributes($set_show_word_count)['checked']:\n    tap($set_show_word_count)\nback()"}
{"task": "Open the settings of the app and set the theme of the app to white", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\nif not get_attributes($theme_color_white)['selected']:\n    tap($theme_color_white)\ntap($save_set_colors)\nback()"}
{"task": "Open a checklist note or create one if there is none, then open the more options for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then tap 'Settings' from 'more options' and uncheck the 'Show word count' checkbox.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)\nif get_attributes($set_show_word_count)['checked']:\n    tap($set_show_word_count)\nback()"}
{"task": "Open a text note or create one if there is none, then tap 'Settings' from 'more options' in the current note and uncheck the 'Make links and emails clickable' checkbox.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\nif get_attributes($set_make_links_and_emails_clickable)['checked']:\n    tap($set_make_links_and_emails_clickable)\nback()"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "notes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap(notes[0])\ntap($more_options_note)"}
{"task": "Open the settings of the app and show the current font size", "solution": "tap($more_options_note)\ntap($settings)\ntap($current_font_size)\ncurrent_font_size = get_text($font_size_types)\nprint(current_font_size)"}
{"task": "Open a checklist note or create one if there is none, then tap 'Settings' from 'more options' and uncheck the 'Make links and emails clickable' checkbox", "solution": "checklists = $open_note_title_list\nif len(checklists) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap(checklists[0])\ntap($more_options_note)\ntap($settings)\nif get_attributes($set_make_links_and_emails_clickable)['checked']:\n    tap($set_make_links_and_emails_clickable)\n"}
{"task": "Open a note and choose text note type from the home page", "solution": "tap($create_note)\nset_text($add_note_title, 'New Text Note')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open a note or create one if there is none, then set the cursor to be placed at the end of the note", "solution": "notes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap(notes[0])\ntap($more_options_note)\ntap($settings)\nif not get_attributes($set_place_cursor_to_the_end_of_note)['checked']:\n    tap($set_place_cursor_to_the_end_of_note)\n"}
{"task": "Open the font size settings and change the font size to 150%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\ntap($sort_checklist_items_ok)"}
{"task": "Open a note or create one if there is none, then open the file of the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open a checklist note if none are currently opened, then open the app settings from the more options of the current checklist.", "solution": "current_title = get_text($item_title)\nif 'checklist' not in current_title.lower():\n    tap($open_note)\n    notes = $open_note_title_list\n    for note in notes:\n        if 'checklist' in get_text(note).lower():\n            tap(note)\n            break\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open a note and edit the content to add 'Meeting agenda for tomorrow'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\nset_text($note_content, 'Meeting agenda for tomorrow')\ntap($save_note)"}
{"task": "Open the settings of the Notes APP to customize the app colors.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else, then create a new checklist note and title it 'Grocery List'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Grocery List')) > 0:\n    tap($open_note_title_list.match('Grocery List')[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Grocery List')\n    tap($rename_ok)\n    back()\n    back()\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open the settings of the app and enable keyboard to show on startup", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_show_keyboard_on_startup)['checked']:\n    tap($set_show_keyboard_on_startup)"}
{"task": "Open the settings of the app and enable showing a note picker on startup", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_show_a_note_picker_on_startup)['checked']:\n    tap($set_show_a_note_picker_on_startup)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list.match({'selected': false})) > 0:\n    tap($open_note_title_list.match({'selected': false})[0])\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    back()\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then open the settings of the app from the more options", "solution": "tap($open_note)\nif len($open_note_title_list.match({'selected': false})) > 0:\n    tap($open_note_title_list.match({'selected': false})[0])\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    back()\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open a note or create one if there is none, then add a new paragraph stating 'Project update'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type.match({'selected': false}))\n    tap($add_note_ok)\nelse:\n    tap(note_titles[0])\nset_text($note_content, get_text($note_content) + '\\n\\nProject update')\ntap($save_note)"}
{"task": "Go to settings from the note options.", "solution": "tap($more_options_note)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type.match({'selected': false}))\n    tap($add_note_ok)\nelse:\n    tap(note_titles[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type.match({'selected': false}))\n    tap($add_note_ok)\nelse:\n    tap(note_titles[0])\ntap($more_options_checklist)"}
{"task": "Go to settings from the checklist options.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type.match({'selected': false}))\n    tap($add_note_ok)\nelse:\n    tap(note_titles[0])\ntap($more_options_checklist)"}
{"task": "Customize the app colors from settings accessed from the home page.", "solution": "tap($settings)\ntap($set_colors)\n# Customize the colors as required\ntap($save_set_colors)\nback()"}
{"task": "Open the settings menu and change background color of the Notes APP to grey", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Assuming 'grey' is an option to select from, the script would depend on how grey color is represented in the options, adjusting this accordingly\n# Example, if grey is at the first position:\ntap($theme_color_types[0])\ntap($save_set_colors)\nback()"}
{"task": "Open the app settings", "solution": "tap($settings)"}
{"task": "Customize the colors and then set the background color in the Notes APP on your smartphone.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Assuming 'grey' is an option to select from, the script would depend on how grey color is represented in the options, adjusting this accordingly\n# Example, if grey is at the first position:\ntap($theme_color_types[0])\ntap($save_set_colors)\nback()"}
{"task": "Open the settings page if the current page is not the settings page, then change the font size to 250%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\nback()"}
{"task": "Create a checklist item marked as urgent and move it to the top of the list", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Urgent')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list[-1])\ntap($move_selected_item_to_the_top)"}
{"task": "Ensure the note contains multiple occurrences of the word 'project' and then find the next occurrence of the word 'project' in the current note.", "solution": "set($note_content, 'Project description and project deadline are important for this project.')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'project')\ntap($next_matchhed_text)"}
{"task": "Open a checklist note and then open the sort options for checklist items.", "solution": "tap($open_note)\ntap($open_note_title_list.match({'type': 'checklist'}))\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Ensure a note titled 'Study Schedule' exists and open it", "solution": "tap($create_note)\nset_text($add_note_title, 'Study Schedule')\ntap($text_note_type)\ntap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match('Study Schedule'))"}
{"task": "Ensure the note contains multiple instances of the word 'client', then scroll to the previous occurrence of the word 'client' in the current note.", "solution": "set_text($note_content, 'Client meeting notes. Client requirements. Client feedback.')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'client')\ntap($prev_matched_text)"}
{"task": "Open the settings page and increase the font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)"}
{"task": "Open the settings page and increase the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Read the current item title", "solution": "title = get_text($item_title)\nprint(title)"}
{"task": "Ensure that a note titled 'Meeting Agenda' exists and then open it.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('Meeting Agenda')) > 0:\n    tap(notes.match('Meeting Agenda')[0])"}
{"task": "Open the settings page and view the current font size of the app", "solution": "tap($settings)\ntap($current_font_size)\nfont_sizes = $font_size_types\nfor i in range(len(font_sizes)):\n    if get_attributes(font_sizes[i])[\"selected\"]:\n        print(get_text(font_sizes[i]))"}
{"task": "Ensure a note is open and search within the current note for the text 'deadline'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'deadline')"}
{"task": "Open settings of the app and set the theme color to Black & White.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)\nback()"}
{"task": "Ensure '2023 Q4 goals' text exists in the note and scroll to the previous matching text for '2023 Q4 goals' within the current note", "solution": "tap($search_within_note)\nset_text($search_text, '2023 Q4 goals')\ntap($prev_matched_text)"}
{"task": "Ensure a note or checklist is open and then tap the 'more options' button", "solution": "tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open settings of the app and set the theme color to Custom.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings page and enable the option to show keyboard on startup.", "solution": "tap($settings)\nif not get_attributes($set_show_keyboard_on_startup)[\"checked\"]:\n    tap($set_show_keyboard_on_startup)"}
{"task": "Navigate to the settings page in the Notes app and adjust the font size settings.", "solution": "tap($settings)\ntap($set_font_size)\ndirection_options = ['50%', '60%', '75%', '90%', '100%', '125%', '150%', '175%', '200%', '250%', '300%']\nfor option in direction_options:\n    tap($font_size_types.match(option))"}
{"task": "Open the settings page and disable the option to show keyboard on startup.", "solution": "tap($settings)\nif get_attributes($set_show_keyboard_on_startup)[\"checked\"]:\n    tap($set_show_keyboard_on_startup)"}
{"task": "Open the settings page and set the app alignment to right", "solution": "tap($settings)\ntap($set_alignment)\ntap($alignment_types.match('right'))"}
{"task": "Open the search box, then close the search box in the current note", "solution": "tap($search_within_note)\ntap($close_search_box)"}
{"task": "Navigate to the settings page and show the current font size of the app in the Notes app", "solution": "tap($settings)\nfont_sizes = $font_size_types\nfor font_size in font_sizes:\n    attributes = get_attributes(font_size)\n    if attributes['selected']:\n        current_font_size = get_text(font_size)\n        break\ncurrent_font_size"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note to something else. Then, create a new note titled 'Grocery List'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_exists = False\nfor i in range(len(note_titles)):\n    if get_text($open_note_title_list[i]) == 'Grocery List':\n        note_exists = True\n        tap($open_note_title_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Grocery List')\n        tap($rename_ok)\n        back()\n        break\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the Notes app and create a text note", "solution": "tap($create_note)\nset_text($add_note_title, 'Untitled Text Note')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the Notes app, navigate to the settings page, and scroll up.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'up')"}
{"task": "Ensure a checklist titled 'Shopping List' exists, then open the shopping list checklist", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_exists = False\nfor i in range(len(note_titles)):\n    if get_text($open_note_title_list[i]) == 'Shopping List':\n        note_exists = True\n        tap($open_note_title_list[i])\n        break\nif not note_exists:\n    tap($create_note)\nset_text($add_note_title, 'Shopping List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open a text note or create one if there is none, then open the more options menu for the current note", "solution": "if len($open_note_title_list) == 0: tap($create_note)\ntap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then tap on more options to view the current checklist options", "solution": "if len($open_note_title_list) == 0: \n tap($create_note) \n tap($checklist_type)\n tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match({'type': 'checklist'})[0])\ntap($more_options_checklist)"}
{"task": "Open any existing note or create a new note, then enable Incognito mode for keyboards in notes.", "solution": "if len($open_note_title_list) == 0: tap($create_note) \n tap($text_note_type)\n tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list[0])\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_incognito_mode_of_keyboards)\nback()"}
{"task": "Ensure there are at least two notes available, then use the switch item scrollbar to move to the next note", "solution": "if len($open_note_title_list) < 2:\n tap($create_note) \n tap($text_note_type)\n tap($add_note_ok)\n tap($create_note)\n tap($text_note_type)\n tap($add_note_ok) \n tap($switch_item)\nscroll($switch_item, 'down')"}
{"task": "Open any existing note or create a new note and disable Incognito mode for keyboards in that note.", "solution": "if len($open_note_title_list) == 0: tap($create_note) \n tap($text_note_type)\n tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list[0])\ntap($settings)\nscroll($scroll_settings_page, 'down')\nif get_attributes($set_use_incognito_mode_of_keyboards)['checked']: tap($set_use_incognito_mode_of_keyboards)\nback()"}
{"task": "Ensure there are at least two checklist notes available, then use the switch item scrollbar to move to the previous checklist.", "solution": "if len($open_note_title_list) < 2:\n    tap($open_note)\n    if len($open_note_title_list) < 2:\n        tap($create_note)\n        set_text($add_note_title, 'Checklist 1')\n        tap($checklist_type)\n        tap($add_note_ok)\n        tap($create_note)\n        set_text($add_note_title, 'Checklist 2')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($switch_item); scroll($switch_item, 'up')"}
{"task": "Open a checklist note or create one if there is none, then tap on more options to customize the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note) \n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure an item with the text 'Buy milk' exists in the checklist and is selected, then move the selected item 'Buy milk' to the bottom of the checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nif 'Buy milk' not in [get_text(item) for item in $checklist_item_list]:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Buy milk')\n    tap($add_checklist_item_ok)\nlong_tap($checklist_item_list.match('Buy milk')[0])\ntap($move_selected_item_to_the_buttom)"}
{"task": "Open any existing note or create a new note, and then enable line wrap in the note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\nwhile not get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)\nback()"}
{"task": "Open any existing note or create a new note, then disable line wrap in the note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\nwhile get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)\nback()"}
{"task": "Open an existing note or create a new one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Ensure an item with the text 'Buy eggs' exists in the checklist, select it, and rename it to 'Buy organic eggs'.", "solution": "if len($checklist_item_list) > 0:\n    found = False\n    for i in range(len($checklist_item_list)):\n        if get_text($checklist_item_list[i]) == 'Buy eggs':\n            long_tap($checklist_item_list[i])\n            tap($rename_selected_checklist_item)\n            set_text($rename_input, 'Buy organic eggs')\n            tap($rename_ok)\n            found = True\n            break\n    if not found:\n        tap($add_checklist_item)\n        set_text($add_checklist_item_title, 'Buy eggs')\n        tap($add_checklist_item_ok)\n        long_tap($checklist_item_list.match('Buy eggs')[0])\n        tap($rename_selected_checklist_item)\n        set_text($rename_input, 'Buy organic eggs')\n        tap($rename_ok)"}
{"task": "Open any existing note or create a new note, then open more options in the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open an existing note or create a new one if there is none, then open settings from note's more options", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Check if a note with the title 'Grocery List' already exists. If it does, rename it to something else. Then rename the current note to 'Grocery List'.", "solution": "existing_notes = $open_note_title_list\nrename_needed = False\nif len(existing_notes) > 0:\n    for i in range(len(existing_notes)):\n        if get_text(existing_notes[i]) == 'Grocery List':\n            long_tap(existing_notes[i])\n            tap($rename_selected_checklist_item)\n            set_text($rename_input, 'Temporary Title')\n            tap($rename_ok)\n            rename_needed = True\n            tap(existing_notes[i])\n            break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Tap on the 'App icon color' button to set the app icon color in the settings.", "solution": "tap($set_app_icon_color)"}
{"task": "Open the settings page and set the font size of the app to 18 points.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('125%')[0])"}
{"task": "Open any existing checklist or create a new checklist note, then tap on the 'more options' button to open more options for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open any existing checklist or create a new checklist note, then open more options in the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note or create one if there is none, then save the note with the current content.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($save_note)"}
{"task": "Adjust the font size to 200% directly from the settings or relevant menu in the Notes APP.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Adjust the font size to 300% directly from the settings or relevant menu.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Ensure the word 'meeting' is present in the note, then search within the current note for the word 'meeting'.", "solution": "set_text($note_content, 'meeting')\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Navigate to settings from the home page and enable the use of monospaced font", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Open settings in the notes app from the home page.", "solution": "tap($settings)"}
{"task": "Open the settings page and enable use monospaced font", "solution": "tap($settings)\nattributes = get_attributes($set_use_monospaced_font)\nif not attributes['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Ensure an item with the text 'Call the doctor' exists in the checklist and is selected, then delete the selected checklist item 'Call the doctor'", "solution": "checklist_items = $checklist_item_list\nitem_exists = False\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Call the doctor':\n        item_exists = True\n        tap(checklist_items[i])\n        long_tap(checklist_items[i])\n        tap($delete_selected_checklist_item)\n        break\nif not item_exists:\n    raise Exception('Item not found in the checklist')"}
{"task": "Open the settings page and enable Use Incognito mode of keyboards", "solution": "tap($settings)\nattributes = get_attributes($set_use_incognito_mode_of_keyboards)\nif not attributes['checked']:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "Ensure a note titled 'Grocery List' exists and then open it", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Grocery List':\n        tap(note_titles[i])\n        break\nelse:\n    raise Exception('Note titled Grocery List not found')"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    for i in range(len(note_titles)):\n        tap(note_titles[i])\n        if len($checklist_item_list) > 0:\n            break\ntap($more_options_checklist)"}
{"task": "If a note with the title 'Shopping List' already exists, rename it to something else, then rename the current note to 'Shopping List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Shopping List':\n        tap(note)\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Shopping List Renamed')\n        tap($rename_ok)\n        break\ncurrent_note_title = get_text($item_title)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Shopping List')\ntap($rename_ok)\nrename_current_note = current_note_title == get_text($item_title) == 'Shopping List'\nif not rename_current_note: back() # Return if renaming failed\n"}
{"task": "Ensure a checklist is opened, then access more options in the current checklist.", "solution": "if get_text($item_title) != 'Checklist':\n    # Switch to the next item if the current one is not a checklist\n    while get_text($item_title) != 'Checklist':\n        tap($switch_to_next_item)\ntap($more_options_checklist)"}
{"task": "Open the settings of the app and set the font size to 60%", "solution": "tap($settings)\n# Scroll the settings page down until the 'Font size' button is visible\nwhile True:\n    try:\n        tap($set_font_size)\n        break\n    except: # Element not visible yet\n        scroll($scroll_settings_page, 'down')\n# Select the desired font size and confirm\nfont_sizes = $font_size_types\nfor size in font_sizes:\n    if get_text(size) == '60%':\n        tap(size)\n        tap($sort_checklist_items_ok)\n        break"}
{"task": "If a checklist with the title 'To-Do List' already exists, rename it to something else. Then, rename the current checklist to 'To-Do List'.", "solution": "tap($open_note)\nchecklists = $open_note_title_list\nfor checklist in checklists:\n    if get_text(checklist) == 'To-Do List':\n        tap(checklist)\n        tap($more_options_checklist)\n        tap($rename_note)\n        set_text($rename_input, 'To-Do List Renamed')\n        tap($rename_ok)\n        break\n# Rename the current item\ncurrent_item_title = get_text($item_title)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'To-Do List')\ntap($rename_ok)\nrename_current_item = current_item_title == get_text($item_title) == 'To-Do List'\nif not rename_current_item: back() # Return if renaming failed\n"}
{"task": "Ensure items exist within the opened note or checklist, then switch to the previous item", "solution": "swipe($switch_item, 'up')"}
{"task": "Ensure a note titled 'Meeting Notes' exists and then open it", "solution": "tap($open_note); open_note_titles = $open_note_title_list; if len(open_note_titles.match('Meeting Notes')) == 0: tap($create_note); set_text($add_note_title, 'Meeting Notes'); tap($add_note_ok); back(); tap($open_note); open_note_titles = $open_note_title_list; tap(open_note_titles.match('Meeting Notes')[0]); else: tap(open_note_titles.match('Meeting Notes')[0]);"}
{"task": "Open the settings page and enable 'Show a note picker on startup'", "solution": "tap($settings); if not get_attributes($set_show_a_note_picker_on_startup)['selected']: tap($set_show_a_note_picker_on_startup);"}
{"task": "Ensure an item with the text 'Read a book' exists in the checklist, then move the checklist item 'Read a book' to the bottom.", "solution": "items = $checklist_item_list; if len(items.match('Read a book')) == 0: tap($add_checklist_item); set_text($add_checklist_item_title, 'Read a book'); tap($add_checklist_item_ok); back(); item = items.match('Read a book')[0]; long_tap(item); tap($move_selected_item_to_the_buttom); else: item = items.match('Read a book')[0]; long_tap(item); tap($move_selected_item_to_the_buttom);"}
{"task": "Ensure a note titled 'Meeting Agenda' exists and create a shortcut for the note.", "solution": "tap($open_note); open_note_titles = $open_note_title_list; if len(open_note_titles.match('Meeting Agenda')) == 0: tap($create_note); set_text($add_note_title, 'Meeting Agenda'); tap($add_note_ok); back(); tap($open_note); open_note_titles = $open_note_title_list; tap(open_note_titles.match('Meeting Agenda')[0]); tap($more_options_note); tap($create_shortcut); else: tap(open_note_titles.match('Meeting Agenda')[0]); tap($more_options_note); tap($create_shortcut);"}
{"task": "Ensure a checklist named 'Grocery List' exists and create a shortcut for it.", "solution": "tap($open_note); open_note_titles = $open_note_title_list; if len(open_note_titles.match('Grocery List')) == 0: tap($create_note); set_text($add_note_title, 'Grocery List'); tap($add_note_ok); back(); tap($open_note); open_note_titles = $open_note_title_list; tap(open_note_titles.match('Grocery List')[0]); tap($more_options_note); tap($create_shortcut); else: tap(open_note_titles.match('Grocery List')[0]); tap($more_options_note); tap($create_shortcut);"}
{"task": "Open an existing note and save the current changes to the note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($save_note)"}
{"task": "Ensure there are at least four items in the checklist, then find and uncheck the fourth checklist item.", "solution": "if len($checklist_item_list) < 4:\n    for _ in range(4 - len($checklist_item_list)):\n        tap($add_checklist_item)\n        tap($add_checklist_item_ok)\nlong_tap($checklist_item_list[3])\nattributes = get_attributes($checklist_item_list[3])\nif attributes['checked']:\n    tap($checklist_item_list[3])"}
{"task": "Open a checklist note and scroll through the entire list of checklist items", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nwhile True:\n    scroll($checklist_item_list, 'down')\n    if get_attributes($checklist_item_list[-1])['scrollable'] == False:\n        break"}
{"task": "Open any note with multiple items and move to the next item, then show its title", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($switch_to_next_item)\nprint(get_text($item_title))"}
{"task": "Set the font size to 100% from the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)\nback()"}
{"task": "Go to the settings menu from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the color customization interface in the settings menu and customize the colors of the app", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open the settings of the Notes app and change the theme color to dark.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)"}
{"task": "Open the theme color setting interface in the settings menu and set the theme color of the app.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_theme_color)"}
{"task": "Open the theme setting interface in the settings menu and change the theme of the app to Dark red", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)"}
{"task": "Open the settings of the app and set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)"}
{"task": "Open a note and rename it to 'Shopping List'.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Shopping List')\ntap($rename_ok)"}
{"task": "Ensure items exist within the opened note or checklist, then switch to the next item.", "solution": "if len($checklist_item_list) + len($note_content) > 0:\n    tap($switch_to_next_item)"}
{"task": "Rename the currently open note to 'Meeting Notes'", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open a checklist and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then export the current checklist as a file", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($export_as_file)"}
{"task": "Open any checklist note and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings of the Notes app and set the theme color of the app to auto_light_dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu in the checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure a note is open and then tap 'Settings' from 'more options' in the current note. Check the 'Make links and emails clickable' checkbox.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)\nif not get_attributes($set_make_links_and_emails_clickable)['checked']:\n    tap($set_make_links_and_emails_clickable)"}
{"task": "Ensure a note is currently open, then open more options for the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then add a new checklist item titled 'Finish homework'", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Finish homework')\ntap($add_checklist_item_ok)"}
{"task": "Open any note or create a new note if none exist, then search for the term 'budget' within the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'budget')"}
{"task": "Open any note in the Notes APP and then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open any checklist note and then open more options for the current checklist in the Notes APP", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure an item is selected or opened, then show the title of the current item", "solution": "if not get_attributes($open_note)['selected']:\n    tap($open_note_title_list[0])\nprint(get_text($item_title))"}
{"task": "Ensure the current note is titled 'Work', then create a shortcut for it.", "solution": "if get_text($item_title) != 'Work':\n    tap($open_note)\n    tap($open_note_title_list.match('Work')[0])\ntap($more_options_note)\ntap($more_option_note_buttons.match('Create shortcut')[0])"}
{"task": "Open the settings page and set the app alignment to left", "solution": "tap($settings)\ntap($set_alignment)\ntap($alignment_options.match('Left')[0])\nback()"}
{"task": "Open a note and then open settings from more options of the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($more_option_note_buttons.match('Settings')[0])"}
{"task": "Ensure a checklist is opened and then sort it by alphabetical order and confirm the selection by pressing OK.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nif 'checklist' not in get_text($item_title).lower():\n    tap($switch_to_next_item)\ntap($more_options_checklist)\ntap($more_option_checklist_buttons.match('Sort by')[0])\ntap($sort_checklist_items.match('Title')[0])\ntap($sort_checklist_items_ok)"}
{"task": "Open the 'Grocery list' checklist and then lock it", "solution": "tap($open_note)\n$open_note_title_list.match('Grocery list')[0].tap()\ntap($more_options_checklist)\ntap($lock_note)"}
{"task": "Ensure the word 'project' is present in the note and highlight all its occurrences.", "solution": "tap($search_within_note)\nset_text($search_text, 'project')\noccurrences = 0\nwhile True:\n    if get_attributes($next_matchhed_text)['checked']:\n        occurrences += 1\n    else:\n        break\ntap($close_search_box)\nprint(f'Total occurrences highlighted: {occurrences}')"}
{"task": "Set the font size to 75% in the Notes app from the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)\ntap($exit_settings)"}
{"task": "Ensure the 'Meeting minutes' note exists and open the file", "solution": "tap($open_note)\nif len($open_note_title_list.match('Meeting minutes')) > 0:\n    $open_note_title_list.match('Meeting minutes')[0].tap()\ntap($more_options_note)\ntap($open_file)"}
{"task": "If no note is currently open, open any note. Then close the current note and return to the main screen.", "solution": "if get_text($item_title) == '':\n    tap($open_note)\n    if len($open_note_title_list) > 0:\n        $open_note_title_list[0].tap()\nback()"}
{"task": "Create checklist items, mark them as done, and then remove all done items in the current checklist.", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\nchecklist_items = $checklist_item_list\nfor item in checklist_items:\n    tap(item)\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Open or create a new note if there is none, then create a shortcut for the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Ensure a checklist is open, then tap 'Settings' from 'more options' in the current checklist and check the 'Make links and emails clickable' checkbox", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_make_links_and_emails_clickable)\nback()"}
{"task": "Open the current note's file by first opening or creating a note if none exists.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Ensure a note is open and then check the 'Use monospaced font' checkbox after tapping 'Settings' from 'more options' in the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_use_monospaced_font)\nback()"}
{"task": "Open the font size settings and change the font size to 100% in the app settings", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "Open a checklist note or create one if there is none, then delete the checklist item 'Call Mom.'", "solution": "\ntry:\n    tap($checklist_item_list[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nitems_list = $checklist_item_list\nfor item in items_list:\n    if get_text(item) == 'Call Mom':\n        long_tap(item)\n        tap($delete_selected_checklist_item)\n        break"}
{"task": "Open the font size settings and show the current font size in the app settings", "solution": "tap($settings)\ntap($set_font_size)\nsize_buttons = $font_size_types\ncurrent_size = ''\nfor btn in size_buttons:\n    if get_attributes(btn)['selected']:\n        current_size = get_text(btn)\n        break\nprint(current_size)"}
{"task": "Open a checklist note or create one if there is none, then move the checklist item 'Workout' to the bottom of the list.", "solution": "\ntry:\n    tap($checklist_item_list[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nitems_list = $checklist_item_list\nfor item in items_list:\n    if get_text(item) == 'Workout':\n        long_tap(item)\n        tap($move_selected_item_to_the_buttom)\n        break"}
{"task": "Ensure that a note titled 'Grocery List' exists and is opened, then create a shortcut for the grocery list note.", "solution": "\n# Check if 'Grocery List' note exists\nfound_grocery_list = False\ntap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Grocery List':\n        tap(note)\n        found_grocery_list = True\n        break\nif not found_grocery_list:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Starting from the home page, view more options for the current note.", "solution": "tap($more_options_note)"}
{"task": "Open settings from more options of an opened checklist", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "From the home page, navigate to the settings page and customize colors.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open a note", "solution": "tap($open_note)\ntap($open_note_title_list[0])"}
{"task": "Starting from the home page, view more options for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Navigate to the settings page from the home page and set the text color of the Notes APP.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)"}
{"task": "Create and confirm a new note from the home page.", "solution": "tap($create_note)\nset_text($add_note_title, 'New Note')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open a note about travel plans or create one if it doesn't exist, then open more options for the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\ntravel_note = notes.match('Travel Plans')\nif len(travel_note) > 0:\n    tap(travel_note[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Ensure no existing checklist with the title 'Project Tasks', then add a new checklist note with the title 'Project Tasks'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nexisting_checklists = notes.match('Project Tasks')\nif len(existing_checklists) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Project Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)"}
{"task": "Import notes to the app directly from the home page", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($import_notes)"}
{"task": "Open the settings menu and customize the primary color of the Notes app to green", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom)\nset_text($set_primary_color, 'green')\ntap($save_set_colors)"}
{"task": "Open the settings menu, then set the app icon color to black", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Ensure a note is opened and then display more options for the current note", "solution": "tap($more_options_note)"}
{"task": "Open a note if none are currently opened, then open more options for the current note.", "solution": "if get_attributes($item_title)['selected'] == False:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure a checklist is opened and then open the more options menu for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Create multiple checklist items, then sort the current checklist items by custom order.", "solution": "tap($add_checklist_item)\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\ntap($add_checklist_item_ok)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the appropriate settings interface and enable setting to place cursor at the end of the note.", "solution": "tap($settings)\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Open the settings of the app and set the font size to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open a note and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if 'Checklist' in get_text($open_note_title_list[i]):\n        tap($open_note_title_list[i])\n        break\ntap($more_options_checklist)"}
{"task": "Open a note if there's none open, then switch to the previous note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($switch_to_prev_item)"}
{"task": "Ensure that a note titled 'Meeting Notes' exists and is opened, then lock the meeting notes.", "solution": "note_found = False\nif len($open_note_title_list) == 0:\n    tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Meeting Notes':\n        tap($open_note_title_list[i])\n        note_found = True\n        break\nif not note_found:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Change the theme color of the Notes app.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($close_set_colors)\ntap($save_set_colors)"}
{"task": "Open a note if none is open, then switch to the next note in the list", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($switch_to_next_item)"}
{"task": "If no checklist note is currently open, open one first, and then open more options for the current checklist.", "solution": "if not len($checklist_item_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Lock the current note and then confirm it has been locked.", "solution": "tap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings page and change the theme color to dark red using the theme settings menu", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)\nback()"}
{"task": "Switch to the next note.", "solution": "tap($switch_to_next_item)"}
{"task": "Open the settings page and set the app's theme to white through the theme settings.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)\nback()"}
{"task": "If a note titled 'Meeting Notes' already exists, rename it to something else, then rename the current note to 'Meeting Notes'.", "solution": "# Renaming an existing note titled 'Meeting Notes'\ntap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Meeting Notes':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Meeting Notes - Old')\n        tap($rename_ok)\n        break\nback()\n\n# Renaming current note to 'Meeting Notes'\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open or create a note and then open more options for the current note", "solution": "# Open or create note and then open more options\n# Attempt to open an existing note\ntap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Starting from the home page, navigate to settings and enable incognito mode for keyboards.", "solution": "# Navigate to settings and enable incognito mode for keyboards.\ntap($more_options_note)\ntap($settings)\nwhile True:\n    if get_attributes($set_use_incognito_mode_of_keyboards)['scrollable']:\n        scroll($scroll_settings_page, 'down')\n    tap($set_use_incognito_mode_of_keyboards)\n    break"}
{"task": "Open an existing note or create a new one if none are available, then edit the content of the note to add 'Don't forget to buy milk'", "solution": "# Open an existing note or create a new one\n# Attempt to open an existing note\ntap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n# Edit the content of the note\nset_text($note_content, get_text($note_content) + \"\\nDon't forget to buy milk\")"}
{"task": "Ensure there are at least two notes present, then tap on the button to switch to the previous note.", "solution": "# Ensure there are at least two notes available\n# Create two notes if less than two are available\ntap($open_note)\nif len($open_note_title_list) < 2:\n    for _ in range(2 - len($open_note_title_list)):\n        tap($create_note)\n        set_text($add_note_title, f'Note {_ + len($open_note_title_list) + 1}')\n        tap($text_note_type)\n        tap($add_note_ok)\n        back()\n    tap($open_note)\ntap($switch_to_prev_item)"}
{"task": "Open the settings page and disable 'Show a note picker on startup'.", "solution": "tap($settings)\nif get_attributes($set_show_a_note_picker_on_startup)[\"checked\"]:\n    tap($set_show_a_note_picker_on_startup)"}
{"task": "Ensure a note titled 'Personal Journal' exists and then lock the note.", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nnote_titles = note_list.match(\"Personal Journal\")\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"Personal Journal\")\n    tap($text_note_type)\n    tap($add_note_ok)\nnote_titles = note_list.match(\"Personal Journal\")\ntap(note_titles[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu for the current checklist", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nchecklist_notes = [note for note in open_note_titles if get_attributes(note)[\"checked\"]]\nif len(checklist_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"New Checklist\")\n    tap($checklist_type)\n    tap($add_note_ok)\ntap(checklist_notes[0] if len(checklist_notes) > 0 else $open_note_title_list[-1])\ntap($more_options_checklist)"}
{"task": "Ensure a checklist named 'Weekend Tasks' exists and then lock the checklist named 'Weekend Tasks'.", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nnote_titles = note_list.match(\"Weekend Tasks\")\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"Weekend Tasks\")\n    tap($checklist_type)\n    tap($add_note_ok)\nnote_titles = note_list.match(\"Weekend Tasks\")\ntap(note_titles[0])\ntap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings page and enable 'Autosave notes'", "solution": "tap($settings)\nif not get_attributes($set_autosave_notes)[\"checked\"]:\n    tap($set_autosave_notes)"}
{"task": "Show the title of the current note from the home page.", "solution": "print(get_text($item_title))"}
{"task": "From the Notes app home page, open the current note and list all checklist items.", "solution": "tap($open_note); tap($open_note_title_list[0]); checklist_items = $checklist_item_list; for i in range(len(checklist_items)): print(get_text(checklist_items[i]))"}
{"task": "Open the settings menu and choose 'white' theme color", "solution": "tap($settings); tap($set_colors); tap($set_theme_color); tap($theme_color_white); tap($save_set_colors); back()"}
{"task": "Open the settings page and switch the app's theme to black and white using the theme settings", "solution": "tap($settings); tap($set_colors); tap($set_theme_color); tap($theme_color_black_white); tap($save_set_colors); back()"}
{"task": "Show the content of checklist item 3 in the current note.", "solution": "tap($checklist_item_list[2]); print(get_text($checklist_item_list[2]))"}
{"task": "Open the settings menu and choose 'black_white' theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\nback()"}
{"task": "If there is no note currently open, open a note. Then, open more options for the current note.", "solution": "notes = $open_note_title_list\nif len(notes) == 0: tap($open_note)\ntap($more_options_note)"}
{"task": "From the home page, navigate to the current note and add a new checklist item.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_chklist)\ntap($add_checklist_item)"}
{"task": "Ensure the word 'meeting' is present in the current note and then search for 'meeting' within the note", "solution": "note_content = get_text($note_content)\nif 'meeting' not in note_content: set_text($note_content, note_content + '\\nmeeting')\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Go to the next instance of the matching text 'budget' in the current note.", "solution": "tap($next_matchhed_text)"}
{"task": "Open a checklist note and uncheck all items in the checklist.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nchecklist_note = note_titles.match({'checked': false})[0]\ntap(checklist_note)\nchecklist_items = $checklist_item_list\nfor i in range(len(checklist_items)):\n    item = checklist_items[i]\n    if get_attributes(item)['checked']:\n        tap(item)\n"}
{"task": "Open the settings page and disable 'Autosave notes'", "solution": "tap($settings)\nautosave_checkbox = $set_autosave_notes\nif get_attributes(autosave_checkbox)['checked']:\n    tap(autosave_checkbox)\nback()\n"}
{"task": "Open a checklist note and scroll through the checklist to view all items", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nchecklist_note = note_titles.match({'checked': false})[0]\ntap(checklist_note)\nscroll($checklist_item_list, 'down')\n"}
{"task": "Ensure there is no existing note titled 'Shopping List' in the Notes app, then open the Notes app and add a new note titled 'Shopping List'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Shopping List':\n        break\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)\n"}
{"task": "Ensure no note titled 'Project Ideas' exists, then open the Notes app and rename the current 'Work Notes' to 'Project Ideas'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Project Ideas':\n        break\nelse:\n    work_note = note_titles.match('Work Notes')[0]\n    tap(work_note)\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Project Ideas')\n    tap($rename_ok)\n"}
{"task": "Open the settings menu and choose 'custom' theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match({'title': 'Custom'})[0])\ntap($save_set_colors)\n"}
{"task": "Open a checklist note if there is none opened, then open more options for the current checklist", "solution": "if len($checklist_item_list) == 0 and len($open_note_title_list) > 0:\n    tap($open_note)\nif len($checklist_item_list) > 0:\n    tap($more_options_checklist)\n"}
{"task": "Close the search box for matching text within the current note from the home page.", "solution": "tap($search_within_note)\ntap($close_search_box)\n"}
{"task": "If a note with the title 'Grocery List' already exists, rename that note. Then, add a new note with the title 'Grocery List.'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nmatching_notes = note_titles.match({'text': 'Grocery List'})\nif len(matching_notes) > 0:\n    tap(matching_notes[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Grocery List')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($add_note_ok)\n"}
{"task": "Create a note titled 'Project Plan' and set it as a checklist from the home page of the Notes APP.", "solution": "tap($create_note)\nset_text($add_note_title, 'Project Plan')\ntap($checklist_type)\ntap($add_note_ok)\n"}
{"task": "Open a note or create one if there is none, then delete the last paragraph in the current note", "solution": "open_note_titles = $open_note_title_list\nif len(open_note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($open_note)\ntap(open_note_titles[0])\nnote_content = get_text($note_content)\nnote_paragraphs = note_content.split('\\n')\nif len(note_paragraphs) > 1:\n    updated_content = '\\n'.join(note_paragraphs[:-1])\n    set_text($note_content, updated_content)\ntap($save_note)"}
{"task": "Ensure a checklist is currently open and then access more options for the current checklist", "solution": "if 'checklist_item_list' not in globals():\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open any note or create a new note if none exist, then read the title of the current note", "solution": "open_note_titles = $open_note_title_list\nif len(open_note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($open_note)\ntap(open_note_titles[0])\nnote_title = get_text($item_title)\nnote_title"}
{"task": "Open the settings page and use a monospaced font", "solution": "tap($settings)\nset_checkbox = $set_use_monospaced_font\nattrs = get_attributes(set_checkbox)\nif not attrs['checked']:\n    tap(set_checkbox)"}
{"task": "Open a checklist note or create one if there is none, then tap on the button to switch to the next checklist item.", "solution": "open_note_titles = $open_note_title_list\nif len(open_note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note)\ntap(open_note_titles[0])\ntap($switch_to_next_item)"}
{"task": "Open any existing note or create a new note, then tap on the 'more options' button to open more options for the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Set the font size to 90% in the Notes app from the home page", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_90%)\n"}
{"task": "Tap on the 'Settings' button to open the app settings from the home page.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open a note or create one if there is none, tap on 'More options', and select an option to share the note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($share)"}
{"task": "Show the current font size in the Notes app", "solution": "tap($more_options_note)\ntap($settings)\ntap($current_font_size)\nget_text($current_font_size)"}
{"task": "Open any checklist note and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the note titled 'Class schedule' and print it", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Class schedule')\nif notes:\n    tap(notes[0])\n    tap($more_options_note)\n    tap($print_note)"}
{"task": "Open the settings of the Notes app and switch the theme color of the app to light.", "solution": "tap($settings)\nsettings_button = $set_colors\nif settings_button:\n    tap(settings_button)\n    tap($set_theme_color)\n    colors = $theme_color_types.match('light')\n    if colors:\n        tap(colors[0])"}
{"task": "Open the settings of the app from the home page directly", "solution": "tap($settings)"}
{"task": "Open the checklist titled 'Home maintenance' and print it", "solution": "tap($open_note)\nchecklist = $open_note_title_list.match('Home maintenance')\nif checklist:\n    tap(checklist[0])\n    tap($more_options_checklist)\n    tap($print_note)"}
{"task": "Check if the note titled 'Vacation Ideas' exists, and if it does, open it.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles.match('Vacation Ideas')) > 0:\n    tap(open_note_titles.match('Vacation Ideas')[0])"}
{"task": "Ensure the note titled 'Books to Read' exists, create it if it doesn't, then open it and add the book '1984' to the list.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles.match('Books to Read')) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Books to Read')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap(open_note_titles.match('Books to Read')[0])\nset_text($note_content, get_text($note_content) + '\\n1984')\ntap($save_note)"}
{"task": "Ensure the search term 'budget' exists multiple times in the note, then move to the next occurrence of the word 'budget' within the current note.", "solution": "tap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Create the note titled 'Project Ideas' if it doesn\u2019t exist, then open the note titled 'Project Ideas'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles.match('Project Ideas')) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Project Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap(open_note_titles.match('Project Ideas')[0])"}
{"task": "Open the search box within the note and then close it", "solution": "tap($search_within_note)\ntap($close_search_box)"}
{"task": "Access the home page of the Notes APP and set the alignment to center.", "solution": "tap($settings)\ntap($set_alignment)\ntap($theme_color_custom.localized.match('center')[0]['alignment'])\nback()"}
{"task": "Ensure the 'Weekly tasks' checklist exists and open the file.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Weekly tasks')) > 0:\n    tap($open_note_title_list.match('Weekly tasks')[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Weekly tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\n\ntap($file_manager.open('Weekly tasks'))"}
{"task": "Open the Notes app and then open the note titled 'Grocery List'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Grocery List')) > 0:\n    tap($open_note_title_list.match('Grocery List')[0])"}
{"task": "Set the theme color to dark mode.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()\nback()"}
{"task": "Open a note or create one if there is none, then edit the note content to include a reminder 'Call John at 3pm.'", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    set_text($note_content, 'Reminder: Call John at 3pm')\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Reminder Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    set_text($note_content, 'Reminder: Call John at 3pm')"}
{"task": "Ensure the 'Travel itinerary' note exists, open it, and then export it as a file.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Travel itinerary':\n        tap(open_notes[i])\n        break\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the existing note from the home page.", "solution": "tap($open_note)"}
{"task": "Open an existing checklist containing the item 'Buy Milk' or create a new checklist and add the item 'Buy Milk'. Then rename the checklist item 'Buy Milk' to 'Purchase Milk'.", "solution": "checklist_found = False\nif get_text($item_title) != 'Home':\n    tap($switch_to_prev_item)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Home':\n        tap($open_note_title_list[i])\n        break\nif get_text($item_title) == 'Buy Milk':\n    checklist_found = True\nif not checklist_found:\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Buy Milk')\n    tap($add_checklist_item_ok)\ntap($checklist_item_list.match({'selected': True})[0])\nlong_tap($checklist_item_list.match({'checked': False})[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Purchase Milk')\ntap($rename_ok)"}
{"task": "Open a note or create one if there is none, then open more options of the current note", "solution": "if get_text($item_title) == 'Untitled Note' and len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure the 'Books to read' checklist exists, open it, and then export it as a file", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Books to read':\n        tap(open_notes[i])\n        break\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open a note if there is none opened and edit the content of the current note to add 'Meeting at 3 PM'", "solution": "try:\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) == 0:\n        raise Exception('No notes available')\n    tap(notes[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n\nset_text($note_content, 'Meeting at 3 PM')\ntap($save_note)"}
{"task": "Open a note or create one if there is none, then tap on 'more options' for the current note", "solution": "try:\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) == 0:\n        raise Exception('No notes available')\n    tap(notes[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n\ntap($more_options_note)"}
{"task": "Create the note titled \"Workout Routine\" if it doesn't exist, then open the note and update the checklist item \"Cardio\"", "solution": "notes = None\ntitle = 'Workout Routine'\n\ntry:\n    tap($open_note)\n    notes = $open_note_title_list.match(title)\nexcept:\n    pass\n\nif notes is None or len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, title)\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note)\n\nnotes = $open_note_title_list.match(title)\ntap(notes[0])\n\nchecklist_items = $checklist_item_list\nitem = checklist_items.match('Cardio')[0]\n\nlong_tap(item)\nset_text($checklist_item, 'Cardio')\ntap($add_checklist_item_ok)\ntap($save_note)"}
{"task": "Open the current checklist and tap on 'more options'", "solution": "try:\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) == 0:\n        raise Exception('No notes available')\n    tap(notes[0])\nexcept:\n    pass\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then open more options of the current checklist", "solution": "try:\n    tap($open_note)\n    notes = $open_note_title_list\n    checklist_notes = [note for note in notes if 'Checklist' in get_text(note)]\n    if len(checklist_notes) == 0:\n        raise Exception('No checklist notes available')\n    tap(checklist_notes[0])\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note)\n    notes = $open_note_title_list\n    checklist_notes = [note for note in notes if 'Checklist' in get_text(note)]\n    tap(checklist_notes[0])\n\ntap($more_options_checklist)"}
{"task": "If a note titled 'Shopping List' already exists, rename it to something else and then create a new text note titled 'Shopping List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i, note in enumerate(notes):\n    if get_text(notes[i]) == 'Shopping List':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Archived Shopping List')\n        tap($rename_ok)\n        back()\n        break\nback()\ntap($create_note)\ntap($text_note_type)\nset_text($add_note_title, 'Shopping List')\ntap($add_note_ok)"}
{"task": "Open an existing checklist or create a new one, add the item 'Call Doctor' to the checklist, and then delete the item 'Call Doctor'.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list.match('Checklist')\nif len(open_note_titles) > 0:\n    tap(open_note_titles[0])\nelse:\n    back()\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'Checklist')\n    tap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Call Doctor')\ntap($add_checklist_item_ok)\nchecklist_items = $checklist_item_list.match('Call Doctor')\nif len(checklist_items) > 0:\n    long_tap(checklist_items[0])\n    tap($delete_selected_checklist_item)"}
{"task": "If a checklist note titled 'To-Do List' already exists, rename it to something else. Then, create a new checklist note titled 'To-Do List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i, note in enumerate(notes):\n    if get_text(notes[i]) == 'To-Do List':\n        tap(notes[i])\n        tap($more_options_checklist)\n        tap($rename_note)\n        set_text($rename_input, 'Archived To-Do List')\n        tap($rename_ok)\n        back()\n        break\nback()\ntap($create_note)\ntap($checklist_type)\nset_text($add_note_title, 'To-Do List')\ntap($add_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then open more options of the current checklist", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list.match('Checklist')\nif len(open_note_titles) > 0:\n    tap(open_note_titles[0])\nelse:\n    back()\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'Checklist')\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the settings of the Notes APP", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($more_options_note.match({'description': 'Settings'})[0])"}
{"task": "Open any note or create a new note if none exist, then open the more options menu for the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Customize the colors of the app from the settings page accessed directly from the home page", "solution": "tap($more_options_note.match({'description': 'Settings'})[0])\ntap($set_colors)"}
{"task": "Ensure a note is open, then edit the content of the current note by typing 'Meeting notes for tomorrow's agenda'", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nset_text($note_content, \"Meeting notes for tomorrow's agenda\")"}
{"task": "Ensure a checklist is currently open and then open more options for the current checklist", "solution": "if len($checklist_item_list) > 0:\n    tap($checklist_item_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the settings, customize the colors, and save the customized colors", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\n# Assuming some color selection functions\nback()\ntap($set_text_color)\n# Assuming some color selection functions\nback()\ntap($set_background_color)\n# Assuming some color selection functions\nback()\ntap($save_set_colors)"}
{"task": "Enable the option to show the keyboard on startup from the settings page, accessible from the home page", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)\nback()"}
{"task": "Enable the option to show a note picker on startup by adjusting the setting from the settings page", "solution": "tap($settings)\ntap($set_show_a_note_picker_on_startup)\nback()"}
{"task": "If a note titled 'Grocery List' already exists, rename it to something else. Then, create a new note with the title 'Grocery List'.", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Grocery List':\n        tap($open_note_title_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Renamed Note')\n        tap($rename_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open any note or create a new note if none exist, make changes, and save the changes made to the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    set_text($note_content, 'New content for the note')\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Temporary Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    set_text($note_content, 'New content for the note')\ntap($save_note)"}
{"task": "Open the 'Settings' menu in the Notes app and change the background color.", "solution": "\ntap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Here you can choose a specific color, for instance 'white'\ntap($theme_color_white)\ntap($save_set_colors)\nback()\n"}
{"task": "Open the settings menu to access text customization settings and enable the monospaced font option.", "solution": "\ntap($settings)\nscroll($scroll_settings_page, 'down')\n# Continue scrolling down if needed\ntap($set_use_monospaced_font)\nback()\n"}
{"task": "Open a checklist note if none are currently opened, then open more options for the current checklist.", "solution": "\nif len($open_note_title_list) == 0: # No checklist note opened.\n    tap($open_note)\n    tap($open_note_title_list.match({'checked': false})[0]) # Open the first unchecked note\nelse:\n    tap($more_options_checklist)\n"}
{"task": "Open a checklist note or create one if there is none, and then duplicate the checklist item 'Grocery shopping.'", "solution": "\nif len($open_note_title_list) == 0: # No checklist note.\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n# Add checklist item 'Grocery shopping'\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Grocery shopping')\ntap($add_checklist_item_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list.match({'checked': false})[0])\n    tap($checklist_item_list.match('Grocery shopping')[0])\n    # Duplicate the checklist item\n    long_tap($checklist_item_list.match('Grocery shopping')[0])\n    tap($add_checklist_item)\n    tap($add_checklist_item_ok)\n"}
{"task": "Open an existing note or create one if there is none, then open the more options of the current note.", "solution": "\nif len($open_note_title_list) == 0: # No note.\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type) # Select text note type\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list.match({'checked': false})[0])\ntap($more_options_note)\n"}
{"task": "Navigate to settings from the home page, go to Theme, and choose Black & White.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Open a checklist in the Notes app and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure no checklist with the title 'Weekend Activities' exists and then create a new checklist titled 'Weekend Activities'", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Weekend Activities':\n        tap($open_note_title_list[i])\n        tap($more_options_checklist)\n        tap($delete_note)\n        tap($delete_note_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Weekend Activities')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Ensure at least one note exists, then open the most recent note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[-1])"}
{"task": "Open a checklist note or create one if there is none, then open more options of the current checklist", "solution": "tap($open_note)\nfound_checklist = False\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    if len($checklist_item_list) > 0:\n        found_checklist = True\n        break\nif not found_checklist:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note if none are currently opened, then access the settings from the more options menu of the note.", "solution": "if get_attributes($more_options_note)['scrollable'] == False:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Open a checklist note if none are currently opened, then access the settings from the more options menu of the checklist.", "solution": "if get_attributes($more_options_checklist)['scrollable'] == False:\n    tap($open_note)\n    tap($open_note_title_list.match({'text': 'Checklist'})[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open a checklist note or create one if there is none, then open the more options of the current checklist.", "solution": "if len($open_note_title_list.match({'text': 'Checklist'})) == 0:\n    tap($create_note)\n    tap($add_note_types.text_note_type.eq(1))\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match({'text': 'Checklist'})[0])\ntap($more_options_checklist)"}
{"task": "Open the settings menu and turn on Incognito mode of keyboards", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open the settings menu to access text customization settings and enable line wrap.", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_monospaced_font)\nscroll($scroll_settings_page, 'down')\ntap($set_enable_line_wrap)"}
{"task": "Open the settings menu to customize the colors of the Notes app", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Access the app settings from the home page", "solution": "tap($settings)"}
{"task": "Ensure the note titled 'Work Tasks' exists, add the checklist item 'Finish report' if it doesn't exist, and then mark it as completed.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Work Tasks':\n        tap(note_titles[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Work Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\nitems = $checklist_item_list\nfor i in range(len(items)):\n    if get_text(items[i]) == 'Finish report':\n        tap(items[i])\n        break\nelse:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Finish report')\n    tap($add_checklist_item_ok)\n    items = $checklist_item_list\n    for i in range(len(items)):\n        if get_text(items[i]) == 'Finish report':\n            tap(items[i])\n            break"}
{"task": "Open the settings of the app and customize the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings menu and change the widget colors in the Notes app", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Ensure no note with the title 'Work Notes' exists to avoid naming conflicts during renaming, then rename the current note to 'Work Notes'.", "solution": "if any(get_text(el) == 'Work Notes' for el in $open_note_title_list):\n    tap($open_note)\n    notes = $open_note_title_list\n    for note in notes:\n        if get_text(note) == 'Work Notes':\n            return\nback()\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Work Notes')\ntap($rename_ok)"}
{"task": "Open the settings of the app and set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)"}
{"task": "Open the settings of the Notes app and enable line wrap", "solution": "tap($settings)\ntap($set_enable_line_wrap)"}
{"task": "Navigate to the settings in the Notes app and set the theme to Dark red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "if any(get_text(el) == 'Work Notes' for el in $open_note_title_list):\n    tap($open_note)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Change the first sentence in the current note to 'The meeting is rescheduled to 3 PM.'", "solution": "tap($note_content)\ntext = get_text($note_content)\nfirst_sentence = text.split('. ')[0] + '.'\nnew_text = text.replace(first_sentence, 'The meeting is rescheduled to 3 PM.')\nset_text($note_content, new_text)\ntap($save_note)"}
{"task": "Open the settings of the app and set the primary color", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Open the font size settings in the Notes APP and set the font to 300%.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_300%)\ntap($exit_settings)"}
{"task": "Bold the word 'important' in the current note.", "solution": "# Assuming there's a way to select text using the API, but since it's not provided, I'll simulate the behavior.\ntap($note_content)\ntext = get_text($note_content)\nnew_text = text.replace('important', '<b>important</b>')\nset_text($note_content, new_text)\ntap($save_note)"}
{"task": "Open the settings menu to adjust the font size of the Notes app", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\n# Now the user can interact with the font size settings manually."}
{"task": "Open a checklist note or create one if there is none, then open the more options menu for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure an item with the text 'Complete homework' exists in the checklist, then edit the checklist item 'Complete homework' to 'Submit homework'", "solution": "def ensure_item_exists_and_edit():\n    items = $checklist_item_list\n    complete_homework_items = items.match('Complete homework')\n    if len(complete_homework_items) == 0:\n        tap($add_checklist_item)\n        set_text($add_checklist_item_title, 'Complete homework')\n        tap($add_checklist_item_ok)\n    else:\n        long_tap(complete_homework_items[0])\n        tap($rename_selected_checklist_item)\n        set_text($rename_input, 'Submit homework')\n        tap($rename_ok)\n\nensure_item_exists_and_edit()"}
{"task": "Open a checklist note and add a new checklist item with the text 'Call mom' at the top of the list", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Call mom')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)"}
{"task": "Starting from the home page, open the settings of the Notes app.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Ensure no note titled 'Vacation Plans' exists, then create a new note with the title 'Vacation Plans'", "solution": "if len($open_note_title_list.match('Vacation Plans')) > 0:\n    existing_vacation_plans = $open_note_title_list.match('Vacation Plans')\n    for item in existing_vacation_plans:\n        long_tap(item)\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Vacation Plans')\ntap($add_note_ok)"}
{"task": "Ensure that a note titled 'Grocery List' exists and is opened, then print the current note about the grocery list.", "solution": "\n# Ensure that a note titled 'Grocery List' exists and is opened, then print the current note about the grocery list.\ndef ensure_note_exists(title):\n    tap($open_note)\n    notes = $open_note_title_list\n    note_titles = [get_text(note) for note in notes]\n    if title not in note_titles:\n        back()\n        tap($create_note)\n        set_text($add_note_title, title)\n        tap($text_note_type)\n        tap($add_note_ok)\n        return\n    back()\n    for note in notes:\n        if get_text(note) == title:\n            tap(note)\n            return\n\ndef open_grocery_list_and_print():\n    ensure_note_exists('Grocery List')\n    print(get_text($note_content))\n\nopen_grocery_list_and_print()\n"}
{"task": "Open an existing note or create one if there is none, then open the app settings from the more options of the current note.", "solution": "\n# Open an existing note or create one if there is none, then open the app settings from the more options of the current note.\ndef ensure_note_exists_or_create():\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) == 0:\n        back()\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n    else:\n        tap(notes[0])\n\ndef open_settings_from_note():\n    ensure_note_exists_or_create()\n    tap($more_options_note)\n    tap($settings)\n\nopen_settings_from_note()\n"}
{"task": "Open the settings menu and change the alignment settings", "solution": "\n# Open the settings menu and change the alignment settings.\ndef open_settings_menu():\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) > 0: tap(notes[0])\n    else:\n        back()\n        tap($create_note)\n        set_text($add_note_title, 'Temp Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n        tap($more_options_note)\n        tap($settings)\n    tap($more_options_note)\n    tap($settings)\n\ndef change_alignment_settings():\n    open_settings_menu()\n    tap($set_alignment)\n    back()\n\nchange_alignment_settings()\n"}
{"task": "Ensure that a note titled 'Meeting Minutes' exists, open it, and then delete the current note.", "solution": "\n# Ensure that a note titled 'Meeting Minutes' exists, open it, and then delete the current note.\ndef ensure_note_exists(title):\n    tap($open_note)\n    notes = $open_note_title_list\n    note_titles = [get_text(note) for note in notes]\n    if title not in note_titles:\n        back()\n        tap($create_note)\n        set_text($add_note_title, title)\n        tap($text_note_type)\n        tap($add_note_ok)\n        return\n    back()\n    for note in notes:\n        if get_text(note) == title:\n            tap(note)\n            return\n\ndef delete_meeting_minutes():\n    ensure_note_exists('Meeting Minutes')\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\n\ndelete_meeting_minutes()\n"}
{"task": "Open the checklist titled 'Project Checklist' or create it if it doesn't exist, then export the project checklist as a file.", "solution": "\n# Open the checklist titled 'Project Checklist' or create it if it doesn't exist, then export the project checklist as a file.\ndef ensure_checklist_exists(title):\n    tap($open_note)\n    notes = $open_note_title_list\n    note_titles = [get_text(note) for note in notes]\n    if title not in note_titles:\n        back()\n        tap($create_note)\n        set_text($add_note_title, title)\n        tap($checklist_type)\n        tap($add_note_ok)\n        return\n    back()\n    for note in notes:\n        if get_text(note) == title:\n            tap(note)\n            return\n\ndef export_project_checklist():\n    ensure_checklist_exists('Project Checklist')\n    tap($more_options_checklist)\n    tap($export_as_file)\n\nexport_project_checklist()\n"}
{"task": "Open the settings of the app and change the app icon color", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_app_icon_color)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Insert the date '2023-10-15' at the beginning of the current note from the home page.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nset_text($note_content, '2023-10-15 ' + get_text($note_content))"}
{"task": "Open the current note and access more options for the note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Set the font size to 250% by opening the settings page and adjusting the font size.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_font_size)\ntap($font_size_250%)"}
{"task": "Ensure an item with the text 'Call mom' exists in the checklist and then move the checklist item 'Call mom' to the bottom of the list.", "solution": "items = $checklist_item_list\nif not any(get_text(item) == 'Call mom' for item in items):\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Call mom')\n    tap($add_checklist_item_ok)\nitem_to_move = items.match('Call mom')[0]\nlong_tap(item_to_move)\ntap($move_selected_item_to_the_buttom)"}
{"task": "Ensure no note titled 'My Tasks' exists, then rename the note 'Todo List' to 'My Tasks' in the Notes app.", "solution": "notes = $open_note_title_list\nif any(get_text(note) == 'My Tasks' for note in notes):\n    note_to_delete = notes.match('My Tasks')[0]\n    long_tap(note_to_delete)\n    tap($delete_note_ok)\nnote_to_rename = notes.match('Todo List')[0]\nlong_tap(note_to_rename)\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'My Tasks')\ntap($rename_ok)"}
{"task": "Open a text note or create one if there is none, then search within the current note for the keyword 'deadline'.", "solution": "notes = $open_note_title_list\nnote_to_open = next((note for note in notes if get_text(note) == 'text'), None)\nif note_to_open is None:\n    tap($create_note)\n    set_text($add_note_title, 'Untitled')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(note_to_open)\ntap($search_within_note)\nset_text($search_text, 'deadline')"}
{"task": "Open the settings menu and then open the customize colors option.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open or create a text note and scroll through the current note content to the bottom.", "solution": "notes = $open_note_title_list\nnote_to_open = next((note for note in notes if get_text(note) == 'text'), None)\nif note_to_open is None:\n    tap($create_note)\n    set_text($add_note_title, 'Untitled')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(note_to_open)\nscroll($note_content, 'down')"}
{"task": "Open the color customization window, then close the color customization window", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open the current checklist and access more options for it", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor title in note_titles:\n    if get_text(title) == 'Shopping List':\n        tap(title)\n        break\ntap($more_options_checklist)"}
{"task": "Open the settings of the app and then open the color customization options", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings menu and show the current font size", "solution": "tap($settings)\ntap($current_font_size)"}
{"task": "Open the Notes APP and underline the title 'Shopping List' in the current note.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor title in note_titles:\n    if get_text(title) == 'Shopping List':\n        tap(title)\n        break\nback()\nattributes = get_attributes({$note_content})['selected'] = True\nset_text($note_content, get_text($note_content))"}
{"task": "Ensure a note is opened, and then access more options in the current note", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    note_to_open = notes[0]\n    tap(note_to_open)\n    tap($more_options_note)\n"}
{"task": "Tap 'Create Note' to add a new note, then complete the current note by tapping 'OK'.", "solution": "\ntap($create_note)\ntap($add_note_ok)\n"}
{"task": "Create a note titled 'Travel Itinerary' if it doesn't exist, then open the travel itinerary note", "solution": "\ntap($open_note)\ntitles = $open_note_title_list\nnote_exists = False\nfor i in range(len(titles)):\n    if get_text(titles[i]) == 'Travel Itinerary':\n        note_exists = True\n        note_index = i\n        break\nif not note_exists:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($add_note_ok)\nelse:\n    tap(titles[note_index])\n"}
{"task": "Open a checklist note if none are currently opened, then open more options for the current checklist.", "solution": "\ntap($open_note)\ntitles = $open_note_title_list\nchecklist_opened = False\nfor i in range(len(titles)):\n    attributes = get_attributes(titles[i])\n    if 'checklist' in get_text(titles[i]).lower():\n        tap(titles[i])\n        checklist_opened = True\n        break\nif not checklist_opened:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\n"}
{"task": "Tap \"Create Note\" on the home page to add a new note.", "solution": "\ntap($create_note)\n"}
{"task": "Open the color customization options and save the customized colors", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open the current note and then open the more options menu for that note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note or create one if there is none, then show the title of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nprint(get_text($item_title))"}
{"task": "Open a note or checklist item, then switch to the previous note or checklist item", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($switch_to_prev_item)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Navigate to settings and customize colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the Notes APP, go to settings, then customize colors, and set the primary color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Open settings, navigate to customize colors, then set the app icon color to green", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\n# Assuming green is an option within the opened window."}
{"task": "Open the settings page of the Notes APP and set the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Open the current checklist and then open the more options menu for it", "solution": "tap($more_options_checklist)"}
{"task": "Open the current note and delete it", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\nelse:\n    tap($back())"}
{"task": "Open a text note or create one if there is none, then search for the phrase 'project deliverables' within the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    tap($search_within_note)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($search_within_note)\nset_text($search_text, 'project deliverables')"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a text note or create one if there is none, then edit the current note by adding a bullet point list under the existing text.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ncurrent_text = get_text($note_content)\nnew_text = current_text + '\\n- Item 1\\n- Item 2\\n- Item 3'\nset_text($note_content, new_text)"}
{"task": "Open the current checklist and remove done items", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)\nelse:\n    tap($back())"}
{"task": "Open the settings page and enable 'Place cursor to the end of note'", "solution": "tap($settings)\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "Open the settings menu and set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('75%'))"}
{"task": "Open the settings menu and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('90%'))"}
{"task": "Open the settings page and enable 'Show keyboard on startup'", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Replace every occurrence of 'urgent' with 'important' in the current note.", "solution": "\nsearch_pattern = 'urgent'\nreplacement = 'important'\ntap($note_content)\nnote_text = get_text($note_content)\nnote_text_replaced = note_text.replace(search_pattern, replacement)\nset_text($note_content, note_text_replaced)\ntap($save_note)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist.", "solution": "open_notes = $open_note_title_list\nif len(open_notes) > 0:\n    tap(open_notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\n"}
{"task": "Open the current checklist and sort the items", "solution": "open_notes = $open_note_title_list\nif len(open_notes) > 0:\n    tap(open_notes[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\n"}
{"task": "Open the settings of the app", "solution": "tap($settings)\n"}
{"task": "Open the settings page and mark the 'Show word count' option", "solution": "tap($settings)\nif not get_attributes($set_show_word_count)['checked']:\n    tap($set_show_word_count)\n"}
{"task": "Open a text note or create one if there is none, then tap on 'Search' and input 'budget' to find related sections within the note.", "solution": "open_notes = $open_note_title_list\nif len(open_notes) > 0:\n    tap(open_notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Text Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'budget')\n"}
{"task": "Open settings to enable showing a note picker on startup", "solution": "tap($settings)\ntap($set_show_a_note_picker_on_startup)"}
{"task": "Open an existing checklist or create one and add the item 'Finish Report'. Then move the checklist item 'Finish Report' to the bottom of the list.", "solution": "\ntap($open_note)\nnote_titles = $open_note_title_list\nif 'Finish Report' not in [get_text(title) for title in note_titles]:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap(note_titles.match('New Checklist')[0] if 'New Checklist' in [get_text(title) for title in note_titles] else note_titles.match('Finish Report')[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Finish Report')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list.match('Finish Report')[0])\ntap($move_selected_item_to_the_buttom)"}
{"task": "Go to the app settings.", "solution": "tap($settings)"}
{"task": "Open the note titled 'Meeting Minutes'", "solution": "tap($open_note)\ntap($open_note_title_list.match('Meeting Minutes')[0])"}
{"task": "Customize the colors of the app directly from the settings.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Navigate to the settings page from the home page and enable the option to autosave notes", "solution": "tap($settings)\ntap($set_autosave_notes)"}
{"task": "Adjust font size to 150% directly from the settings or relevant menu", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\ntap($sort_checklist_items_ok)"}
{"task": "Switch to the next item in the list", "solution": "tap($switch_to_next_item)"}
{"task": "From the home page, navigate to the settings and check the box for 'set place cursor to the end of note'", "solution": "tap($settings)\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "Ensure a note is open and search for the text 'meeting notes' within the current note", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles) > 0:\n    tap(open_note_titles[0])\ntap($search_within_note)\nset_text($search_text, 'meeting notes')"}
{"task": "Open the settings of the Notes app and change the theme color to dark_red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)"}
{"task": "Ensure a note is open by creating a new note if one does not exist, then open the file of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open the note titled 'Old recipes' and then delete it", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Old recipes':\n        tap(open_note_titles[i])\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        break"}
{"task": "Open the settings of the Notes app and enable auto light/dark theme color.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)"}
{"task": "Open the color customization interface in the settings menu and then customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open or create a new note if there is none and export the current note as a file.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the 'Christmas shopping' checklist, then delete my 'Christmas shopping checklist'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Christmas shopping':\n        tap(open_note_titles[i])\n        break\nelse:\n    raise Exception('Christmas shopping checklist not found')\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open or create a new note if there is none, then print the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($print_note)"}
{"task": "Open a note and then open more options in the current note", "solution": "tap($open_note)\ntap($more_options_note)"}
{"task": "Ensure a note is open, then search for the word 'meeting' within the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Ensure a checklist is opened and then open more options in the current checklist", "solution": "# Task 0: Ensure a checklist is opened and then open more options in the current checklist\nif len($open_note_title_list) > 0:\n    tap($open_note)\n    checklist_notes = $open_note_title_list.match({'contains': 'Checklist'})\n    if len(checklist_notes) > 0:\n        tap(checklist_notes[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\n"}
{"task": "Open a checklist note or create one if there is none, then export the current checklist as a file.", "solution": "# Task 1: Open a checklist note or create one if there is none, then export the current checklist as a file.\ntap($open_note)\nchecklist_notes = $open_note_title_list.match({'contains': 'Checklist'})\nif len(checklist_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(checklist_notes[0])\ntap($more_options_checklist)\ntap($export_as_file)\n"}
{"task": "Ensure that a checklist note containing 'Buy Milk' exists, open the note, and edit the current checklist to remove 'Buy Milk'.", "solution": "# Task 2: Ensure that a checklist note containing 'Buy Milk' exists, open the note, and edit the current checklist to remove 'Buy Milk'.\ntap($open_note)\nchecklist_notes = $open_note_title_list.match({'contains': 'Checklist'})\nif len(checklist_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(checklist_notes[0])\nitem_found = False\nchecklist_items = $checklist_item_list\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Buy Milk':\n        item_found = True\n        long_tap(checklist_items[i])\n        tap($delete_selected_checklist_item)\n        break\nif not item_found:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Buy Milk')\n    tap($add_checklist_item_ok)\n    # Now remove it again\n    for i in range(len(checklist_items)):\n        if get_text(checklist_items[i]) == 'Buy Milk':\n            long_tap(checklist_items[i])\n            tap($delete_selected_checklist_item)\n            break\n"}
{"task": "Open a checklist note or create one if there is none, then print the current checklist", "solution": "# Task 3: Open a checklist note or create one if there is none, then print the current checklist\ntap($open_note)\nchecklist_notes = $open_note_title_list.match({'contains': 'Checklist'})\nif len(checklist_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(checklist_notes[0])\ntap($more_options_checklist)\ntap($print_note)\n"}
{"task": "Open the checklist titled 'Workout Plan' or create it if it doesn't exist, then create a shortcut for my workout plan checklist", "solution": "# Task 4: Open the checklist titled 'Workout Plan' or create it if it doesn't exist, then create a shortcut for my workout plan checklist\ntap($open_note)\nworkout_plan_notes = $open_note_title_list.match({'contains': 'Workout Plan'})\nif len(workout_plan_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Workout Plan')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(workout_plan_notes[0])\ntap($more_options_checklist)\ntap($create_shortcut)\n"}
{"task": "Open the settings of the app", "solution": "tap($settings_button)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n\ttap($create_note)\n\ttap($checklist_type)\n\ttap($add_note_ok)\nelse:\n\ttap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings of the Notes app and set the font size to 50%.", "solution": "tap($settings_button)\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Open the settings page in the Notes app and scroll through it.", "solution": "tap($settings_button)\nscroll($scroll_settings_page, 'down')"}
{"task": "Customize the colors of the Notes app from the home page by navigating to the settings", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a note that contains the word 'budget' or create a new note with the word 'budget', and then find the previous instance of the word 'budget' within the current note.", "solution": "def task_0():\n    tap($open_note)\n    note_list = $open_note_title_list\n    for i in range(len(note_list)):\n        if 'budget' in get_text(note_list[i]):\n            tap(note_list[i])\n            tap($search_within_note)\n            set_text($search_text, 'budget')\n            tap($prev_matched_text)\n            return\n    tap($create_note)\n    set_text($add_note_title, 'Budget Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    set_text($note_content, 'budget')\n    tap($search_within_note)\n    set_text($search_text, 'budget')\n    tap($prev_matched_text)\n\ntask_0()"}
{"task": "Open the checklist titled 'Holiday Plans' or create it if it doesn't exist, then lock the holiday plans checklist", "solution": "def task_1():\n    tap($open_note)\n    note_list = $open_note_title_list\n    for i in range(len(note_list)):\n        if 'Holiday Plans' in get_text(note_list[i]):\n            tap(note_list[i])\n            break\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'Holiday Plans')\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($lock_note)\n    tap($lock_note_ok)\n\ntask_1()"}
{"task": "Ensure a checklist is opened, then sort the items in the current checklist by title.", "solution": "def task_2():\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($title_type)\n    tap($sort_checklist_items_ok)\n\ntask_2()"}
{"task": "Open a checklist note with the item 'Buy groceries' (or create one if it does not exist), and then move the checklist item 'Buy groceries' to the bottom.", "solution": "def task_3():\n    tap($open_note)\n    note_list = $open_note_title_list\n    for i in range(len(note_list)):\n        tap(note_list[i])\n        checklist_items = $checklist_item_list\n        for j in range(len(checklist_items)):\n            if 'Buy groceries' in get_text(checklist_items[j]):\n                long_tap(checklist_items[j])\n                tap($move_selected_item_to_the_buttom)\n                return\n    tap($create_note)\n    set_text($add_note_title, 'Groceries Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Buy groceries')\n    tap($add_checklist_item_ok)\n    long_tap($checklist_item_list[0])\n    tap($move_selected_item_to_the_buttom)\n\ntask_3()"}
{"task": "Ensure a checklist is opened and sort the items in the current checklist by date created.", "solution": "def task_4():\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($date_created_type)\n    tap($sort_checklist_items_ok)\n\ntask_4()"}
{"task": "Open the settings of the Notes app and set the font size to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open the theme color setting interface in the settings menu and set the theme color of the app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Ensure a note is open and find the next instance of the term 'deadline' within the current note", "solution": "open_note_if_necessary()\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($next_matchhed_text)\n\ndef open_note_if_necessary():\n    if not is_note_open():\n        tap($open_note)\n        tap($open_note_title_list[0])\n\ndef is_note_open():\n    try:\n        get_attributes($note_content)\n        return True\n    except:\n        return False"}
{"task": "Customize the widget colors in the Notes app, starting from the home page and navigating to the settings.", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Ensure the widget setup interface is accessible and customize the widget colors in the Notes app", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Open the checklist containing the item 'Prepare Presentation' and show the content of the checklist item 'Prepare Presentation'.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Prepare Presentation')\nif notes:\n    tap(notes[0])\n    items = $checklist_item_list.match('Prepare Presentation')\n    if items:\n        tap(items[0])"}
{"task": "Open the app settings and enable the 'Make links and emails clickable' option.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'down')\nattrs = get_attributes($set_make_links_and_emails_clickable)\nif not attrs['checked']:\n    tap($set_make_links_and_emails_clickable)"}
{"task": "Open the app settings and disable the 'Make links and emails clickable' option.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'down')\nattrs = get_attributes($set_make_links_and_emails_clickable)\nif attrs['checked']:\n    tap($set_make_links_and_emails_clickable)"}
{"task": "Open the app settings and enable the 'Use monospace font' option.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nattrs = get_attributes($set_use_monospaced_font)\nif not attrs['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Open the more options for the current note from the home page.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match({'selected': true})\nif notes:\n    tap(notes[0])\ntap($more_options_note)"}
{"task": "Open the settings of the Notes app and navigate to TODO settings", "solution": "tap($settings)"}
{"task": "Open or create a new note if there is none, then open the more options menu for the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then add a new checklist item titled 'Call mom'", "solution": "if len($open_note_title_list.match({'selected': true})) > 0:\n    for note in $open_note_title_list:\n        tap(note)\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Call mom')\ntap($add_checklist_item_ok)"}
{"task": "Open the settings of the Notes app and customize the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure a note is open and close the search box in the current note", "solution": "if len($open_note_title_list.match({'selected': true})) > 0:\n    for note in $open_note_title_list:\n        tap(note)\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\ntap($close_search_box)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist by custom order", "solution": "def task0():\n    tap($open_note)\n    notes_titles = $open_note_title_list\n    if len(notes_titles) == 0:\n        tap($create_note)\n        tap($checklist_type)\n        set_text($add_note_title, 'New Checklist')\n        tap($add_note_ok)\n    else:\n        for idx in range(len(notes_titles)):\n            tap($open_note_title_list[idx])\n            if 'Checklist' in get_text($item_title):\n                break\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($custom_type)\n    tap($sort_checklist_items_ok)\n\ntask0()"}
{"task": "From the home page, open a note and then open the settings from the more options of the current note.", "solution": "def task1():\n    tap($open_note)\n    tap($open_note_title_list[0])\n    tap($more_options_note)\n    tap($settings)\n\ntask1()"}
{"task": "Open a checklist note or create one if there is none, then confirm the current checklist sorting type", "solution": "def task2():\n    tap($open_note)\n    notes_titles = $open_note_title_list\n    if len(notes_titles) == 0:\n        tap($create_note)\n        tap($checklist_type)\n        set_text($add_note_title, 'New Checklist')\n        tap($add_note_ok)\n    else:\n        tap($open_note_title_list[0])\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    back()\n\ntask2()"}
{"task": "Open the checklist containing the item 'Review Quarterly Report' and delete the checklist item 'Review Quarterly Report'", "solution": "def task3():\n    tap($open_note)\n    notes_titles = $open_note_title_list\n    for idx in range(len(notes_titles)):\n        tap($open_note_title_list[idx])\n        checklist_items = $checklist_item_list\n        for item_idx in range(len(checklist_items)):\n            if get_text($checklist_item_list[item_idx]) == 'Review Quarterly Report':\n                long_tap($checklist_item_list[item_idx])\n                tap($delete_selected_checklist_item)\n                return\n\ntask3()"}
{"task": "Open the app settings and customize the app colors", "solution": "def task4():\n    tap($settings)\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_custom)\n    tap($save_set_colors)\n    back()\ntask4()"}
{"task": "Navigate to settings and choose the White theme for the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)\nback()"}
{"task": "Starting from the home page, navigate to the settings of the Notes app.", "solution": "tap($settings)"}
{"task": "Open the Notes app, navigate to settings, and set the theme color of the app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure the note titled 'Travel Plans' exists and then create a shortcut for it.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Travel Plans')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($more_options_note)\ntap($create_shortcut)\n"}
{"task": "Open the settings of the Notes app and set the app icon color to blue", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\nset_text($set_app_icon_color, 'blue')\ntap($save_set_colors)"}
{"task": "Open the settings of the Notes app and set the theme color to auto light/dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)"}
{"task": "Ensure there is no existing note titled 'Grocery List' and then create a new note titled 'Grocery List'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Grocery List':\n        return\nback()\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Create at least three checklist items and then switch to the next item after viewing the second checklist item", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\n\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\n\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\n\nlong_tap($checklist_item[1])\ntap($move_selected_item_to_the_top)\ntap($switch_to_next_item)"}
{"task": "Ensure there is no checklist titled 'Weekend Tasks' and then create a new checklist note titled 'Weekend Tasks'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Weekend Tasks':\n        return\nback()\ntap($create_note)\nset_text($add_note_title, 'Weekend Tasks')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open a text note containing the word 'meeting' and search for the word 'meeting' within the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('meeting')\ntap(notes[0])\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Open a text note containing multiple occurrences of the word 'report' and find the previous occurrence of the word 'report' in the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('report')\ntap(notes[0])\ntap($search_within_note)\nset_text($search_text, 'report')\ntap($prev_matched_text)"}
{"task": "Open the current note and then tap 'Settings' after opening 'more options' in that note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "From the home page, navigate to the current checklist and open the more options.", "solution": "tap($switch_item)\ntap($more_options_checklist)"}
{"task": "Initiate a search within any note and then close the search box.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'example')\ntap($close_search_box)"}
{"task": "If a note with the title 'Meeting notes' already exists, rename the note title to something else, then create a new text note with the title 'Meeting notes'.", "solution": "tap($open_note)\nif any(get_text(note) == 'Meeting notes' for note in $open_note_title_list):\n    meeting_note = $open_note_title_list.match('Meeting notes')[0]\n    tap(meeting_note)\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Meeting notes')\n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'Meeting notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Change the text color of the app, which can be done directly in the settings.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\n# Assume the popup has multiple colors options which we can select\n# Typically there should be a way to match/color by text or index\n# Since it's not detailed, we'll assume an action to select a color, for example, `blue`\ntap($theme_color_custom)  # Assuming tapping custom to choose a specific color\n# action to choose blue color tap any other supported method to set specific color like input the hex color value\n# let's assume color blue is represented by an index in the list\ntap($color_blue)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings page and set the font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\nback()"}
{"task": "Set the background color of the Notes APP to blue directly from the settings.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Similar to task 1, select blue color\n# Assume there's an index for selecting blue color\ntap($theme_color_custom)  # Assuming tapping custom to choose specific color\ntap($custom_color_blue)\ntap($save_set_colors)\nback()"}
{"task": "If a note with the title 'Groceries List' already exists, rename the note title to something else, then create a new checklist note with the title 'Groceries List'", "solution": "tap($open_note)\nif any(get_text(note) == 'Groceries List' for note in $open_note_title_list):\n    groceries_note = $open_note_title_list.match('Groceries List')[0]\n    tap(groceries_note)\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Groceries List')\n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'Groceries List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Create the note titled 'Personal Diary' if it doesn't exist and then lock the note titled 'Personal Diary'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(note) == 'Personal Diary' for note in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Personal Diary')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Personal Diary')[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Create the note titled 'Recipes' if it doesn't exist, then open more options for the note titled 'Recipes'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(note) == 'Recipes' for note in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Recipes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Recipes')[0])\ntap($more_options_note)"}
{"task": "Create the checklist titled 'Daily Tasks' if it doesn't exist, then open more options for the checklist titled 'Daily Tasks'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(note) == 'Daily Tasks' for note in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Daily Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Daily Tasks')[0])\ntap($more_options_checklist)"}
{"task": "Open the settings of the app and set the text alignment in the Notes app", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Ensure no note with the title 'Personal Notes' exists, then open the more options for the current note and rename it to 'Personal Notes'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_with_title_personal_notes = note_titles.match('Personal Notes')\nfor note in note_with_title_personal_notes:\n    tap(note)\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Personal Notes')\ntap($rename_ok)"}
{"task": "Open the settings page and enable the incognito mode for keyboards.", "solution": "\ntap($settings)\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open the settings page and enable the option to wrap lines", "solution": "\ntap($settings)\ntap($set_enable_line_wrap)"}
{"task": "Open a checklist note or create one if there is none, then check all items listed in the current checklist", "solution": "\n# Open a checklist note or create one if there is none\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n\n# Check all items listed in the current checklist\nfor i in range(len($checklist_item_list)):\n    tap($checklist_item_list[i])"}
{"task": "Open the settings in the Notes app from the home page", "solution": "\ntap($settings)"}
{"task": "Open a checklist note or create one if there is none, then open more options of the current checklist", "solution": "\n# Open a checklist note or create one if there is none\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n\n# Open more options of the current checklist\ntap($more_options_checklist)"}
{"task": "Create multiple checklist items with varying titles if none exist, then sort the current checklist items by title", "solution": "# Task 0: Create multiple checklist items with varying titles if none exist, then sort the current checklist items by title\nnum_items = len($checklist_item_list)\nif num_items == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, \"Item 1\")\n    tap($add_checklist_item_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, \"Item 2\")\n    tap($add_checklist_item_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, \"Item 3\")\n    tap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "If a note titled 'Grocery List' already exists, rename it to something else. Then, create a new text note titled 'Grocery List'.", "solution": "# Task 1: If a note titled 'Grocery List' already exists, rename it to something else. Then, create a new text note titled 'Grocery List'.\ntap($open_note)\nopen_notes = $open_note_title_list\nfor idx in range(len(open_notes)):\n    if get_text(open_notes[idx]) == 'Grocery List':\n        tap(open_notes[idx])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Grocery List Old')\n        tap($rename_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "If a checklist titled 'Vacation Packing' already exists, rename it to something else. Then, create a new checklist note titled 'Vacation Packing'.", "solution": "# Task 2: If a checklist titled 'Vacation Packing' already exists, rename it to something else. Then, create a new checklist note titled 'Vacation Packing'.\ntap($open_note)\nopen_notes = $open_note_title_list\nfor idx in range(len(open_notes)):\n    if get_text(open_notes[idx]) == 'Vacation Packing':\n        tap(open_notes[idx])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Vacation Packing Old')\n        tap($rename_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Vacation Packing')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open any existing note or create a new note, then open more options for the current note.", "solution": "# Task 3: Open any existing note or create a new note, then open more options for the current note.\ntap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Ensure a checklist is currently open, then open the more options menu for the current checklist.", "solution": "# Task 4: Ensure a checklist is currently open, then open the more options menu for the current checklist.\ntap($open_note)\nfor idx in range(len($open_note_title_list)):\n    tap($open_note_title_list[idx])\n    if len($checklist_item_list) > 0:\n        tap($more_options_checklist)\n        break"}
{"task": "Switch to the previous item in the list from the home page", "solution": "tap($switch_to_prev_item)"}
{"task": "Starting from the home page, navigate to settings and uncheck the box for 'set place cursor to the end of note'", "solution": "tap($more_options_note);\ntap($settings);\nscroll($scroll_settings_page, 'down');\nif get_attributes($set_place_cursor_to_the_end_of_note)['checked']:\n    tap($set_place_cursor_to_the_end_of_note);\n"}
{"task": "Ensure the widget setup interface is accessible and customize the widget colors in the Notes APP", "solution": "tap($more_options_note);\ntap($settings);\nscroll($scroll_settings_page, 'down');\ntap($set_widget_colors);\n"}
{"task": "Make some color customization changes and then tap 'Save' button to save the customized app colors", "solution": "tap($more_options_note);\ntap($settings);\nscroll($scroll_settings_page, 'down');\ntap($set_colors);\ntap($set_theme_color);\ntap($theme_color_custom);\ntap($set_text_color);\nset_text($customize_text_color, '#FF0000');\ntap($set_background_color);\nset_text($customize_background_color, '#00FF00');\ntap($save_set_colors);\n"}
{"task": "Ensure a checklist is currently open, then open the more options menu for the current checklist.", "solution": "tap($more_options_checklist);\n"}
{"task": "Ensure a note is currently open and then go to the app settings from the more options menu of the current note", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Ensure a checklist is currently open and go to the app settings from the more options menu of the current checklist.", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Ensure an item is selected in the checklist, then rename the selected checklist item to 'Buy Groceries'", "solution": "long_tap($checklist_item_list.match({\"selected\": true})[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Buy Groceries')\ntap($rename_ok)"}
{"task": "If a note with the title 'Travel Itinerary' already exists, rename the existing note title to something else and then create a new note with the title 'Travel Itinerary'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Travel Itinerary')) > 0:\n    long_tap($open_note_title_list.match('Travel Itinerary')[0])\n    tap($rename_note)\n    set_text($rename_input, 'Old Travel Itinerary')\n    tap($rename_ok)\n    back() # returning from rename popup window if applicable\ntap($create_note)\nset_text($add_note_title, 'Travel Itinerary')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Ensure the checklist contains an item labeled 'Take out trash', then delete the checklist item labeled 'Take out trash'", "solution": "if len($checklist_item_list.match('Take out trash')) > 0:\n    long_tap($checklist_item_list.match('Take out trash')[0])\n    tap($delete_selected_checklist_item)"}
{"task": "Create checklist items titled 'Finish homework' and at least one item after it, then show the content of the checklist item after 'Finish homework'.", "solution": "tap($create_note)\ntap($checklist_type)\nset_text($add_note_title, 'My Checklist')\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Finish homework')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Another item')\ntap($add_checklist_item_ok)\ntap($checklist_item_list[1])\nget_text($checklist_item)"}
{"task": "Ensure the note titled 'Travel Plans' exists and then open it", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Travel Plans')\nif len(notes) == 0:\n    set_text($add_note_title, 'Travel Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])"}
{"task": "Open a checklist note or create one if there is none, then add a new checklist item titled 'Renew car insurance'", "solution": "tap($open_note)\nchecklists = $open_note_title_list.match({'text_note_type': 'checklist'})\nif len(checklists) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'New Checklist')\n    tap($add_note_ok)\nelse:\n    tap(checklists[0])\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Renew car insurance')\ntap($add_checklist_item_ok)"}
{"task": "Open any note and open the more options menu for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings of the Notes app and set the theme color to light mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)"}
{"task": "From the home page, navigate to the current checklist and open the settings from the more options.", "solution": "\ntap($more_options_checklist)\ntap($settings)\n"}
{"task": "Open the current checklist and tap 'Settings' after opening 'more options'", "solution": "\ntap($more_options_checklist)\ntap($settings)\n"}
{"task": "If a note with the title 'Shopping List' already exists, rename the existing note title to something else. Then, create a new note with the title 'Shopping List' and set it to be a checklist.", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Shopping List':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Shopping List')\n        tap($rename_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Shopping List')\nif not get_attributes($checklist_type)[\"selected\"]:\n    tap($checklist_type)\nif get_attributes($text_note_type)[\"selected\"]:\n    tap($text_note_type)\ntap($add_note_ok)\n"}
{"task": "Check existing note titles to ensure no naming conflicts, then select the 'text note' type when creating a new note.", "solution": "\ntap($open_note)\nnote_titles = $open_note_title_list\nexisting_titles = [get_text(note) for note in note_titles]\nback()\ntap($create_note)\nif 'New Note' in existing_titles:\n    set_text($add_note_title, 'New Note (1)')\nelse:\n    set_text($add_note_title, 'New Note')\nif not get_attributes($text_note_type)[\"selected\"]:\n    tap($text_note_type)\nif get_attributes($checklist_type)[\"selected\"]:\n    tap($checklist_type)\ntap($add_note_ok)\n"}
{"task": "Show the title of the current note from the home page.", "solution": "\nnote_title = get_text($item_title)\nprint(f'Current note title: {note_title}')\n"}
{"task": "Ensure the word 'important' is present in the note, then search for 'important' in the current note and highlight the first occurrence.", "solution": "if 'important' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' important')\ntap($search_within_note)\nset_text($search_text, 'important')\ntap($next_matchhed_text)"}
{"task": "Open any note or create a new note if none exist, then open more options in the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Ensure the word 'budget' is present in the note, then scroll to the next instance of 'budget' within the current note.", "solution": "if 'budget' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' budget')\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Set the alignment in the settings starting from the home page", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Open any existing note or create a new note, then lock the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then view 'About' information from the more options menu of the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'Dummy Checklist')\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($about)"}
{"task": "Ensure a checklist is open and then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'Dummy Checklist')\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the settings of the Notes app and use a monospaced font", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Open a checklist note or create one if there is none, then rename the current checklist to 'Grocery List'", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'Dummy Checklist')\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Ensure there is no note titled 'Shopping List' and then create a new note titled 'Shopping List'", "solution": "open_notes = $open_note_title_list.match('Shopping List')\nif len(open_notes) > 0:\n    for note in open_notes:\n        tap(note)\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($create_note)\ntap($text_note_type)\nset_text($add_note_title, 'Shopping List')\ntap($add_note_ok)"}
{"task": "Open the app settings and customize the colors of the app.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings menu", "solution": "tap($settings)"}
{"task": "Open the app settings and set the theme color of the app to Dark Red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open or create a new note if there is none, then save the current note colors", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open the app settings and set the theme color of the app to White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Change the text color in the notes app to black from settings or the text formatting menu", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_text_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Ensure the word 'expenses' is present in the note, then scroll to the previous instance of 'expenses' within the current note", "solution": "note_text = get_text($note_content)\nif 'expenses' in note_text:\n    tap($search_within_note)\n    set_text($search_text, 'expenses')\n    tap($prev_matched_text)"}
{"task": "Open multiple notes to facilitate navigation between them and then switch to the previous note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnum_notes = len(notes)\nif num_notes > 0:\n    for i in range(min(3, num_notes)):\n        tap(notes[i])\n        back()\ntap($switch_to_prev_item)"}
{"task": "Open any existing note or create a new note, then confirm deletion of the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open any note or create a new note if none exist, then open the more options of the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "If the note 'Workout Schedule' does not exist, create it. Then, open the note titled 'Workout Schedule'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Workout Schedule')\nif len(notes) == 0:\n     back()\n     tap($create_note)\n     set_text($add_note_title, 'Workout Schedule')\n     tap($text_note_type)\n     tap($add_note_ok)\ntap(notes[0])"}
{"task": "Open the settings of the Notes app and customize the widget colors", "solution": "tap($open_note)\nback()\ntap($switch_item)\ntap($open_note)\ntap($create_note)\ntap($settings)\ntap($set_widget_colors)"}
{"task": "Rename the checklist note to a temporary name and then tap on 'OK' to confirm the renaming action.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match({'selected': True})\nnote_index = notes[0] \nlong_tap(note_index)\ntap($rename_note)\nset_text($rename_input, 'Temporary Name')\ntap($rename_ok)"}
{"task": "Ensure there is no note titled 'Meeting Notes' and then create a new text note titled 'Meeting Notes'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Meeting Notes')\nif len(notes) != 0:\n     for note in notes:\n         long_tap(note)\n         tap($delete_note)\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then lock the current checklist.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match({'selected': True})\nif len(notes) == 0:\n     back()\n     tap($create_note)\n     set_text($add_note_title, 'New Checklist')\n     tap($checklist_type)\n     tap($add_note_ok)\ntap(notes[0])\ntap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Customize the colors of the app in the settings from the home page", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the app settings directly from the home page.", "solution": "tap($settings)"}
{"task": "Enable the 'Show word count' option in the settings from the home page", "solution": "tap($settings)\ntap($set_show_word_count)"}
{"task": "Change the font size to large.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "Open the settings page, customize the colors, and then close the popup window.", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "If a note with the title 'Project Ideas' already exists, rename the note title to something else. Then, create a new text note with the title 'Project Ideas'.", "solution": "\n# Check if the note with the title 'Project Ideas' exists\nnotes_list = $open_note_title_list\nfor i in range(len(notes_list)):\n    if get_text(notes_list[i]) == 'Project Ideas':\n        # Rename the note to something else\n        tap(notes_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Project Ideas')\n        tap($rename_ok)\n        back()\n        break\n# Create a new note with the title 'Project Ideas'\ntap($create_note)\nset_text($add_note_title, 'Project Ideas')\ntap($text_note_type)\ntap($add_note_ok)\n"}
{"task": "Open the current note, then return to the main screen and tap on 'more options' of the current note", "solution": "\ntap($open_note)\nback()\ntap($more_options_note)\n"}
{"task": "Open the more options menu for the current note from the home page.", "solution": "\ntap($open_note)\ntap($more_options_note)\n"}
{"task": "Ensure that there is at least one existing note, then open an existing note.", "solution": "\n# Ensure there is at least one existing note\nnotes_list = $open_note_title_list\nif len(notes_list) > 0:\n    tap(notes_list[0])\n"}
{"task": "Open the settings page and tap 'export notes'", "solution": "\ntap($settings)\ntap($export_notes)\n"}
{"task": "Insert links and emails inside the opened note to ensure they are present, then make them clickable.", "solution": "tap($note_content)\nset_text($note_content, 'You can reach me at example@example.com and visit https://example.com for more info.')\ntap($save_note)\ntap($more_options_note)\ntap($settings)\ntap($set_make_links_and_emails_clickable)\nback()"}
{"task": "If a note with the title 'Workout Routine' already exists, rename the note title to something else. Then, create a new note with the title 'Workout Routine'.", "solution": "tap($open_note)\nfor title in $open_note_title_list:\n    if get_text(title) == 'Workout Routine':\n        long_tap(title)\n        tap($rename_note)\n        set_text($rename_input, 'Old Workout Routine')\n        tap($rename_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Workout Routine')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Set the font size to 50% in the Notes app from the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)\nback()"}
{"task": "Show the information of the Notes app from the home page.", "solution": "tap($more_options_note)\ntap($about)"}
{"task": "If a note with the title 'Daily Journal' does not exist, create it. Then, open the note titled 'Daily Journal'.", "solution": "tap($open_note)\nfor title in $open_note_title_list:\n    if get_text(title) == 'Daily Journal':\n        tap(title)\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Daily Journal')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for title in $open_note_title_list:\n        if get_text(title) == 'Daily Journal':\n            tap(title)\n            break"}
{"task": "Ensure a note is open and then go to the previous occurrence of the word 'project' within the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'project')\ntap($prev_matched_text)"}
{"task": "From the settings, customize the colors of the Notes app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Starting from the home page, navigate to settings and check the box for 'show keyboard on startup'.", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Ensure a note is currently open, then open more options of the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure a note is currently open and then open the more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the current note and then open more options for it", "solution": "tap($open_note)\ntap($more_options_note)"}
{"task": "If a checklist titled 'Work Tasks' already exists, rename it to something else. Then, rename the current checklist to 'Work Tasks'.", "solution": "tap($open_note)\nall_titles = $open_note_title_list\nfor i in range(len(all_titles)):\n    if get_text(all_titles[i]) == 'Work Tasks':\n        tap(all_titles[i])\n        tap($more_options_checklist)\n        tap($rename_note)\n        set_text($rename_input, 'Other Tasks')\n        tap($rename_ok)\n        back()\n        break\ntap($open_note)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Work Tasks')\ntap($rename_ok)"}
{"task": "Open a note or create one if there is none, then add the text 'Call John at 5pm' to the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nset_text($note_content, 'Call John at 5pm')\ntap($save_note)"}
{"task": "Open the current checklist and then open more options for it", "solution": "tap($open_note)\ntap($more_options_checklist)"}
{"task": "Set the font size to 60% in the Notes app starting from the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Change the primary color of the app to red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom.match('Dark red')[0])\ntap($save_set_colors)"}
{"task": "Open the settings page and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Change the font size to 100% in the Notes APP settings, as font size adjustments can be made directly from the settings.", "solution": "tap($settings)\ntap($current_font_size)\ntap($font_size_100%)"}
{"task": "Open the settings page and set the font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)"}
{"task": "From the home page, create a new note and confirm its creation", "solution": "tap($create_note)\nset_text($add_note_title, 'New Note')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the settings menu and set the font size to 100%", "solution": "tap($settings);\ntap($set_font_size);\ntap($font_size_types.match({ 'selected': True }));\ntap($font_size_100%);"}
{"task": "Open the settings and uncheck the box for 'display save success messages'", "solution": "tap($settings);\ntap($set_display_save_success_messages);"}
{"task": "Open the settings menu from the home page", "solution": "tap($settings);"}
{"task": "Open the settings menu and set the font size to 125%", "solution": "tap($settings);\ntap($set_font_size);\ntap($font_size_types.match({ 'selected': True }));\ntap($font_size_125%);"}
{"task": "Sort the current checklist items by date created from the home page.", "solution": "tap($more_options_checklist);\ntap($sort_checklist_items);\ntap($date_created_type);\ntap($sort_checklist_items_ok);"}
{"task": "Starting from the home page, open the settings and uncheck the box for 'show keyboard on startup'.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif get_attributes($set_show_keyboard_on_startup)['checked']:\n    tap($set_show_keyboard_on_startup)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($settings)"}
{"task": "Starting from the home page, navigate to the settings and enable line wrap mode.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)"}
{"task": "From the home page, navigate to the settings page and customize the colors of the app.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)"}
{"task": "Navigate to the settings page and set the theme color of the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open a checklist and then access the app settings from the current checklist options", "solution": "tap($open_note)\n$open_note_title_list[0].tap()\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings of the Notes app and scroll through the settings page", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the app settings and set the theme color of the app to Black & White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Open the settings of the app and set the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open the settings of the Notes app to customize app colors.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings menu and show the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)\n"}
{"task": "Open the settings menu and enable the option to place the cursor at the end of the note", "solution": "tap($settings)\ntap($set_place_cursor_to_the_end_of_note) if not get_attributes($set_place_cursor_to_the_end_of_note)['checked'] else None\n"}
{"task": "Sort the current checklist items by custom from the home page.", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type) if not get_attributes($custom_type)['selected'] else None\ntap($sort_checklist_items_ok)\n"}
{"task": "Open the current note and set the theme to dark mode from note options", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark) if not get_attributes($theme_color_dark)['selected'] else None\n"}
{"task": "Open the settings menu and check the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)\n"}
{"task": "From the customize colors menu within the settings page, set the theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open any note and then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Align the notes to center by adjusting the text alignment directly from settings or the text formatting menu.", "solution": "tap($settings)\ntap($set_alignment)\n# Assuming no more actions needed to set the alignment to center"}
{"task": "From the theme color menu within the settings page, select the 'Black & White' theme", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)"}
{"task": "Customize the colors of the app directly from the settings", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Confirm the sort type of the current checklist from the home page.", "solution": "tap($switch_item)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_ok)"}
{"task": "Open the current note and set the theme to dark red mode from note options", "solution": "tap($switch_item)\ntap($more_options_note)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open the settings menu and enable line wrap in the notes app settings", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_enable_line_wrap)"}
{"task": "Open the settings page if it is not already open, then exit the settings page.", "solution": "if 'settings' not in get_attributes($settings):\n    tap($settings)\ntap($exit_settings)"}
{"task": "Open the current note and set theme to auto light/dark mode from note options", "solution": "tap($switch_item)\ntap($more_options_note)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)"}
{"task": "Open the app settings and set the theme color of the app to Custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)\n"}
{"task": "Open an existing checklist note or create a new one if necessary, then sort the items in the checklist by title.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Switch to the previous note.", "solution": "tap($switch_to_prev_item)\n"}
{"task": "Open a checklist note or create one if there is none, then sort the items in the checklist by date created", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open a checklist note or create one if there is none, then sort the checklist items by custom order.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Ensure there is no currently open checklist, then open a new note and set the type to checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    for i in range(len(notes)):\n        tap(notes[i])\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($create_note)\ntap($checklist_type)\ntap($add_note_ok)\n"}
{"task": "Create the note 'Books to Read' if it doesn't exist, then open the note titled 'Books to Read'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Books to Read' not in note_titles:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Books to Read')\n    tap($add_note_ok)\ntap(notes[note_titles.index('Books to Read')])\n"}
{"task": "Open a note to access more options for the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($more_options_note)\n"}
{"task": "Ensure there is no existing note titled 'Workout Plan', then add a new note and name it 'Workout Plan'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Workout Plan' not in note_titles:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Workout Plan')\n    tap($add_note_ok)\n"}
{"task": "Open any checklist note and then open the more options for the current checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    tap(notes[i])\n    if get_text($note_content).startswith('Checklist: '):\n        tap($more_options_checklist)\n        break\n"}
{"task": "Open the theme color settings in the Notes APP and apply the 'Auto light/dark' theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)"}
{"task": "Open the theme color settings in the app and set the theme color to dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist by title.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist note containing the item 'Buy Milk' and move the checklist item 'Buy Milk' to the top.", "solution": "tap($open_note)\nfor note in $open_note_title_list:\n    tap(note)\n    if any('Buy Milk' in get_text(item) for item in $checklist_item_list):\n        break\ntap($checklist_item_list.match('Buy Milk')[0])\nlong_tap($checklist_item_list.match('Buy Milk')[0])\ntap($move_selected_item_to_the_top)"}
{"task": "Set the font size to 125% in the Notes APP settings.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)\n"}
{"task": "Open the settings page and set the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)\n"}
{"task": "From the home page, select the text note type for the new note", "solution": "tap($create_note)\ntap($text_note_type)\n"}
{"task": "Adjust the font size to 150% from the settings.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\n"}
{"task": "Open a note if there is none or if no note is opened, then switch to the next note", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nif len(notes_list) == 0:\n    tap($create_note)\nelif not get_attributes($item_title)['selected']:\n    tap(notes_list[0])\nelse:\n    tap($switch_to_next_item)\n"}
{"task": "From the theme color menu, select the 'Custom' theme.", "solution": "tap($set_theme_color)\ntap($theme_color_types.match('Custom')[0])"}
{"task": "Create the note 'Project Plan' if it doesn't exist and then open the note 'Project Plan'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif not any([get_text(note) == 'Project Plan' for note in notes]):\n    tap($create_note)\n    set_text($add_note_title, 'Project Plan')\n    tap($add_note_ok)\nnote_to_open = [note for note in notes if get_text(note) == 'Project Plan'][0]\ntap(note_to_open)"}
{"task": "Set the theme of the Notes app to light", "solution": "tap($set_theme_color)\ntap($theme_color_types.match('light')[0])"}
{"task": "Create the note titled 'Meeting Notes' if it doesn't exist, then long tap to edit the note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif not any([get_text(note) == 'Meeting Notes' for note in notes]):\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($add_note_ok)\nnote_to_long_tap = [note for note in notes if get_text(note) == 'Meeting Notes'][0]\nlong_tap(note_to_long_tap)"}
{"task": "Navigate to the Notes APP settings and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('200%')[0])"}
{"task": "Open the settings of the app and set the text color", "solution": "tap($settings)\ntap($set_colors.match('Text color'))"}
{"task": "Open the settings of the Notes app to customize widget colors", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Open or create a new note if there is none, then print the current note.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($print_note)\nelse:\n    tap(open_notes[0])\n    tap($print_note)"}
{"task": "Open the settings of the Notes app and set the font size", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Open or create a new note if there is none, then delete the current note.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\nelse:\n    tap(open_notes[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Open the color customization in settings, then close the color settings popup.", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Create the note 'Daily Journal' if it doesn't exist and then open the note titled 'Daily Journal'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('Daily Journal')) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Daily Journal')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\nnotes = $open_note_title_list\nindex = next(i for i, item in enumerate(notes) if get_text(item) == 'Daily Journal')\ntap(notes[index])"}
{"task": "Create the note titled 'To-Do List' if it doesn't exist, then open the note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('To-Do List')) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'To-Do List')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note)\nnotes = $open_note_title_list\nindex = next(i for i, item in enumerate(notes) if get_text(item) == 'To-Do List')\ntap(notes[index])"}
{"task": "Open the color customization in settings and save the customized colors", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "From the settings, adjust the font size of the Notes APP.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)\ntap($font_size_150%)"}
{"task": "Open a text note or create one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:    tap($create_note)    tap($text_note_type)    tap($add_note_ok)else:    tap($open_note)    tap($open_note_title_list[0])tap($more_options_note)"}
{"task": "From the home page, open more options of the current note.", "solution": "tap($open_note)tap($open_note_title_list[0])tap($more_options_note)"}
{"task": "Open the settings of the notes app", "solution": "tap($more_options_note)tap($settings)"}
{"task": "Open the current checklist and set theme to light mode from checklist options", "solution": "tap($open_note)tap($open_note_title_list[0])tap($more_options_checklist)tap($settings)tap($set_colors)tap($set_theme_color)tap($theme_color_light)"}
{"task": "Open or create a checklist note, then access more options for the current checklist", "solution": "if len($open_note_title_list) == 0:    tap($create_note)    tap($checklist_type)    tap($add_note_ok)else:    tap($open_note)    tap($open_note_title_list[0])tap($more_options_checklist)"}
{"task": "From the home page, navigate to the settings page and set the app's font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\n"}
{"task": "Open the settings of the Notes app and set the text color to black", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\ntap($theme_color_black_white.match('Black'))\ntap($save_set_colors)\n"}
{"task": "Set the theme color to White directly from the theme color menu in the settings", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)\n"}
{"task": "Ensure a note is currently open and then lock the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)\n"}
{"task": "Ensure a checklist is currently open and then lock the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[1])\ntap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)\n"}
{"task": "Open the app settings and enable the 'Show word count' option.", "solution": "tap($settings)\nif get_attributes($set_show_word_count)[\"checked\"] == False:\n    tap($set_show_word_count)"}
{"task": "Open the current checklist and set theme to dark mode from checklist options.", "solution": "tap($open_note)\ntap($open_note_title_list.match({\"selected\": false})[0])\ntap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\ntap($exit_settings)\nback()"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist by date created.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(note_titles.match({\"selected\": false})[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the app settings and disable the 'Show word count' option.", "solution": "tap($settings)\nif get_attributes($set_show_word_count)[\"checked\"] == True:\n    tap($set_show_word_count)"}
{"task": "Open the checklist containing the item 'Shopping List' and rename the checklist item 'Shopping List' to 'Groceries List'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    tap(note_titles[i])\n    checklist_items = $checklist_item_list\n    if len(checklist_items.match('Shopping List')) > 0:\n        break\n    back()\nlong_tap($checklist_item.match('Shopping List')[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Groceries List')\ntap($rename_ok)"}
{"task": "Open the alignment settings in the Notes app and change the alignment settings", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Open the note titled 'Shopping List' and delete it.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Shopping List':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        break"}
{"task": "Initiate and confirm locking the note", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Shopping List':\n        tap($open_note_title_list[i])\n        break\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the set colors screen and customize colors in settings", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Create a note titled 'Shopping List' if it doesn't exist, then open the note titled 'Shopping List'", "solution": "tap($open_note)\nnote_exists = False\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Shopping List':\n        note_exists = True\n        tap($open_note_title_list[i])\n        break\nif not note_exists:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len($open_note_title_list)):\n        if get_text($open_note_title_list[i]) == 'Shopping List':\n            tap($open_note_title_list[i])\n            break"}
{"task": "Open a note or create one if there is none, then open more options for the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Scroll to switch to the previous item using the scrollbar", "solution": "scroll($switch_item, 'up')"}
{"task": "Tap the 'more options' button to archive the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Tap the 'switch to next item' button to view the next note in the list", "solution": "tap($switch_to_next_item)"}
{"task": "Open a checklist note containing the item 'Old Task' and delete the checklist item 'Old Task'.", "solution": "tap($open_note)\nfor note in $open_note_title_list:\n    tap(note)\n    if 'Old Task' in get_text($checklist_item_list):\n        for item in $checklist_item_list:\n            if 'Old Task' in get_text(item):\n                long_tap(item)\n                tap($delete_selected_checklist_item)\n                break\n        break"}
{"task": "Open a checklist note or create one if there is none, then open the more options of the current checklist.", "solution": "notes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Enable the show word count option from the settings.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_show_word_count)"}
{"task": "Starting from the home page, open the settings of the app.", "solution": "tap($settings)"}
{"task": "Enable the 'Make links and emails clickable' setting from the settings page, which can be accessed from the home page", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_make_links_and_emails_clickable)"}
{"task": "Write links and emails inside the opened note and make them clickable.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nset_text($note_content, 'Here are some links and emails: example@example.com and https://example.com')\ntap($save_note)\ntap($more_options_note)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Open the settings of the Notes APP.", "solution": "tap($open_note)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the settings of the Notes app and set the font size to 90%", "solution": "tap($open_note)\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text':'90%'}))\ntap($sort_checklist_items_ok)"}
{"task": "Show the checklist items in the current list starting from the home page.", "solution": "tap($open_note)\ntap($open_note_title_list[0]) # Assuming the checklist is the first note\n"}
{"task": "Open the settings of the Notes app and change the font size to 125%", "solution": "tap($open_note)\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text':'125%'}))\ntap($sort_checklist_items_ok)"}
{"task": "Set the font size to 100% in the Notes APP settings from the home page.", "solution": "tap($open_note)\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text':'100%'}))\ntap($sort_checklist_items_ok)"}
{"task": "If a checklist note titled 'To-Do List' already exists, rename it to something else, then add a new note with the title 'To-Do List' and set it to be a checklist.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'To-Do List':\n        long_tap(notes[i])\n        tap($rename_note)\n        set_text($rename_input, 'To-Do List_old')\n        tap($rename_ok)\n        break\ntap($add_note_ok)\ntap($create_note)\nset_text($add_note_title, 'To-Do List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "If a note titled 'Workout Plan' already exists, rename it to something else, then create a new note titled 'Workout Plan' and confirm.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Workout Plan':\n        long_tap(notes[i])\n        tap($rename_note)\n        set_text($rename_input, 'Workout Plan_old')\n        tap($rename_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Workout Plan')\ntap($add_note_ok)"}
{"task": "Ensure a note is currently open and then open more options of the current note", "solution": "tap($more_options_note)"}
{"task": "Start from the home page and open the first note in the list.", "solution": "tap($open_note)\ntap($open_note_title_list[0])"}
{"task": "Ensure a checklist is currently open, then open more options of the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Change the font size to 200% from the settings or relevant menu.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)\nback()"}
{"task": "Open the Notes app from the home page, navigate to the settings menu, and customize the app colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open settings of the Notes app.", "solution": "tap($settings)"}
{"task": "Navigate to the settings page and set the theme color of the Notes app to light.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)"}
{"task": "Navigate to the settings page from the home screen and enable the 'Use monospaced font' option.", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Open the settings of the Notes app to view the current font size setting", "solution": "tap($settings)\ncurrent_font_size = get_text($current_font_size)\nreturn current_font_size"}
{"task": "Show the content of the first checklist item from the home page.", "solution": "tap($checklist_item_list[0])\nreturn get_text($checklist_item)"}
{"task": "Assuming you are on the home page of the Notes APP, navigate to the settings and set the font size to 125%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings of the Notes app and then navigate to font size customization", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Open the settings of the app from the home page.", "solution": "tap($open_note)\ntap($settings)"}
{"task": "Open a checklist note if there is none opened, then open the checklist options.", "solution": "if not get_attributes($checklist_item_list)['exists']:\n    tap($open_note)\n    tap($open_note_title)\ntap($more_options_checklist)"}
{"task": "Open the app settings and change the font size to 125%.", "solution": "tap($open_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match('125%')[0])"}
{"task": "Before adding a new text note titled 'Daily Journal', check if a note with the same title already exists. If it does, rename the existing note to something different to avoid naming conflicts, and then proceed to add the new note with the title 'Daily Journal'.", "solution": "tap($open_note)\nnote_titles = [get_text(note) for note in $open_note_title_list]\nif 'Daily Journal' in note_titles:\n    idx = note_titles.index('Daily Journal')\n    tap($open_note_title_list[idx])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Note')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Daily Journal')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the current note, then open the settings from the 'more options' menu.", "solution": "tap($open_note)\ntap($open_note_title)\ntap($more_options_note)\ntap($settings)"}
{"task": "From the home page, create a new note", "solution": "tap($create_note)"}
{"task": "Navigate to the settings page from the home page and enable the 'Use Incognito mode of keyboards' setting.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "Ensure a note is open and then open more options for the current note", "solution": "tap($more_options_note)"}
{"task": "If a note titled 'Grocery List' already exists, rename it to something else before renaming the current note to 'Grocery List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    note = notes[i]\n    if get_text(note) == 'Grocery List':\n        tap(note)\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Title')\n        tap($rename_ok)\n        break\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Ensure a note is open and confirm the lock of the current note", "solution": "tap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings of the Notes app and set the background color of the app to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\ntap($set_background_color.match(\"White\"))\ntap($close_set_colors)"}
{"task": "Set the theme color to Black & White from the theme color menu within settings.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($close_set_colors)"}
{"task": "Ensure a note is currently open, then open the file of the current note", "solution": "tap($more_options_note)\ntap($open_file)"}
{"task": "Create the note titled 'Vacation Plans' if it doesn't exist, then edit it.", "solution": "tap($open_note)\nif len($open_note_title_list.match(\"Vacation Plans\")) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, \"Vacation Plans\")\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match(\"Vacation Plans\"))"}
{"task": "Create the note 'Shopping List' if it doesn't exist, then export the note 'Shopping List' as a file.", "solution": "tap($open_note)\nif len($open_note_title_list.match(\"Shopping List\")) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, \"Shopping List\")\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match(\"Shopping List\"))\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the Notes APP and show the content of the second checklist item.", "solution": "tap($open_note)\ntap($checklist_item_list[1])\nget_text($checklist_item_list[1])"}
{"task": "Open a note and search for the text 'meeting notes' within the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'meeting notes')"}
{"task": "Open the settings page and switch to using a monospaced font in the Notes app", "solution": "tap($settings)\nif not get_attributes($set_use_monospaced_font)['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Open the settings page and disable the use of a monospaced font in the Notes app.", "solution": "tap($settings)\nif get_attributes($set_use_monospaced_font)['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Open the settings page and enable the Incognito mode of keyboards in the Notes app", "solution": "tap($settings)\nif not get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open the settings from the home page", "solution": "tap($settings)"}
{"task": "Show the content of the third checklist item from the home page.", "solution": "tap($checklist_item_list[2])"}
{"task": "Open the settings page and disable the Incognito mode of keyboards in the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_use_incognito_mode_of_keyboards)\nback()"}
{"task": "Open the settings page in the Notes app and turn on the enable line wrap option.", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_enable_line_wrap)\nback()"}
{"task": "Open the settings of the app and set font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types[10])\nback()"}
{"task": "Open a checklist note if there is none opened, then sort the checklist by title.", "solution": "if get_text($item_title) != 'Checklist':\n    tap($open_note)\n    open_notes = $open_note_title_list\n    for idx in range(len(open_notes)):\n        tap(open_notes[idx])\n        if 'checklist' in get_text($item_title).lower():\n            break\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the app settings and change the font size to 150%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\nback()"}
{"task": "Open settings, then customize colors and set the theme color to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open a checklist note if there is none opened, then sort the checklist by date created", "solution": "if get_text($item_title) != 'Checklist':\n    tap($open_note)\n    open_notes = $open_note_title_list\n    for idx in range(len(open_notes)):\n        tap(open_notes[idx])\n        if 'checklist' in get_text($item_title).lower():\n            break\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a text note or create one if there is none, then open more options for the current note", "solution": "if get_text($item_title) == 'Note':\n    tap($open_note)\n    open_notes = $open_note_title_list\n    for idx in range(len(open_notes)):\n        tap(open_notes[idx])\n        if 'note' in get_text($item_title).lower():\n            break\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'Note')\n        tap($text_note_type)\n        tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Create the checklist note 'Daily Tasks' if it doesn't exist and export it as a file.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes.match('Daily Tasks')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Daily Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\n    back()\ntap(open_notes.match('Daily Tasks')[0])\ntap($more_options_checklist)\ntap($export_as_file)"}
{"task": "Set the theme color to Custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($close_set_colors)"}
{"task": "Set the font size to 50% within the font size settings page.", "solution": "tap($current_font_size)\ntap($font_size_50%)\ntap($close_set_colors)"}
{"task": "Create the note titled 'Meeting Minutes' if it doesn't exist, then print the note", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes.match('Meeting Minutes')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($text_note_type)\n    tap($add_note_ok)\n    back()\ntap(open_notes.match('Meeting Minutes')[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "Set the font size to 60% within the settings page of the Notes APP.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)\ntap($close_set_colors)"}
{"task": "Open the color customization settings in the Notes APP and customize the app colors", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)"}
{"task": "Open the set colors screen and then close the set colors popup window", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open the customize colors popup window, then close the customize colors popup window", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open a note or create one if there is none, then delete the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Initiate and confirm the deletion of the note.", "solution": "tap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings of the Notes APP on your smartphone and set the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('150%')[0])"}
{"task": "Set the font size to 150% in the Notes APP settings from the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('150%')[0])"}
{"task": "Navigate to the Notes APP settings and set the font size to 175%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('175%')[0])"}
{"task": "Create the note titled 'Holiday Plans' if it doesn\u2019t exist, then open the note titled 'Holiday Plans'", "solution": "tap($create_note)\nset_text($add_note_title, 'Holiday Plans')\ntap($text_note_type)\ntap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match('Holiday Plans')[0])"}
{"task": "Open the settings in the Notes APP and set the font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('175%')[0])"}
{"task": "Open a note if there is none opened, then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_titles[0])\ntap($more_options_note)"}
{"task": "Open a checklist note if there is none opened, then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_titles.match({'title_type': 'checklist'})[0])\ntap($more_options_checklist)"}
{"task": "Rename the current note to 'Meeting Notes' and then confirm the new name 'Meeting Notes' for the current note.", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open the current note and then open more options for that note in the Notes APP", "solution": "tap($open_note)\ntap($open_note_titles[0])\ntap($more_options_note)"}
{"task": "Open a note or create one if there is none, then save the current note", "solution": "tap($open_note)\ntap($open_note_titles[0])\ntap($save_note)"}
{"task": "Ensure there is no existing note with the title 'Meeting Agenda', then create a new note titled 'Meeting Agenda'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Meeting Agenda')) > 0:\n\tnote = $open_note_title_list.match('Meeting Agenda')[0]\n\tlong_tap(note)\n\ttap($delete_note)\n\ttap($delete_note_ok)\nelse:\n\tback()\ntap($create_note)\nset_text($add_note_title, 'Meeting Agenda')\ntap($text_note_type)  # Select note type if not already selected\ntap($add_note_ok)"}
{"task": "Ensure no existing note with the title 'Project Plan' before renaming the current note to 'Project Plan'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Project Plan')) > 0:\n\tnote = $open_note_title_list.match('Project Plan')[0]\n\tlong_tap(note)\n\ttap($delete_note)\n\ttap($delete_note_ok)\nelse:\n\tback()\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Project Plan')\ntap($rename_ok)"}
{"task": "Open the note in which 'Buy milk' is to be added as a checklist item or create one if there is none, then add a checklist item 'Buy milk' to the note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n\tfor note in notes:\n\t\tif 'Buy milk' in get_text(note):\n\t\t\ttap(note)\n\t\t\tbreak\nelse:\n\tback()\ttap($create_note)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($checklist_type)\n\ttap($add_note_ok)\n\t\nnote_selected = False\nif 'text_note_type' not in $note_content:\n\tif len($checklist_item_list) > 0:\n\t\tnote_selected = True\nif not note_selected:\n\tback()\ttap($create_note)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($checklist_type)\n\ttap($add_note_ok)\n\ttap($more_options_note)\n\ttap($rename_note)\n\tset_text($rename_input, 'Buy milk')\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy milk')\ntap($add_checklist_item_ok)"}
{"task": "Ensure the note 'Travel Itinerary' exists and create a shortcut for the note 'Travel Itinerary'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Travel Itinerary')) > 0:\n\ttravel_note = $open_note_title_list.match('Travel Itinerary')[0]\n\ttap(travel_note)\nelse:\n\tback()\ttap($create_note)\n\tset_text($add_note_title, 'Travel Itinerary')\n\ttap($text_note_type)\n\ttap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open a checklist note or create one if there is none, and sort the current checklist items by Custom", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n\tback()\t\n\ttap($create_note)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($checklist_type)\n\ttap($add_note_ok)\n\t\nelse:\n\tfor note in $open_note_title_list:\n\t\tif 'checklist' in get_text(note).lower():\n\t\t\ttap(note)\n\t\t\tbreak\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open or create a new note if there is none, then access more options for the current note", "solution": "\nif not len($open_note_title_list):\n    tap($create_note)\n    set_text($add_note_title, 'Untitled Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\n    tap($more_options_note)"}
{"task": "Create the checklist note 'Project Checklist' if it doesn't exist, then print the checklist 'Project Checklist'", "solution": "\nnote_exists = False\nfor note in $open_note_title_list:\n    if get_text(note) == 'Project Checklist':\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Project Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n\ntap($open_note_title_list.match('Project Checklist')[0])\ntap($more_options_checklist)\ntap($print_note)"}
{"task": "Create the note titled 'Meeting Minutes' if it doesn't exist, then open it and search for the phrase 'action items'", "solution": "\nnote_exists = False\nfor note in $open_note_title_list:\n    if get_text(note) == 'Meeting Minutes':\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($text_note_type)\n    tap($add_note_ok)\n\ntap($open_note_title_list.match('Meeting Minutes')[0])\ntap($search_within_note)\nset_text($search_text, 'action items')"}
{"task": "Ensure a note is open, then tap 'Settings' from 'more options' in the current note and check the 'Show word count' checkbox.", "solution": "\ntap($more_options_note)\ntap($settings)\ntap($set_show_word_count)\nback()"}
{"task": "Create the note 'Old Recipes' if it doesn't exist, then delete the note 'Old Recipes'", "solution": "\nnote_exists = False\nfor note in $open_note_title_list:\n    if get_text(note) == 'Old Recipes':\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Old Recipes')\n    tap($text_note_type)\n    tap($add_note_ok)\n\ntap($open_note_title_list.match('Old Recipes')[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($open_note)\ntap($settings)"}
{"task": "Ensure the search term 'birthday' exists in the note, then search for 'birthday' within the current note.", "solution": "tap($open_note)\nset_text($note_content, 'This note is about a birthday.')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'birthday')"}
{"task": "Open a note if there is none currently open, then open more options for the current note", "solution": "notes = $open_note_title_list\nif len(notes) == 0:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Note')\n\ttap($add_note_ok)\nelse:\n\ttap(notes[0])\ntap($more_options_note)"}
{"task": "Open the current checklist and then open the settings menu from the more options", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n\ttap($open_note_title_list[0])\nswitch_to_checklist = get_text($more_options_note)\nif 'more_options_checklist' in switch_to_checklist.lower():\n\ttap($more_options_checklist)\ntap($settings)"}
{"task": "Open a note or create one if there is none, then export the current note as a file", "solution": "notes = $open_note_title_list\nif len(notes) == 0:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Note')\n\tset_text($note_content, 'This note will be exported.')\n\ttap($add_note_ok)\nelsetap(notes[0])\ntap($more_options_note)\nif 'export as file' in get_text($more_options_note).lower():\n\ttap($export_as_file)"}
{"task": "Ensure a checklist is open, then tap 'Settings' from 'more options' and check the 'Show word count' checkbox", "solution": "if get_text($item_title) != 'Checklist':\n    tap($open_note)\n    if len($open_note_title_list) > 0:\n        tap($open_note_title_list[0])\n    tap($more_options_checklist)\ntap($settings)\ntap($set_show_word_count)"}
{"task": "Open any checklist note and then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open or create a new note if there is none, then save the current note without making any edits", "solution": "if get_text($item_title) == '':\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($save_note)"}
{"task": "Ensure a note titled 'Holiday plans' exists and then create a shortcut for it.", "solution": "note_found = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Holiday plans':\n        tap($open_note_title_list[i])\n        note_found = True\n        break\nif note_found:\n    tap($more_options_note)\n    tap($create_shortcut)"}
{"task": "Ensure a checklist named 'Shopping checklist' exists and create a shortcut for it.", "solution": "checklist_found = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Shopping checklist':\n        tap($open_note_title_list[i])\n        checklist_found = True\n        break\nif checklist_found:\n    tap($more_options_checklist)\n    tap($create_shortcut)"}
{"task": "Open or create a new note if there is none, then delete the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open a checklist and access more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list.match({'title': 'Checklist'})[0])\ntap($more_options_checklist)"}
{"task": "Create multiple checklist items and then sort the items of the current checklist by Custom", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "From the font size menu, set the font size to 50%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)\nback()"}
{"task": "Ensure a note titled 'Shopping List' exists and then open it.", "solution": "note_exists = False\ntap($open_note)\nfor note in $open_note_title_list:\n    if get_text(note) == 'Shopping List':\n        tap(note)\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Open or create a new note if there is none, and then search for the term 'birthday' within the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'birthday')"}
{"task": "Ensure a note titled 'Work project' exists and then lock it.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nwork_project_note = note_titles.match('Work project')\nif len(work_project_note) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Work project')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(work_project_note[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Create the note titled 'Travel Itinerary' if it doesn't exist, then open it and access more options after viewing it", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\ntravel_note = note_titles.match('Travel Itinerary')\nif len(travel_note) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(travel_note[0])\ntap($more_options_note)"}
{"task": "Open or create a new note if there is none, then rename the current note to 'Meeting Notes'", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open a checklist note or create one if there is none, then print the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    checklist_note = next((note for note in $open_note_title_list if get_text(note).lower().contains('checklist')), None)\n    if checklist_note:\n        tap(checklist_note)\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap(moment-by-checklist-element-indent=4$print_note)"}
{"task": "Open a checklist note or create one if there is none, then set theme to dark red mode from checklist options", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings page and customize the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure that a different note with the title 'Meeting Notes' does not already exist, and then rename the current note to 'Meeting Notes'", "solution": "def check_for_existing_note():\n    tap($open_note)\n    for i in range(len($open_note_title_list)):\n        if get_text($open_note_title_list[i]) == 'Meeting Notes':\n            return True\n    return False\n\nif not check_for_existing_note():\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Meeting Notes')\n    tap($rename_ok)"}
{"task": "Open a checklist note or create one if there is none, and set theme to auto light/dark mode from checklist options", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)\nback()"}
{"task": "Open the current checklist, return to the main screen, and tap on 'more options' of the checklist.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($switch_to_next_item)\ntap($switch_to_next_item)\ntap($more_options_checklist)"}
{"task": "Open any existing checklist or create a new checklist note and access more options for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Check then uncheck the 'Use monospaced font' checkbox after tapping 'Settings' from 'more options' in the current note", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_use_monospaced_font)\ntap($set_use_monospaced_font)\nback()"}
{"task": "From the home page, select the checklist note type for the new note", "solution": "tap($create_note)\ntap($checklist_type)"}
{"task": "If a note titled 'Team Meeting Notes' already exists, rename it to something else. Then rename the note about the meeting to 'Team Meeting Notes'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Team Meeting Notes':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Renamed Note')\n        tap($rename_ok)\n        break\n# Rename the intended meeting note\ntap($open_note)\nfor i in range(len(notes)):\n    if get_text(notes[i]).lower().count('meeting') > 0:\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Team Meeting Notes')\n        tap($rename_ok)\n        break"}
{"task": "If a note titled 'Grocery List' already exists, rename it to something else, then create a new text note titled 'Grocery List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Renamed Note')\n        tap($rename_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then confirm the sort type of the current checklist", "solution": "def task_0():\n\tif len($open_note_title_list) == 0:\n\t\ttap($create_note)\n\t\ttap($checklist_type)\n\t\ttap($add_note_ok)\n\telse:\n\t\ttap($open_note_title_list[0])\n\ttap($more_options_checklist)\n\ttap($sort_checklist_items)\n\ttap($sort_checklist_items_ok)\n\ttask_0()"}
{"task": "Open a note or create one if there is none, then open the settings page from the current note", "solution": "def task_1():\n\tif len($open_note_title_list) == 0:\n\t\ttap($create_note)\n\t\ttap($text_note_type)\n\t\ttap($add_note_ok)\n\telse:\n\t\ttap($open_note_title_list[0])\n\ttap($more_options_note)\n\ttap($settings)\n\ttask_1()"}
{"task": "Open the settings menu in the Notes app and enable 'Show a note picker on startup'", "solution": "def task_2():\n\ttap($settings)\n\ttap($set_show_a_note_picker_on_startup)\n\ttap($exit_settings)\n\ttask_2()"}
{"task": "Ensure a note is open and visible, then tap on 'Delete note' to delete the current note", "solution": "def task_3():\n\tif len($open_note_title_list) == 0:\n\t\ttap($create_note)\n\t\ttap($text_note_type)\n\t\ttap($add_note_ok)\n\telse:\n\t\ttap($open_note_title_list[0])\n\ttap($more_options_note)\n\ttap($delete_note)\n\ttap($delete_note_ok)\n\ttask_3()"}
{"task": "Ensure a note is open and visible, then open 'Settings' from the more options menu of the current note.", "solution": "def task_4():\n\tif len($open_note_title_list) == 0:\n\t\ttap($create_note)\n\t\ttap($text_note_type)\n\t\ttap($add_note_ok)\n\telse:\n\t\ttap($open_note_title_list[0])\n\ttap($more_options_note)\n\ttap($settings)\n\ttask_4()"}
{"task": "Rename the current checklist to 'Grocery List' and confirm the new name 'Grocery List'.", "solution": "tap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nnotes = $open_note_title\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the current checklist, sort the checklist items, and confirm by pressing OK", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_ok)"}
{"task": "From the home page, open the Notes app, navigate to the main screen, access the settings menu, and scroll through the settings.", "solution": "tap($open_note)\nback()\nback()\ntap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the settings page and enable display save success messages", "solution": "tap($settings)\nif not get_attributes($set_display_save_success_messages)['checked']:\n    tap($set_display_save_success_messages)"}
{"task": "Ensure a note is open and visible, then view 'About' information from the more options menu of the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($about)"}
{"task": "If a note with the title 'Meeting Notes' exists, rename it to a different title. Then, rename the current note to 'Meeting Notes'.", "solution": "tap($open_note)\nfor title in $open_note_title_list:\n    if get_text(title) == 'Meeting Notes':\n        tap(title)\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'New Title')\n        tap($rename_ok)\n        break\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open the set colors screen and save the colors", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Ensure the renaming action has been initiated and then tap on 'OK' to confirm renaming the current note.", "solution": "tap($rename_ok)"}
{"task": "Open the settings menu in the Notes app and enable 'Autosave Notes'.", "solution": "tap($settings)\ntap($set_autosave_notes)"}
{"task": "Tap 'Settings' from 'more options' in the current checklist, check the 'Use monospaced font' checkbox, then uncheck the 'Use monospaced font' checkbox.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_use_monospaced_font)\ntap($set_use_monospaced_font)\nback()"}
{"task": "Open any existing note or create a new note, tap on the 'Settings' button after opening 'more options' in the note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "If a checklist titled 'Weekly Grocery List' already exists, rename it to something else, then rename the checklist titled 'Grocery List' to 'Weekly Grocery List'.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    title = get_text(open_note_titles[i])\n    if title == 'Weekly Grocery List':\n        tap(open_note_titles[i])\n        tap($more_options_checklist)\n        tap($rename_note)\n        set_text($rename_input, 'Renamed Checklist')\n        tap($rename_ok)\n        break\ntap($open_note)\nfor i in range(len(open_note_titles)):\n    title = get_text(open_note_titles[i])\n    if title == 'Grocery List':\n        tap(open_note_titles[i])\n        tap($more_options_checklist)\n        tap($rename_note)\n        set_text($rename_input, 'Weekly Grocery List')\n        tap($rename_ok)\n        break"}
{"task": "Open the settings page and scroll down.", "solution": "tap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the note titled 'Personal Diary' and lock it", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    title = get_text(open_note_titles[i])\n    if title == 'Personal Diary':\n        tap(open_note_titles[i])\n        tap($more_options_note)\n        tap($lock_note)\n        tap($lock_note_ok)\n        break"}
{"task": "Open the current note and lock it", "solution": "tap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the current note and lock it.", "solution": "tap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a note if there is none opened, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($more_options_note)"}
{"task": "Open the settings menu and choose 'dark_red' theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)"}
{"task": "Open the current checklist and lock it", "solution": "tap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a note or create one if there is none, then tap 'Settings' from 'more options' in the current note to show the current font size.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Note')\n\ttap($text_note_type)\n\ttap($add_note_ok)\nelse:\n\ttap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($current_font_size)\n"}
{"task": "Open a checklist note or create one if there is none, then tap 'Settings' from 'more options' in the current checklist to show the current font size.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($checklist_type)\n\ttap($add_note_ok)\nelse:\n\tfor note in $open_note_title_list:\n\t\tif 'checklist' in get_text(note).lower():\n\t\t\ttap(note)\n\t\t\tbreak\n\ttap($open_note_title_list[0]) if len($open_note_title_list.match('checklist')) == 0 else None\ntap($more_options_checklist)\ntap($settings)\ntap($current_font_size)\n"}
{"task": "Open the note titled 'Old Recipe' to ensure it is accessible, then delete the note.", "solution": "tap($open_note)\nfor note in $open_note_title_list:\n\tif get_text(note) == 'Old Recipe':\n\t\ttap(note)\n\t\ttap($more_options_note)\n\t\ttap($delete_note)\n\t\ttap($delete_note_ok)\n\t\tbreak\n"}
{"task": "Open a note or create one if there is none, then search for the keyword 'meeting' within the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Note')\n\ttap($text_note_type)\n\ttap($add_note_ok)\nelse:\n\ttap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'meeting')\n"}
{"task": "Starting from the home page, navigate to settings and disable autosave notes", "solution": "tap($open_note)\nback() if len($open_note_title_list) > 0 else None\ntap($settings)\nif get_attributes($set_autosave_notes)['checked']:\n\ttap($set_autosave_notes)\n"}
{"task": "Open a note or create one if none exists, then disable the use of monospaced font in notes.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list[0])\nif get_attributes($set_use_monospaced_font)['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure a note is open and visible, then print the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "Open the current checklist and then open more options for it", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings page from the home screen and set the theme color to white.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Open a note and lock the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($more_option_note_buttons.match('lock note')[0])\ntap($lock_note_ok)"}
{"task": "Open a note to ensure there is an active note in the view, then delete the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($more_option_note_buttons.match('delete note')[0])\ntap($delete_note_ok)"}
{"task": "Open the settings menu and check the current font size in the app", "solution": "tap($more_options_note)\ntap($more_option_note_buttons.match('settings')[0])\ntap($current_font_size)\nget_text($font_size_types.match({'selected': True})[0])"}
{"task": "Open any checklist note and then open the more options in the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings of the Notes app to show information about the Notes app", "solution": "tap($more_options_note)\ntap($more_option_note_buttons.match('settings')[0])\ntap($settings.match('about')[0])"}
{"task": "Open the settings page and show the information of the app", "solution": "tap($settings)\ntap($about)"}
{"task": "Ensure the checklist 'Work Tasks' contains done items and then remove the done items from the checklist.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nwork_tasks = notes.match('Work Tasks')\nif len(work_tasks) > 0:\n    tap(work_tasks[0])\n    done_items = $checklist_item_list.match({'checked': True})\n    if len(done_items) > 0:\n        tap($more_options_checklist)\n        tap($remove_done_checklist_items)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Work Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings page and then exit it by tapping 'Back'.", "solution": "tap($settings)\ntap($exit_settings)"}
{"task": "Open a checklist note or create one if there is none, and then open more options for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    for i in range(len($open_note_title_list)):\n        tap($open_note_title_list[i])\n        if len($checklist_item_list) > 0:\n            break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the Notes APP, navigate to settings, and enable displaying save success messages", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_display_save_success_messages)"}
{"task": "Open any existing note or create a new note, then tap on the 'more options' button in the note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the note containing information about the app and find out more information from it", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if 'About' in get_text($open_note_title_list[i]):\n        tap($open_note_title_list[i])\n        break\ntap($more_options_note)\ntap($about)"}
{"task": "Open the checklist containing information about the app and find out more information from it.", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if 'About' in get_text($open_note_title_list[i]):\n        tap($open_note_title_list[i])\n        break\ntap($more_options_checklist)\ntap($about)"}
{"task": "Set the theme color to custom in the Notes app.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)"}
{"task": "Open a checklist note or create one if there is none, then open the settings page from the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0: \n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0: \n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Customize the colors of the app directly from the settings accessible from the home screen.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Starting from the home page, open settings.", "solution": "tap($settings)"}
{"task": "Ensure the note titled 'Passwords' exists and lock the note 'Passwords'.", "solution": "tap($open_note)\nmatched_notes = $open_note_title_list.match('Passwords')\nif len(matched_notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Passwords')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(matched_notes[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Ensure there are at least two notes present, then switch to the previous note.", "solution": "# Ensure there are at least two notes present\ntap($open_note)\nif len($open_note_title_list) < 2:\n    tap($create_note)\n    set_text($add_note_title, 'Note 1')\n    tap($add_note_ok)\n    tap($create_note)\n    set_text($add_note_title, 'Note 2')\n    tap($add_note_ok)\n    back()\nelse:\n    back()\n\ntap($switch_to_prev_item)"}
{"task": "Create at least one checklist item, then show the content of the first checklist item", "solution": "# Create at least one checklist item\nif len($checklist_item_list) == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Checklist Item 1')\n    tap($add_checklist_item_ok)\n\n# Show the content of the first checklist item\nlong_tap($checklist_item_list[0])"}
{"task": "Ensure there is more than one note present, then scroll to the next note in the list.", "solution": "# Ensure there is more than one note present\ntap($open_note)\nif len($open_note_title_list) <= 1:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\n    back()\nelse:\n    back()\n\n# Scroll to the next note in the list\ntap($switch_to_next_item)"}
{"task": "Create at least two checklist items and show the content of the second checklist item.", "solution": "# Create at least two checklist items\nif len($checklist_item_list) < 2:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Checklist Item 1')\n    tap($add_checklist_item_ok)\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Checklist Item 2')\n    tap($add_checklist_item_ok)\n\n# Show the content of the second checklist item\nif len($checklist_item_list) > 1:\n    long_tap($checklist_item_list[1])"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu for the current checklist", "solution": "# Open a checklist note or create one if there is none\ntap($open_note)\nnote_found = False\nfor note in range(len($open_note_title_list)):\n    tap($open_note_title_list[note])\n    if len($checklist_item_list) > 0:\n        note_found = True\n        break\n    back()\n\nif not note_found:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    back()\n\n# Open the more options menu for the current checklist\ntap($more_options_checklist)"}
{"task": "Ensure the note titled 'Budget Report' exists and contains an attached file, then open the attached file.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Budget Report' in note_titles:\n    idx = note_titles.index('Budget Report')\n    tap(notes[idx])\n    tap($more_options_note)\n    tap($open_file)"}
{"task": "Open the current note and search for the word 'meeting' within it", "solution": "tap($open_note)\nnotes = $open_note_title_list\ncurrent_note = notes[0]\ntap(current_note)\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Ensure the note titled 'Daily Journal' exists, then open more options for the note 'Daily Journal'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Daily Journal' in note_titles:\n    idx = note_titles.index('Daily Journal')\n    tap(notes[idx])\n    tap($more_options_note)"}
{"task": "Open the current note and edit the content to add 'Remember to buy milk' at the end", "solution": "tap($open_note)\nnotes = $open_note_title_list\ncurrent_note = notes[0]\ntap(current_note)\nset_text($note_content, get_text($note_content) + '\\nRemember to buy milk')\ntap($save_note)"}
{"task": "Open settings and set the font size to 150% in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\nfont_sizes = $font_size_types\nfor size in font_sizes:\n    if get_text(size) == '150%':\n        tap(size)\n        break\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist note containing the item 'Clean the kitchen' and rename the checklist item 'Clean the kitchen' to 'Clean the house'.", "solution": "tap($open_note)\nchecklists = $open_note_title_list.match(\"Checklist\")\nfor i in range(len(checklists)):\n    tap(checklists[i])\n    items = $checklist_item_list\n    for j in range(len(items)):\n        if get_text(items[j]) == 'Clean the kitchen':\n            long_tap(items[j])\n            tap($rename_selected_checklist_item)\n            set_text($rename_input, 'Clean the house')\n            tap($rename_ok)\n            back()\n    back()"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    checklists = $open_note_title_list.match(\"Checklist\")\n    if len(checklists) > 0:\n        tap(checklists[0])\n        tap($more_options_checklist)"}
{"task": "Open the settings menu in the Notes app and turn off the enable line wrap option.", "solution": "tap($settings)\nif get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)\nback()"}
{"task": "Open a checklist note containing the item 'Finish Assignment' and move the checklist item 'Finish Assignment' to the bottom.", "solution": "tap($open_note)\nchecklists = $open_note_title_list.match(\"Checklist\")\nfor i in range(len(checklists)):\n    tap(checklists[i])\n    items = $checklist_item_list\n    for j in range(len(items)):\n        if get_text(items[j]) == 'Finish Assignment':\n            long_tap(items[j])\n            tap($move_selected_item_to_the_buttom)\n            back()\n    back()"}
{"task": "Starting from the home page, open the settings menu in the Notes app", "solution": "tap($settings)"}
{"task": "Create at least three checklist items and then show the content of the third checklist item.", "solution": "tap($create_note)\nset_text($add_note_title, 'Checklist Note')\ntap($text_note_type)\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 4')\ntap($add_checklist_item_ok)\nget_text($checklist_item_list[2])"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)\nelse:\n    tap($open_note_title_list[0])\n    tap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then add a new checklist item titled 'Buy groceries'", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy groceries')\ntap($add_checklist_item_ok)"}
{"task": "Ensure a note is open and confirm deletion of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) != 0:\n    tap($open_note_title_list[0])\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Create a note titled 'Grocery List' if it doesn't exist, then open the note with the title 'Grocery List'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Grocery List')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])"}
{"task": "Open the settings page and set the app icon color to blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\nset_text($set_app_icon_color, 'blue')\ntap($save_set_colors)\nback()"}
{"task": "Open the current checklist and then go to the settings from the 'more options' menu", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open a checklist note or create one if there is none, then open more options of the current checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    if 'checklist' in get_text(notes[0]).lower():\n        tap(notes[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a text note or create one if there is none, then lock the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    if 'note' in get_text(notes[0]).lower():\n        tap(notes[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings page and change the theme color of the app to dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()"}
{"task": "Ensure a note is open and visible, then delete the current note", "solution": "tap($open_note)\ntap($open_note_title[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings page from the home screen and set the theme color to black and white.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "From the home page, open the app settings.", "solution": "tap($settings)"}
{"task": "Open the settings page from the home screen and customize the theme color.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the current note and create a shortcut for it", "solution": "tap($open_note)\ntap($open_note_title[0])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Ensure the checklist note has sorted items and confirm the sorting type of the current checklist", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the app settings from the home page", "solution": "tap($settings)"}
{"task": "From the font size menu, set the font size to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Assuming you are on the home page, navigate to the settings and show information about the Notes app.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($about)"}
{"task": "Open settings and set the font size to 175% in the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_font_size)\ntap($font_size_types.match(\"175%\"))\n"}
{"task": "Confirm the new note with the title 'Workout Routine'", "solution": "tap($create_note)\nset_text($add_note_title, 'Workout Routine')\ntap($add_note_ok)\n"}
{"task": "Open settings and set the font size to 200% in the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_font_size)\ntap($font_size_types.match(\"200%\"))\n"}
{"task": "Ensure the checklist titled 'To-Do List' exists and then open more options for the checklist 'To-Do List'", "solution": "tap($open_note)\ntap($open_note_title_list.match('To-Do List')[0])\ntap($more_options_checklist)\n"}
{"task": "From the home page, open the settings menu.", "solution": "tap($settings)\n"}
{"task": "Open a checklist or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "From the home page, tap on 'more options' to open additional settings.", "solution": "tap($more_options_checklist)"}
{"task": "Open the settings menu and show information about the app", "solution": "tap($settings)\ntap($about)"}
{"task": "Open the settings menu in the Notes app and turn on the display of save success messages", "solution": "tap($settings)\nif not get_attributes($set_display_save_success_messages)['checked']:\n    tap($set_display_save_success_messages)"}
{"task": "Open a checklist note or create one if none exists, then tap on 'Sort by' to sort the checklist items.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Create checklist items, mark them as done, and then remove the done items from the current checklist.", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($checklist_item_list.match({'text': 'Item 1'})[0])\ntap($checklist_item_list.match({'text': 'Item 2'})[0])\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Open a note and then open the more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a checklist and open the more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list.match({'checked': false})[0])\ntap($more_options_checklist)"}
{"task": "Create multiple checklist items and sort the items in the current checklist", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Task A')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Task B')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Task C')\ntap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_types.match({'text': 'Title'})[0])\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings of the Notes app and set the app icon color to green.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_custom.match({'text': 'Green'})[0])\ntap($save_set_colors)"}
{"task": "Open an existing checklist note or create a new one, then open more options for the current checklist.", "solution": "try:\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) > 0:\n        tap(notes[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        set_text($add_note_title, 'New Checklist')\n        tap($add_note_ok)\n    tap($more_options_checklist)\nexcept:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, 'New Checklist')\n    tap($add_note_ok)\n    tap($more_options_checklist)"}
{"task": "Open the settings menu and set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)"}
{"task": "Open the settings menu and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_90%)"}
{"task": "Open the current note and then open more options in that note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)"}
{"task": "Open the current checklist and then open more options", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_checklist)"}
{"task": "Verify that a note is currently open and set the place cursor to the end of the note", "solution": "if len($note_content) > 0:\n    tap($set_place_cursor_to_the_end_of_note)"}
{"task": "Open the settings menu and change the font size settings", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)\n# Choose a desired font size, let's say 125%\ntap($font_size_125%)\ntap($set_font_size_ok)"}
{"task": "Open the settings menu and show the current font size setting", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($current_font_size)\n# Assuming the current font size is highlighted or selected. We need to get text or attributes from here\ncurrent_font_size_element = $font_size_types.match({'selected': True})[0]\ncurrent_font_size_text = get_text(current_font_size_element)\nprint(current_font_size_text)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else, then open the Notes APP and create a new text note titled 'Grocery List'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles.match('Grocery List')) > 0:\n    tap(note_titles.match('Grocery List')[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Grocery List (Old)')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "If a note with the title 'Grocery List' exists, rename the note title to something else; then create a new note titled 'Grocery List'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles.match('Grocery List')) > 0:\n    tap(note_titles.match('Grocery List')[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Grocery List (Old)')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Create a note titled 'Work Tasks' if it doesn't already exist, then open it.", "solution": "def task_0():\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    titles = [get_text(title) for title in open_note_titles]\n    if 'Work Tasks' not in titles:\n        back()\n        tap($create_note)\n        set_text($add_note_title, 'Work Tasks')\n        tap($text_note_type)\n        tap($add_note_ok)\n        tap($save_note)\n    else:\n        for idx, title in enumerate(open_note_titles):\n            if get_text(title) == 'Work Tasks':\n                tap($open_note_title_list[idx])\n                break\ntask_0()"}
{"task": "Create checklist items, mark them as done, and then remove the done items from the current checklist", "solution": "def task_1():\n    tap($add_checklist_item)\n    elements = [$add_checklist_item, $add_checklist_item, $add_checklist_item]\n    titles = ['Item 1', 'Item 2', 'Item 3']\n    for _ in range(3):\n        set_text($add_checklist_item_title, titles[_])\n        tap($add_checklist_item_ok)\n    checklist_items = $checklist_item_list\n    for item in checklist_items:\n        tap(item)\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)\ntask_1()"}
{"task": "Set app font size to 150% from the settings accessible from the home screen", "solution": "def task_2():\n    tap($more_options_note)\n    tap($settings)\n    tap($set_font_size)\n    tap($font_size_150%)\n    tap($sort_checklist_items_ok)\n    if get_attributes($exit_settings)['scrollable']:\n        scroll($scroll_settings_page,'up')\n    back()\ntask_2()"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by title", "solution": "def task_3():\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    checklist_notes = []\n    for title in open_note_titles:\n        tap(title)\n        if $checklist_item_list in title:\n            checklist_notes.append(title)\n    if len(checklist_notes) == 0:\n        back()\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n        tap($save_note)\n    else:\n        tap(checklist_notes[0])\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($title_type)\n    tap($sort_checklist_items_ok)\ntask_3()"}
{"task": "Open a note or create one if there is none, then check more options for the current note in the Notes app", "solution": "def task_4():\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    if len(open_note_titles) == 0:\n        back()\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n        tap($save_note)\n    else:\n        open_note_titles = $open_note_title_list\n        tap(open_note_titles[0])\n    tap($more_options_note)\ntask_4()"}
{"task": "Open the Notes App from the home screen, go to settings, and set the app font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\n"}
{"task": "Open the settings menu", "solution": "tap($settings)\n"}
{"task": "From the home screen, navigate to the settings of the Notes APP and set the font size to 200%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)\n"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by date created", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open the settings menu and customize the app colors", "solution": "tap($settings)\ntap($set_colors)\n"}
{"task": "Open the settings menu and set the font size to 100%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)\n"}
{"task": "Ensure there is no existing note with the title 'Grocery List' and then create a new note titled 'Grocery List' and confirm", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        long_tap(notes[i])\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)\n"}
{"task": "Open the settings menu and set the font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)\n"}
{"task": "Open settings and disable line wrap", "solution": "tap($settings)\nif get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)\n"}
{"task": "Open settings in the Notes APP and set the alignment to center", "solution": "tap($settings)\ntap($set_alignment)\n# Assuming additional text or attribute selectors required for alignment option\n# Not explicitly mentioned in the provided UI elements\n# tap($alignment_center)\n"}
{"task": "Open a checklist in the Notes app or create one if there is none, then check more options for the current checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by custom order.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Set app font size to 250% from the settings accessible from the home screen.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\nback()"}
{"task": "Open the alignment settings in the Notes app and set the alignment to right", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Open the settings menu and set the text color to blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\n# Assuming there is an input or selector for the color blue which is not explicitly listed\ntap($save_set_colors)\nback()"}
{"task": "Open the settings menu and set the font size of the app to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('90%')[0])"}
{"task": "Open an existing note", "solution": "tap($open_note)"}
{"task": "Ensure no existing note has the title 'Meeting Notes' to prevent naming conflicts, then rename the current note to 'Meeting Notes'.", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Meeting Notes':\n        note_deleted = False\n        while note_deleted == False:\n            tap(note)\n            tap($more_options_note)\n            tap($delete_note)\n            tap($delete_note_ok)\n            note_deleted = True\n            tap($open_note)\n            notes = $open_note_title_list\n\n# Rename current note\nnote_title = get_text($item_title)\nif note_title != 'Meeting Notes':\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Meeting Notes')\n    tap($rename_ok)"}
{"task": "Open the settings menu in the Notes app and set the app font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('125%')[0])"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($more_options_note)"}
{"task": "Set app font size to 300% by accessing the settings from the home screen", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Open and then close the color settings popup", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open a checklist note or create one if there is none, then open more options in the current checklist", "solution": "try:\n    tap($open_note)\n    if len($open_note_title_list) > 0:\n        tap($open_note_title_list[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'My Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the color customization settings in the app and customize the colors of the notes app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a note or create one if there is none, then open settings from more options in the current note.", "solution": "try:\n    tap($open_note)\n    if len($open_note_title_list) > 0:\n        tap($open_note_title_list[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'My Note')\n        tap($text_note_type)\n        tap($add_note_ok)\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'My Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Ensure a note is open and visible, then delete the current note.", "solution": "if get_text($item_title) != '':\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Open the current checklist containing 'Finish Homework' and delete the selected checklist item 'Finish Homework'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if 'Finish Homework' in get_text(open_note_titles[i]):\n        tap(open_note_titles[i])\n        break\nchecklist_item = $checklist_item_list.match('Finish Homework')[0]\nlong_tap(checklist_item)\ntap($delete_selected_checklist_item)"}
{"task": "Open the settings menu in the Notes app and turn off the display of save success messages", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\nattrs = get_attributes($set_display_save_success_messages)\nif attrs['checked']:\n    tap($set_display_save_success_messages)\nback()"}
{"task": "Ensure a checklist is open and visible, then delete the current checklist.", "solution": "tap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Create the note titled 'Grocery List' if it doesn't exist, then open the note titled 'Grocery List'.", "solution": "note_exists = False\ntap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Grocery List':\n        note_exists = True\n        tap(open_note_titles[i])\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($add_note_ok)\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    for i in range(len(open_note_titles)):\n        if get_text(open_note_titles[i]) == 'Grocery List':\n            tap(open_note_titles[i])\n            break"}
{"task": "If a checklist note with the title 'Daily Workout Routine' already exists, rename the checklist title to something else. Then, open the Notes APP and create a new checklist note for 'Daily Workout Routine'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Daily Workout Routine')) > 0:\n    long_tap($open_note_title_list.match('Daily Workout Routine')[0])\n    tap($rename_note)\n    set_text($rename_input, 'Old Daily Workout Routine')\n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'Daily Workout Routine')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "If a note with the title 'Updated Project Ideas' already exists, rename that note to something else. Then, open the Notes APP, access the more options of the note titled 'Project Ideas', and rename it to 'Updated Project Ideas'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Updated Project Ideas')) > 0:\n    long_tap($open_note_title_list.match('Updated Project Ideas')[0])\n    tap($rename_note)\n    set_text($rename_input, 'Old Updated Project Ideas')\n    tap($rename_ok)\ntap($open_note_title_list.match('Project Ideas')[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Updated Project Ideas')\ntap($rename_ok)"}
{"task": "Ensure the note titled 'Project Ideas' exists; if not, create it. Then, open the note titled 'Project Ideas'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Project Ideas')) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Project Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match('Project Ideas')[0])"}
{"task": "If the note titled 'Meeting Agenda' does not exist, create it. Then, open the Notes APP and create a shortcut for the note titled 'Meeting Agenda'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Meeting Agenda')) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Agenda')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match('Meeting Agenda')[0])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "If a note with the title 'Meeting Notes' exists, rename it to a different title. Then, rename the current note to 'Meeting Notes'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Meeting Notes')) > 0:\n    long_tap($open_note_title_list.match('Meeting Notes')[0])\n    tap($rename_note)\n    set_text($rename_input, 'Old Meeting Notes')\n    tap($rename_ok)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open the settings of the Notes app to customize the theme color", "solution": "tap($more_options_note['main'])\ntap($settings)\ntap($set_colors)\n"}
{"task": "Open the settings of the Notes app and increase the font size to 150%", "solution": "tap($more_options_note['main'])\ntap($settings)\ntap($set_font_size)\ntap($font_size_150%)\n"}
{"task": "Open or create a new note if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\n"}
{"task": "Open or create a new note if there is none, then delete the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)\n"}
{"task": "From the settings, check the current font size.", "solution": "tap($more_options_note['main'])\ntap($settings)\ntap($current_font_size['label'])\nfont_size = get_text($font_size_types.match({'selected':True}))\nfont_size\n"}
{"task": "Ensure a note is open, then tap on the 'Search' button within the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title[0])\ntap($search_within_note)"}
{"task": "Ensure a note is open and tap on the 'More options' button to view more options for the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title[0])\ntap($more_options_note)"}
{"task": "Open any note or create a new note if none exist, then search the current note for the text 'meeting agenda'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'meeting agenda')"}
{"task": "Open any note or create a new note if none exist, then edit and save the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($note_content)\nset_text($note_content, 'Edited content')\ntap($save_note)"}
{"task": "Open any note or create a new note if none exist, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then sort the items of the current checklist by Custom", "solution": "try:\n    tap($open_note)\n    checklist_note = $open_note_title_list.match({'type': 'checklist'})\n    if len(checklist_note) > 0:\n        tap(checklist_note[0])\n    else:\n        raise Exception('No checklist notes found')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n\ntry:\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($custom_type)\n    tap($sort_checklist_items_ok)\nexcept Exception as e:\n    print(f'An error occurred: {e}')"}
{"task": "Open the settings menu in the Notes app and scroll through the settings page", "solution": "tap($settings)\nwhile True:\n    try:\n        scroll($scroll_settings_page, 'down')\n    except:\n        break\nback()"}
{"task": "Open the settings page and enable auto light/dark theme for the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)\nback()"}
{"task": "Open a checklist note or create one if there is none, then confirm the sort type of the current checklist", "solution": "try:\n    tap($open_note)\n    checklist_note = $open_note_title_list.match({'type': 'checklist'})\n    if len(checklist_note) > 0:\n        tap(checklist_note[0])\n    else:\n        raise Exception('No checklist notes found')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n\ntry:\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($sort_checklist_items_ok)\nexcept Exception as e:\n    print(f'An error occurred: {e}')"}
{"task": "Open the settings page and set the theme color to light", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)\nback()"}
{"task": "Show the current font size of the Notes APP from the application settings", "solution": "tap($settings)\ntap($current_font_size)\nfont_size_text = get_text($current_font_size)\nback()\nfont_size_text"}
{"task": "Open a checklist note or create one if there is none, then access more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($back)\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then show me the options for sorting the current checklist items", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($back)\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($back)\n    tap($create_note)\n    set_text($add_note_title, 'New Text Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Create multiple checklist items and then open the sort options to sort the checklist by date created", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($back)\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nfor item in ['item 1', 'item 2', 'item 3']:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, item)\n    tap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Open the note titled 'Project Ideas' to ensure it is active and then save it.", "solution": "tap($open_note)\nopen_note_titles_list = $open_note_title_list\nproject_ideas_note = open_note_titles_list.match('Project Ideas')[0]\ntap(project_ideas_note)\ntap($save_note)"}
{"task": "Open the settings menu in the Notes app and set the app's theme to auto light/dark.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntheme_color_options = $theme_color_types\nauto_light_dark_option = theme_color_options.match('Auto light / dark')[0]\ntap(auto_light_dark_option)"}
{"task": "From the home page, directly navigate to the app settings.", "solution": "tap($settings)"}
{"task": "Open the note titled 'Vacation Plans' and edit its content to include 'Visit Eiffel Tower'", "solution": "tap($open_note)\nopen_note_titles_list = $open_note_title_list\nvacation_plans_note = open_note_titles_list.match('Vacation Plans')[0]\ntap(vacation_plans_note)\nset_text($note_content, 'Visit Eiffel Tower')\ntap($save_note)"}
{"task": "Open the checklist containing the item 'Call Doctor' and check the status of the checklist item 'Call Doctor'", "solution": "tap($open_note)\nopen_note_titles_list = $open_note_title_list\nchecklist_with_call_doctor = open_note_titles_list.match('Checklist')[0]\ntap(checklist_with_call_doctor)\ncall_doctor_item = $checklist_item_list.match('Call Doctor')[0]\nstatus = get_attributes(call_doctor_item)['checked']"}
{"task": "Open a text note or create one if there is none, then scroll to the next instance of the word 'milestone' within the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0: \n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($search_within_note)\nset_text($search_text, 'milestone')\ntap($next_matchhed_text)"}
{"task": "Open the settings page and enable automatic backups", "solution": "tap($settings)\nif not get_attributes($set_enable_automatic_backups)['checked']:\n    tap($set_enable_automatic_backups)"}
{"task": "Open a text note or create one if there is none, then delete the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0: \n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings page and export notes", "solution": "tap($settings)\ntap($export_notes)"}
{"task": "Open a checklist note containing the item 'Email Client' and move the checklist item 'Email Client' to the bottom.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    checklist_found = False\n    for idx, note in enumerate(notes):\n        tap(note)\n        checklist_items = $checklist_item_list\n        if len(checklist_items.match('Email Client')) > 0:\n            checklist_found = True\n            break\n        tap($open_note)\n    if not checklist_found:\n        raise Exception('Checklist with the item Email Client not found')\nlong_tap(checklist_items.match('Email Client')[0])\ntap($move_selected_item_to_the_buttom)"}
{"task": "Open the settings of the Notes app from the home page.", "solution": "tap($open_note)\ntap($more_options_note)\ntap($settings)"}
{"task": "If a note with the title 'Project Meeting Notes' already exists, rename the existing note to something else. Then, rename the note titled 'Meeting Notes' to 'Project Meeting Notes'.", "solution": "\ntap($open_note)\nnotes = $open_note_title_list.match('Project Meeting Notes')\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Project Meeting Notes Renamed')\n    tap($rename_ok)\nnote_to_rename = $open_note_title_list.match('Meeting Notes')\nif len(note_to_rename) > 0:\n    tap(note_to_rename[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Project Meeting Notes')\n    tap($rename_ok)\nback()"}
{"task": "Create the note 'Grocery List' if it doesn't exist, and then create a shortcut for the note 'Grocery List'.", "solution": "\ntap($open_note)\ngrocery_notes = $open_note_title_list.match('Grocery List')\nif len(grocery_notes) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match({'title': 'Grocery List'})[0])\ntap($more_options_note)\ntap($create_shortcut)\nback()"}
{"task": "Verify that a checklist is currently open, then sort the current checklist by Date Created and confirm.", "solution": "\ntap($open_note_title_list.match({'selected': true})[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)\nback()"}
{"task": "Create the checklist 'Weekend Tasks' if it doesn't exist, then lock it.", "solution": "\ntap($open_note)\nweekend_tasks = $open_note_title_list.match('Weekend Tasks')\nif len(weekend_tasks) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Weekend Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match({'title': 'Weekend Tasks'})[0])\ntap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)\nback()"}
{"task": "Open the note titled 'Weekly Report' and access more options", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nfor i in range(len(notes_list)):\n    if get_text(notes_list[i]) == 'Weekly Report':\n        tap(notes_list[i])\n        break\ntap($more_options_note)"}
{"task": "Open a checklist note titled 'Grocery List' or create one if none exists, add 'Buy Milk' item to the checklist, and then delete the selected item 'Buy Milk' from the checklist.", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nfound = False\nfor i in range(len(notes_list)):\n    if get_text(notes_list[i]) == 'Grocery List':\n        tap(notes_list[i])\n        found = True\n        break\nif not found:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy Milk')\ntap($add_checklist_item_ok)\nchecklist_items = $checklist_item_list\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Buy Milk':\n        long_tap(checklist_items[i])\n        tap($delete_selected_checklist_item)\n        break"}
{"task": "Open a note or create one if none exists, include the word 'meeting' inside, and then search the word 'meeting' within the current note.", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nif len(notes_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes_list[0])\nset_text($note_content, 'This is a note containing the word meeting.')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Open settings and activate Incognito mode for keyboards", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nwhile not get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "If a note with the title 'Shopping List' exists, rename it to a different title. Then rename the current note to 'Shopping List'.", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nfor i in range(len(notes_list)):\n    if get_text(notes_list[i]) == 'Shopping List':\n        tap(notes_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Shopping List')\n        tap($rename_ok)\n        break\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Shopping List')\ntap($rename_ok)"}
{"task": "Create the note 'Ideas for Blog' if it doesn't exist, then open the file of the note 'Ideas for Blog'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Ideas for Blog')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Ideas for Blog')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\n\nwhile len($more_options_note.match({\"selected\": true})) == 0:\n    tap($switch_to_next_item)\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open the 'Meeting Notes' note from the home page", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Meeting Notes')\nif len(notes) > 0:\n    tap(notes[0])"}
{"task": "Open a note or create one if there is none, then add the text 'Discuss Q4 targets' to the current note.", "solution": "tap($switch_item)\nif len($note_content) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($note_content)\nset_text($note_content, 'Discuss Q4 targets')\ntap($save_note)"}
{"task": "Verify that a checklist is currently open, and then open the more options menu for the current checklist.", "solution": "if len($checklist_item_list) > 0:\n    tap($more_options_checklist)"}
{"task": "Verify that a checklist is currently open, then sort the current checklist by Custom and confirm.", "solution": "if len($checklist_item_list) > 0:\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($custom_type)\n    tap($sort_checklist_items_ok)"}
{"task": "Open the settings menu and set the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open the settings menu and set the theme color to auto light/dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\nif not get_attributes($theme_color_auto_light_dark)['selected']:\n    tap($theme_color_auto_light_dark)\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one if none exists, then sort the items of the current checklist by date created.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist note or create one if none exists, then delete the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title[0])\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Create the checklist note 'Travel Packing List' if it doesn't exist, then open the Notes APP, access the more options of the checklist titled 'Travel Packing List', and create a shortcut for it.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Travel Packing List')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Packing List')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note_title_list.match('Travel Packing List')[0])\ntap(notes[0])\ntap($more_options_checklist)\ntap($create_shortcut)"}
{"task": "Open a checklist note or create one if none exists, then tap on the 'more options' button in the checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Set show keyboard on startup from the home page", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)\nback()"}
{"task": "Set show a note picker on startup from the home page", "solution": "tap($settings)\ntap($set_show_a_note_picker_on_startup)\nback()"}
{"task": "Verify that a note is currently open and then show me the title of the current note.", "solution": "title = get_text($item_title)\nprint(title)"}
{"task": "Open the settings menu and set the theme color to light", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\nclose_set_colors()"}
{"task": "Open a note or create one if there is none, then open the more options menu for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Go to the settings menu directly from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Set the font size to 60% by accessing the settings directly from the home screen", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open the settings menu and set the font size of the app to 100%", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "Ensure a checklist is open and visible, then open more options for the current checklist", "solution": "if len($checklist_item_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open color settings and save the current color settings in the notes app", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open the settings menu and change the background color to yellow.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Assuming there's a way to set the color to yellow during this step\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one if there is none, then open settings from more options in the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings menu in the Notes app and turn on autosave for notes", "solution": "tap($settings)\ntap($set_autosave_notes)\nif not get_attributes($set_autosave_notes)['checked']:\n    tap($set_autosave_notes)"}
{"task": "Customize app colors directly from the settings accessible from the home screen", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open settings and set the alignment to left in the app", "solution": "tap($settings)\ntap($set_alignment)\ntap($alignment_left)"}
{"task": "Set the font size to 75% from the settings, accessible from the home screen.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)"}
{"task": "Ensure the note titled 'Grocery List' exists; if not, create it, then open the note titled 'Grocery List' and save it after making changes to the content", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Grocery List' not in note_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\ngrocery_note_idx = note_titles.index('Grocery List')\ntap(notes[grocery_note_idx])\nset_text($note_content, get_text($note_content) + ' Updated')\ntap($save_note)"}
{"task": "From the home screen, access the Notes APP settings and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_90%)"}
{"task": "Ensure a note is open and visible, then search for the word 'deadline' within the current note", "solution": "tap($search_within_note)\nset_text($search_text, 'deadline')"}
{"task": "If a note with the title 'Meeting Notes' already exists, rename the existing note to something else before renaming the current note to 'Meeting Notes'.", "solution": "\n# Task 0: If a note with the title 'Meeting Notes' already exists, rename the existing note to something else before renaming the current note to 'Meeting Notes'.\n\ndef task_0():\n    tap($open_note)\n    notes = $open_note_title_list.match({\"selected\": false})\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Meeting Notes':\n            tap(notes[i])\n            tap($more_options_note)\n            tap($rename_note)\n            set_text($rename_input, 'Meeting Notes Old')\n            tap($rename_ok)\n            break\n    \n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Meeting Notes')\n    tap($rename_ok)\n\ntask_0()\n"}
{"task": "Export current notes from the home page", "solution": "\n# Task 1: Export current notes from the home page\n\ndef task_1():\n    tap($more_options_note)\n    tap($settings)\n    tap($export_notes)\n\ntask_1()\n"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "\n# Task 2: Open a checklist note or create one if there is none, then open more options for the current checklist\n\ndef task_2():\n    tap($open_note)\n    notes = $open_note_title_list.match({\"selected\": false})\n    if len(notes) > 0:\n        for i in range(len(notes)):\n            tap(notes[i])\n            # Assuming that if note has create_note option in popup, it's not a checklist\n            if len($more_options_checklist) > 0:\n                break\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\n\ntask_2()\n"}
{"task": "If a checklist note with the title 'Grocery List' already exists, rename the existing note title to something else. Then, rename the current checklist to 'Grocery List'.", "solution": "\n# Task 3: If a checklist note with the title 'Grocery List' already exists, rename the existing note title to something else. Then, rename the current checklist to 'Grocery List'.\n\ndef task_3():\n    tap($open_note)\n    notes = $open_note_title_list.match({\"selected\": false})\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Grocery List':\n            tap(notes[i])\n            tap($more_options_checklist)\n            tap($rename_note)\n            set_text($rename_input, 'Grocery List Old')\n            tap($rename_ok)\n            break\n    \n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Grocery List')\n    tap($rename_ok)\n\ntask_3()\n"}
{"task": "Create the note titled 'Shopping List' if it doesn't exist, then open it.", "solution": "\n# Task 4: Create the note titled 'Shopping List' if it doesn't exist, then open it.\n\ndef task_4():\n    tap($open_note)\n    notes = $open_note_title_list.match({\"selected\": false})\n    shopping_list_exists = False\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Shopping List':\n            tap(notes[i])\n            shopping_list_exists = True\n            break\n    \n    if not shopping_list_exists:\n        tap($create_note)\n        set_text($add_note_title, 'Shopping List')\n        tap($text_note_type)\n        tap($add_note_ok)\n\ntask_4()\n"}
{"task": "Open the note titled 'Daily Journal' and save it.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor idx in range(len(note_titles)):\n    if get_text(note_titles[idx]) == 'Daily Journal':\n        tap(note_titles[idx])\n        tap($save_note)\n        break"}
{"task": "Tap on the 'Customize colors' button to open color customization settings.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure the item 'Milk' exists in the checklist of the note titled 'Grocery List' and delete it if it is present.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor idx in range(len(note_titles)):\n    if get_text(note_titles[idx]) == 'Grocery List':\n        tap(note_titles[idx])\n        checklist_items = $checklist_item_list\n        for item_idx in range(len(checklist_items)):\n            if get_text(checklist_items.match('Milk')[0]) == 'Milk':\n                long_tap(checklist_items.match('Milk')[0])\n                tap($delete_selected_checklist_item)\n        break"}
{"task": "First, check if a note titled 'Meeting Notes' already exists. If it does, rename it to something else. Then, rename the current note to 'Meeting Notes'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nmeeting_note_exists = False\nfor idx in range(len(note_titles)):\n    if get_text(note_titles[idx]) == 'Meeting Notes':\n        meeting_note_exists = True\n        tap(note_titles[idx])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Meeting Notes')\n        tap($rename_ok)\n        break\nif meeting_note_exists:\n    tap($open_note_title_list.match({'selected': true})[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open any note or create a new note if none exist, then edit the content and save the current note", "solution": "tap($open_note)\nopen_titles = $open_note_title_list\nif len(open_titles) > 0:\n    tap(open_titles[0])\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nset_text($note_content, 'This is the new content.')\ntap($save_note)"}
{"task": "Open the current note and then open the more options menu of that note", "solution": "tap($open_note)\ntap($more_options_note)"}
{"task": "Open the settings page and import notes", "solution": "tap($settings)\ntap($import_notes)"}
{"task": "Open a text note or create one if there is none, then scroll to the previous instance of the word 'deadline' within the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nset_text($note_content, 'Prepare the report for the deadline')\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($prev_matched_text)"}
{"task": "Open a checklist note containing the item 'Meeting at 3 PM' and rename the checklist item 'Meeting at 3 PM' to 'Team Meeting'.", "solution": "tap($open_note)\nitems = $open_note_title_list.match({'text': 'Checklist'})\nif items:\n    tap(items[0])\n    checklist_items = $checklist_item_list.match({'text': 'Meeting at 3 PM'})\n    if checklist_items:\n        long_tap(checklist_items[0])\n        tap($rename_selected_checklist_item)\n        set_text($rename_input, 'Team Meeting')\n        tap($rename_ok)"}
{"task": "Open a note if there is none opened, then open more options for the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a note or create one if none exists, then save the current note.", "solution": "\nelement_dict = get_attributes($open_note_title_list)\nif len(element_dict) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"New Note\")\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($save_note)\n"}
{"task": "Open settings and enable line wrapping", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, \"down\")\nif not get_attributes($set_enable_line_wrap)[\"checked\"]:\n    tap($set_enable_line_wrap)\n"}
{"task": "Ensure a note is open and visible, then lock the current note", "solution": "\nelement_dict = get_attributes($open_note_title_list)\nif len(element_dict) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"New Note\")\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)\n"}
{"task": "Open a note or create one if none exists, then open more options for the current note.", "solution": "\nelement_dict = get_attributes($open_note_title_list)\nif len(element_dict) == 0:\n    tap($create_note)\n    set_text($add_note_title, \"New Note\")\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\n"}
{"task": "Change the alignment settings in the Notes APP on your smartphone without any prior preparation, as this task is general in nature and can be completed by making specific changes directly.", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_alignment)\n"}
{"task": "Open a note or create one if there is none, then view the current note's title.", "solution": "\n# Open a note or create one if there is none, then view the current note's title.\n\n# Tap the open_note button to open the note popup\ntry:\n    tap($open_note)\n    notes = $open_note_title_list\n    if len(notes) > 0:\n        tap(notes[0])\n    else:\n        raise Exception('No notes found')\nexcept Exception as e:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($switch_item)\n\n# Get the title of the current note\ncurrent_title = get_text($item_title)\nprint(current_title)\n"}
{"task": "Verify that a note is currently open and then open more options for the current note.", "solution": "\n# Verify that a note is currently open and then open more options for the current note.\n\ntry:\n    if 'note_content' in globals():\n        tap($more_options_note)\n    else:\n        raise Exception('No note is currently open')\nexcept Exception as e:\n    print(e)\n"}
{"task": "Verify that a checklist is currently open, then open more options for the current checklist", "solution": "\n# Verify that a checklist is currently open, then open more options for the current checklist\n\ntry:\n    if 'checklist_item_list' in globals():\n        tap($more_options_checklist)\n    else:\n        raise Exception('No checklist is currently open')\nexcept Exception as e:\n    print(e)\n"}
{"task": "Open the settings of the Notes app on your smartphone.", "solution": "\n# Open the settings of the Notes app on your smartphone.\n\ntap($more_options_note)\ntap($settings)\n"}
{"task": "Create the note 'Travel Plan' if it doesn't exist and then export it as a file", "solution": "\n# Create the note 'Travel Plan' if it doesn't exist and then export it as a file\n\ntry:\n    tap($open_note)\n    notes = $open_note_title_list.match('Travel Plan')\n    if len(notes) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'Travel Plan')\n        tap($text_note_type)\n        tap($add_note_ok)\n        tap($switch_item)\n    else:\n        tap(notes[0])\n    tap($more_options_note)\n    tap($export_as_file)\nexcept Exception as e:\n    print(e)\n"}
{"task": "Ensure a note is open and visible, then lock the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)"}
{"task": "Open settings and customize the app colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure locking action has been initiated, then tap on 'OK' to confirm locking the current note", "solution": "tap($lock_note_ok)"}
{"task": "Open a checklist note or create one if none exists, then open the more options menu for the current checklist.", "solution": "tap($open_note)\nnotes_opened = len($open_note_title_list)\nchecklists_found = False\nfor i in range(notes_opened):\n    tap($open_note_title_list[i])\n    attrs = get_attributes($more_options_note)\n    if 'checklist' in attrs and attrs['checklist']: \n        checklists_found = True\n        break\nif not checklists_found:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the settings page from the home screen to customize the colors.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Set the font size to 200% directly from the home page without any prerequisites.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)\ntap($exit_settings)"}
{"task": "Open the settings in the Notes APP from the home page and set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)\ntap($exit_settings)"}
{"task": "Open the settings menu and set the theme color to dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Set the font size to 250% from the home page of the Notes APP", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\ntap($exit_settings)"}
{"task": "Open the settings in the Notes APP and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_90%)\ntap($exit_settings)"}
{"task": "Create a new text note", "solution": "tap($create_note)\nset_text($add_note_title, 'New Note')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Enable 'Show keyboard on startup'. This can be performed directly from the home page without any prerequisites.", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)\ntap($exit_settings)"}
{"task": "Navigate to the settings and customize the colors of the Notes App", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "If a note with the title 'Meeting Notes' already exists, rename the note title to something else. Then, add a new note titled 'Meeting Notes' and select text note type.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Meeting Notes':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Meeting Notes')\n        tap($rename_ok)\n        back()\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Ensure the word 'deadline' exists in the current note, then search for it.", "solution": "content = get_text($note_content)\nif 'deadline' not in content:\n    set_text($note_content, content + ' deadline')\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($next_matchhed_text)"}
{"task": "Set the font size to 300% from the home page of the Notes APP", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Open an existing checklist note or create a new one if none exists, then sort the current checklist by 'Title'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings on the Notes APP and set the font size to 100%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "Open a checklist note or create one if none exists, then sort the current checklist by 'Date Created'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings in the Notes APP and set the font size to 125%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)"}
{"task": "Open a checklist note or create one if none exists, then sort the current checklist by 'Custom'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    checklist_titles = $open_note_title_list\n    for i in range(len(checklist_titles)):\n        tap($checklist_titles[i])\n        if $checklist_titles[i].match({'selected':True}):\n            break\n    attributes = get_attributes($more_options_checklist)\n    if attributes['selected'] == False:\n        tap($more_options_checklist)\n        tap($sort_checklist_items)\n        tap($custom_type)\n        tap($sort_checklist_items_ok)"}
{"task": "Verify that a note is currently open, then edit the content of the current note to 'Complete the project by Friday'", "solution": "note_attributes = get_attributes($note_content)\nif note_attributes['selected'] == True:\n    set_text($note_content, 'Complete the project by Friday')\n    tap($save_note)"}
{"task": "Open a checklist note or create one if none exists, then tap on the 'Settings' button after opening 'more options' in the checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    checklist_titles = $open_note_title_list\n    for i in range(len(checklist_titles)):\n        tap($checklist_titles[i])\n        if $checklist_titles[i].match({'selected':True}):\n            break\n    attributes = get_attributes($more_options_checklist)\n    if attributes['selected'] == False:\n        tap($more_options_checklist)\n        tap($settings)"}
{"task": "Ensure the text 'birthday party details' exists in the currently open note, then search the note for 'birthday party details'", "solution": "note_content_text = get_text($note_content)\nif 'birthday party details' in note_content_text:\n    tap($search_within_note)\n    set_text($search_text, 'birthday party details')"}
{"task": "Open the app settings.", "solution": "tap($settings)"}
{"task": "Ensure that a note titled 'Holiday Plans' exists by creating it if necessary, and then open the note titled 'Holiday Plans'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_titles_matched = note_titles.match('Holiday Plans')\n\nif len(note_titles_matched) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Holiday Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\n    back()\nelse:\n    tap(note_titles_matched[0])"}
{"task": "Open the note titled 'Work Notes' if it exists, then search for the text 'Meeting' within it.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nnote_titles_matched = note_titles.match('Work Notes')\n\nif len(note_titles_matched) > 0:\n    tap(note_titles_matched[0])\n    tap($search_within_note)\n    set_text($search_text, 'Meeting')"}
{"task": "If a checklist titled 'Grocery List' already exists, rename it to something else. Then, rename the current checklist to 'Grocery List'.", "solution": "tap($open_note)\nchecklist_titles = $open_note_title_list.match({'selected': True})\n\nif len(checklist_titles) > 0:\n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Checklist')\n    tap($rename_ok)\n\n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Grocery List')\n    tap($rename_ok)"}
{"task": "Ensure that a checklist item with the title 'Book Flights' exists and then rename it to 'Reserve Flights'", "solution": "checklist_items = $checklist_item_list.match('Book Flights')\n\nif len(checklist_items) == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Book Flights')\n    tap($add_checklist_item_ok)\n    back()\n\nlong_tap($checklist_item_list.match('Book Flights')[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Reserve Flights')\ntap($rename_ok)"}
{"task": "Select the 'light' checkbox in the settings to enable the light theme color for the app.", "solution": "tap($settings)\ntap($set_colors)\nselected_theme = $theme_color_types.match({'selected': True})[0]\nif selected_theme.get_text() != 'light':\n    tap($set_theme_color)\n    tap($theme_color_light)\ntap($save_set_colors)"}
{"task": "Open a note if there is none opened, then rename the current note to 'Meeting Notes'", "solution": "if not get_attributes($note_content)['selected']:\n    if len($open_note_title_list) == 0:\n        tap($open_note)\n    tap($open_note_title_list[0])\n    \ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open a checklist note containing the item 'Review Report' and delete the checklist item 'Review Report'", "solution": "tap($open_note)\nchecklist_notes = $open_note_title_list.match({'text': 'Review Report'})\nif len(checklist_notes) > 0:\n    tap(checklist_notes[0])\n    item_to_delete = $checklist_item_list.match({'text': 'Review Report'})\n    if len(item_to_delete) > 0:\n        long_tap(item_to_delete[0])\n        tap($delete_selected_checklist_item)"}
{"task": "Open the current note and then open the settings of the app from the note options", "solution": "if not get_attributes($note_content)['selected']:\n    if len($open_note_title_list) == 0:\n        tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Create the note 'Vacation Plans' if it doesn't exist, then open the note titled 'Vacation Plans'", "solution": "tap($open_note)\nvacation_note = $open_note_title_list.match({'text': 'Vacation Plans'})\nif len(vacation_note) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Vacation Plans')\n    tap($add_note_ok)\nvacation_note = $open_note_title_list.match({'text': 'Vacation Plans'})\nif len(vacation_note) > 0:\n    tap(vacation_note[0])"}
{"task": "Open a note if there is none opened, then access more options of the current note", "solution": "if not get_attributes($note_content)['selected']:\n    if len($open_note_title_list) == 0:\n        tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings menu in the Notes app and set the app's theme to light", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)"}
{"task": "Open settings and save the customized colors", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open settings and change the app theme to White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Open the settings menu in the Notes app, and set the app's theme to dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Open the settings menu in the Notes app and set the app's theme to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open the current checklist and then open the settings of the app from the checklist options", "solution": "tap($open_note)\ntap($checklist_item_list.match({\"selected\": false})[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the app settings of the Notes APP and set the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)\n"}
{"task": "Open a text note or create one if there is none, then tap on the 'more options' button in the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\n"}
{"task": "Open a text note or create one if there is none, then close the search box in the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($search_within_note)\ntap($close_search_box)\n"}
{"task": "Rename the current note to 'Grocery List' from the home page", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)\n"}
{"task": "Create the note titled 'Project Plan' if it doesn't exist and then edit it to add a new section 'Timeline'", "solution": "tap($create_note)\nset_text($add_note_title, 'Project Plan')\ntap($text_note_type) if not get_attributes($text_note_type)['checked'] else None\ntap($add_note_ok)\nset_text($note_content, 'Timeline')\nsave_note if (len($open_note_title_list.match('Project Plan')) == 0) else None\ntap($open_note)\nfor index in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[index]).strip() == 'Project Plan':\n        tap($open_note_title_list[index])\n        set_text($note_content, get_text($note_content).strip() + '\\nTimeline')\n        tap($save_note)\n        break\ntap($open_note)\nfor index in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[index]).strip() == 'Project Plan':\n        tap($open_note_title_list[index])\n        set_text($note_content, get_text($note_content).strip() + '\\nTimeline')\n        tap($save_note)\n        break\n"}
{"task": "Ensure a note titled 'Meeting Minutes' exists and then open it.", "solution": "tap($create_note)\nset_text($add_note_title, 'Meeting Minutes')\ntap($text_note_type) if not get_attributes($text_note_type)['checked'] else None\ntap($add_note_ok)\nsave_note if (len($open_note_title_list.match('Meeting Minutes')) == 0) else None\ntap($open_note)\nfor index in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[index]).strip() == 'Meeting Minutes':\n        tap($open_note_title_list[index])\n        break\n"}
{"task": "Ensure a note is currently open, then access more options for the current note", "solution": "tap($more_options_note)\n"}
{"task": "Set the font size to 100% directly from the settings or relevant menu.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%) if not get_attributes($font_size_100%)['checked'] else None\ntap($exit_settings)\n"}
{"task": "Create a checklist item with the title 'Pay Bills' if it does not exist, and then delete the checklist item 'Pay Bills'", "solution": "tap($add_checklist_item) if (len($checklist_item_list.match('Pay Bills')) == 0) else None\nset_text($add_checklist_item_title, 'Pay Bills')\ntap($add_checklist_item_ok)\nfor index in range(len($checklist_item_list)):\n    if get_text($checklist_item_list[index]) == 'Pay Bills':\n        long_tap($checklist_item_list[index])\n        tap($delete_selected_checklist_item)\n        break\n"}
{"task": "Open the settings page from the home screen, navigate to the color customization section, and save the customized colors.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open the current note and then open its settings", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'NewNote')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings page from the home screen, navigate to the color customization section, and close the popup window for setting colors.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open the settings menu in the Notes app and set the app's theme to white", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Open a note or create one if none exists, then open more options of the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'NewNote')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Save the customized colors directly from the settings page.", "solution": "tap($save_set_colors)"}
{"task": "If you are not on the settings page, first navigate to the settings page, then set the theme color of the app to dark mode.", "solution": "\nif not 'settings' in globals():\n    tap($more_options_note)\n\nif not get_attributes($settings)['selected']:\n    tap($settings)\ntap($set_colors)\ntap($set_theme_color)\nif not get_attributes($theme_color_dark)['selected']:\n    tap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Open more options in the note", "solution": "tap($more_options_note)"}
{"task": "Open a note or create one if there is none, then delete the current note.", "solution": "\ntry:\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    if len(open_note_titles) > 0:\n        tap(open_note_titles[0])\n    else:\n        raise Exception('No note to open')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings page and customize the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "From the home page, set the font size to 60% in the Notes app.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)\nback()"}
{"task": "Customize the colors of the app, then save the color settings.", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)\nback()"}
{"task": "From the home page, set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)\nback()"}
{"task": "Edit the content of the current note to 'Meeting minutes for September 2023'", "solution": "tap($note_content)\nset_text($note_content, 'Meeting minutes for September 2023')\ntap($save_note)\nback()"}
{"task": "Check if the note 'Recipe for Lasagna' exists; if not, create it. Then, print the note 'Recipe for Lasagna'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif not any(get_text(note) == 'Recipe for Lasagna' for note in notes):\n    tap($create_note)\n    tap($text_note_type)\n    set_text($add_note_title, 'Recipe for Lasagna')\n    tap($add_note_ok)\n    back()\nnote_lasagna = None\nfor note in notes:\n    if get_text(note) == 'Recipe for Lasagna':\n        note_lasagna = note\n        break\ntap(note_lasagna)"}
{"task": "From the home page, navigate to the settings page and set the theme color of the app to dark.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()"}
{"task": "Enable auto light/dark theme for the Notes APP while starting from the home page", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)\nback()"}
{"task": "Create the note titled 'Meeting Notes' if it doesn't exist, then open the note titled 'Meeting Notes'", "solution": "tap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)\nback()\ntap($open_note)\ntap($open_note_title_list.match('Meeting Notes')[0])"}
{"task": "Ensure a note is currently open and then access more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open any note or create a new note if none exist, then edit the content of the current note to add 'Call John at 3 PM'", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nset_text($note_content, get_text($note_content) + 'Call John at 3 PM')\ntap($save_note)"}
{"task": "Verify that a note is currently open and edit the note to say 'Buy groceries'", "solution": "if get_attributes($note_content)['editable']:\n    set_text($note_content, 'Buy groceries')"}
{"task": "Verify that a note is currently open, and then save the current note.", "solution": "if get_attributes($note_content)['editable']:\n    tap($save_note)"}
{"task": "Add the word 'groceries' to the currently open note if it doesn't exist, then search for the word 'groceries' within the current note.", "solution": "if get_attributes($note_content)['editable']:\n    if 'groceries' not in get_text($note_content):\n        current_text = get_text($note_content)\n        new_text = current_text + ' groceries'\n        set_text($note_content, new_text)\n    tap($search_within_note)\n    set_text($search_text, 'groceries')"}
{"task": "Verify that a checklist is currently open, then open app settings from the more options in the current checklist.", "solution": "if get_attributes($checklist_item_list)['visible']:\n    tap($more_options_checklist)\n    tap($settings)"}
{"task": "Show the current font size.", "solution": "tap($settings)\ntap($current_font_size)\n"}
{"task": "Go to the app settings", "solution": "tap($settings)"}
{"task": "Ensure a note is open, then go to settings from the note options", "solution": "\ntap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) > 0:\n    tap(note_titles[0])  \ntap($more_options_note)\ntap($settings)"}
{"task": "Ensure a checklist note is open, then go to settings from the checklist options", "solution": "\ntap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) > 0:\n    tap(note_titles[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings of the app and customize the app colors", "solution": "\ntap($settings)\ntap($set_colors)"}
{"task": "Open the settings page to customize the app colors", "solution": "\ntap($settings)\ntap($set_colors)"}
{"task": "Customize the app's colors through the settings", "solution": "tap($settings)\ntap($set_colors)\n# Customize desired colors\n# Here's a hypothetical example, assuming you want to set theme, text, and background color\n# Set Theme Color\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)\nback()\n# Set Text Color\ntap($set_text_color)\n# Select a specific color for text here, let's assume it's done\nback()\n# Set Background Color\ntap($set_background_color)\n# Select a specific background color here, let's assume it's done\nback()\n# Save the changes\ntap($save_set_colors)\nback()"}
{"task": "Open an existing note or create a new one if none exists, then set the cursor to be placed at the end of the note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_place_cursor_to_the_end_of_note)['checked']:\n    tap($set_place_cursor_to_the_end_of_note)\nback()"}
{"task": "Set the font size to 175% directly from the home page.", "solution": "tap($settings)\ntap($current_font_size)\nif not get_attributes($font_size_175%)['selected']:\n    tap($font_size_175%)\ntap($sort_checklist_items_ok)\nback()"}
{"task": "Set the font size to 200% from the home page of the Notes APP.", "solution": "tap($settings)\ntap($current_font_size)\nif not get_attributes($font_size_200%)['selected']:\n    tap($font_size_200%)\ntap($sort_checklist_items_ok)\nback()"}
{"task": "Set the app's theme color to auto light/dark from the home page by navigating to theme settings", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\nif not get_attributes($theme_color_auto_light_dark)['selected']:\n    tap($theme_color_auto_light_dark)\ntap($save_set_colors)\nback()"}
{"task": "Set the font size to 250% from the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('250%')[0])"}
{"task": "Set the font size to 300% from the home page of the Notes APP.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('300%')[0])"}
{"task": "Switch the app's theme to light mode through the theme settings from the home page", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('light')[0])\ntap($close_set_colors)"}
{"task": "Enable 'Place cursor to the end of note' directly from the home page.", "solution": "tap($settings)\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "Set the font size in the Notes app to large directly from the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('175%')[0])"}
{"task": "Open a checklist note if there is none opened, then go to the more options of the current checklist.", "solution": "if len($checklist_item_list.match({'selected': true})) == 0:\n    tap($open_note)\n    checklist_note = $open_note_title_list.match('checklist')\n    if len(checklist_note) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n    else:\n        tap(checklist_note[0])\ntap($more_options_checklist)"}
{"task": "Lock the current note", "solution": "tap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Verify all notes exist in the application and then export all notes", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    tap(open_note_titles[i])\nback()\ntap($settings)\ntap($export_notes)"}
{"task": "Open a text note or create one if there is none, and edit the content of the current note to include 'Reminder'", "solution": "if len($note_content.match({'selected': true})) == 0:\n    tap($open_note)\n    text_note = $open_note_title_list.match('text')\n    if len(text_note) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'Text Note')\n        tap($text_note_type)\n        tap($add_note_ok)\n    else:\n        tap(text_note[0])\nset_text($note_content, 'Reminder')"}
{"task": "Open the settings page and enable 'place cursor to the end of note'", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "If a note with the title 'Todo List' already exists, rename the note title to something else, then add a new note titled 'Todo List' and select checklist type.", "solution": "title_to_check = 'Todo List'\nopen_note()\nnote_titles = $open_note_title_list\nexisting_titles = [get_text(note) for note in note_titles]\n\nif title_to_check in existing_titles:\n    note_idx = existing_titles.index(title_to_check)\n    tap(note_titles[note_idx])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Archived ' + title_to_check)\n    tap($rename_ok)\n    back()\nback()\n\ntap($create_note)\nset_text($add_note_title, title_to_check)\ntap($checklist_type)\ntap($add_note_ok)\nback()"}
{"task": "Enable 'Show a note picker on startup' directly from the home page without any prerequisites.", "solution": "tap($settings)\nif not get_attributes($set_show_a_note_picker_on_startup)['checked']:\n    tap($set_show_a_note_picker_on_startup)\ntap($exit_settings)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist.", "solution": "open_note()\nopen_title_exists = len($open_note_title_list) > 0\nif open_title_exists:\n    tap($open_note_title_list[0])\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist') # Temporary title\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Rename the current note to 'Updated Notes'", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Updated Notes')\ntap($rename_ok)\nback()"}
{"task": "Ensure the word 'budget' exists in the current note, then find the next occurrence of 'budget' in the note", "solution": "note_content = get_text($note_content)\nif 'budget' not in note_content:\n    set_text($note_content, note_content + '\\nbudget')\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Import notes from a file", "solution": "tap($settings)\ntap($import_notes)"}
{"task": "Open the settings menu from the home page", "solution": "tap($settings)"}
{"task": "If a note with the title 'Shopping List' already exists, rename the note title to something else. Then create a new note with the title 'Shopping List.'", "solution": "\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Shopping List':\n        tap($open_note_title_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Shopping List Old')\n        tap($rename_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Shopping List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the settings page and enable 'show keyboard on startup'", "solution": "tap($settings)\nif not get_attributes($set_show_keyboard_on_startup)[\"checked\"]:\n    tap($set_show_keyboard_on_startup)\nback()"}
{"task": "Open a checklist note or create one if there is none, then open the more options for the current checklist", "solution": "tap($open_note)\nchecklist_opened = False\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    if len($checklist_item_list) > 0:\n        checklist_opened = True\n        break\n    back()\nif not checklist_opened:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Rename the current checklist to 'Updated Checklist' from the home page.", "solution": "tap($open_note)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Updated Checklist')\ntap($rename_ok)"}
{"task": "Open the settings of the Notes app from the home page.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Ensure the word 'timeline' exists in the current note, then find the previous occurrence of 'timeline' in the note.", "solution": "tap($search_within_note)\nset_text($search_text, 'timeline')\ntap($prev_matched_text)"}
{"task": "Save the current note after adding 'Call the plumber' at the end", "solution": "tap($note_content)\ncontent = get_text($note_content)\nset_text($note_content, content + '\\nCall the plumber')\ntap($save_note)"}
{"task": "Create the note titled 'Vacation Ideas' if it does not exist, then open more options for the note.", "solution": "tap($open_note)\nif not len($open_note_title_list.match('Vacation Ideas')):\n  tap($create_note)\n  set_text($add_note_title, 'Vacation Ideas')\n  tap($add_note_ok)\n  tap($save_note)\nnote_idx = next(idx for idx, element in enumerate($open_note_title_list) if get_text(element) == 'Vacation Ideas')\ntap($open_note_title_list[note_idx])\ntap($more_options_note)"}
{"task": "Open a checklist or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the set colors screen to customize the colors of the app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)"}
{"task": "Open a checklist or create one if there is none, then rename it to 'Shopping List'", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'My Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'Shopping List')\ntap($rename_ok)"}
{"task": "Open the settings page from the home screen, then customize the app colors and set the theme to Dark.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\nback()"}
{"task": "Open settings and set the app theme color to Black & White", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\nback()"}
{"task": "Set the font size to 90% starting from the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'selected': false})[3])  # Index 3 corresponds to '90%' checkbox\ntap($font_size_types.match({'selected': true})[0])"}
{"task": "Open the settings page and set the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "If a checklist with the title 'Weekend Chores' already exists, rename the existing checklist to something else. Then rename the checklist 'Household Chores' to 'Weekend Chores'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Weekend Chores')) > 0:\n    tap($open_note_title_list.match('Weekend Chores')[0])\n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Checklist')\n    tap($rename_ok)\nif len($open_note_title_list.match('Household Chores')) > 0:\n    tap($open_note_title_list.match('Household Chores')[0])\n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Weekend Chores')\n    tap($rename_ok)"}
{"task": "Ensure the checklist 'Daily Workout Plan' exists and then create a shortcut for it.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Daily Workout Plan')) > 0:\n    tap($open_note_title_list.match('Daily Workout Plan')[0])\n    tap($more_options_checklist)\n    tap($create_shortcut)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Daily Workout Plan')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($create_shortcut)"}
{"task": "Open the settings of the app from the home page.", "solution": "tap($settings)"}
{"task": "In the note titled 'To-Do List', add the text 'gym' somewhere in the note, then search for 'gym' and go to the next match", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nnotes = open_note_titles.match('To-Do List')\ntap(notes[0])\ntap($note_content)\nset_text($note_content, get_text($note_content) + ' gym')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'gym')\ntap($next_matchhed_text)"}
{"task": "First, add the text '1 cup of sugar' in the note titled 'Recipe'. Then, edit the content of the same note and change '1 cup of sugar' to '1/2 cup of sugar'.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nnotes = open_note_titles.match('Recipe')\ntap(notes[0])\ntap($note_content)\nset_text($note_content, get_text($note_content) + ' 1 cup of sugar')\ntap($save_note)\nall_text = get_text($note_content)\nmodified_text = all_text.replace('1 cup of sugar', '1/2 cup of sugar')\nset_text($note_content, modified_text)\ntap($save_note)"}
{"task": "Create the note 'Financial Plan' if it doesn't exist, then search for 'budget' within the note titled 'Financial Plan'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nnotes = open_note_titles.match('Financial Plan')\nif len(notes) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Financial Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($search_within_note)\nset_text($search_text, 'budget')"}
{"task": "Open the more options menu for the current note", "solution": "tap($more_options_note)"}
{"task": "Set the app's theme color", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Verify that a note is currently open and then open the more options menu for the current note", "solution": "if get_text($item_title) != '':\n    tap($more_options_note)"}
{"task": "Verify that a note is currently open and then open the settings of the app from the current note", "solution": "if get_text($item_title) != '':\n    tap($more_options_note)\n    tap($settings)"}
{"task": "Change the theme color of the Notes app to White.", "solution": "tap($settings)\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_white)\n    tap($set_theme_color)\n    tap($save_set_colors)\n    back()"}
{"task": "Open the settings in the Notes APP from the home page.", "solution": "tap($switch_item)\n    tap($settings)"}
{"task": "Customize the colors of the Notes APP directly from the home page.", "solution": "tap($switch_item)\n    tap($set_colors)"}
{"task": "Open the more options menu for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Set the theme color of the Notes APP to Light from the home page.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($settings)"}
{"task": "Set the theme color of the Notes APP to Dark from the home page.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "If you are not already on the settings page, first open the settings page of the app, and then customize the colors of the app.", "solution": "if 'settings' not in get_attributes($set_colors):\n    tap($settings)\ntap($set_colors)"}
{"task": "Set the theme color of the app to Dark Red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one if there is none, and then sort the items in the checklist by title.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "If the current page is not the settings page, open the settings page and customize the widget colors.", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($settings)"}
{"task": "Open a checklist note or create one if there is none and then sort the items in the checklist by date created.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Rename the current note to 'Meeting Notes'", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open the settings page and scroll through it", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'up')\nback()"}
{"task": "Open a checklist note or create one if there is none, then sort the items in the checklist by custom order.", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nif len(notes_list) > 0:\n    tap(notes_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    if not get_attributes($checklist_type)['selected']:\n        tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings page to customize the app colors.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Lock the current note from the home page.", "solution": "tap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Show the information of the Notes app from the home page", "solution": "tap($more_options_note)\ntap($about)"}
{"task": "Check the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)"}
{"task": "Enable the option to show word count from the Notes APP home page", "solution": "tap($settings)\ntap($set_show_word_count)\nback()"}
{"task": "Create the note 'Personal Diary' if it doesn't exist, then lock the note 'Personal Diary'", "solution": "\ntap($create_note)\nset_text($add_note_title, 'Personal Diary')\ntap($text_note_type)\ntap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)\n"}
{"task": "Create the checklist 'Shopping List' if it doesn't exist, then open the file of the checklist 'Shopping List'", "solution": "\ntap($create_note)\nset_text($add_note_title, 'Shopping List')\ntap($checklist_type)\ntap($add_note_ok)\ntap($more_options_checklist)\ntap($open_file)\n"}
{"task": "From the home page, open the Notes APP and set the font size to 75%", "solution": "tap($open_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_75%)\ntap($exit_settings)"}
{"task": "Set the theme color of the Notes app to white", "solution": "tap($open_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)\ntap($close_set_colors)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by Date created.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Starting from the home page, set the font size to 90%.", "solution": "tap($open_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_90%)\ntap($exit_settings)"}
{"task": "Change the theme color of the Notes APP to black_white", "solution": "tap($open_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)\ntap($close_set_colors)"}
{"task": "Verify that a checklist is currently open and then open the settings of the app from the current checklist.", "solution": "if len($checklist_item_list) > 0:\n    tap($more_options_checklist)\n    tap($settings)"}
{"task": "Delete the current note directly from the home page", "solution": "tap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "If the current page is not the settings page, open the settings page. Then, exit the settings page.", "solution": "attributes = get_attributes($settings)\nif not attributes['selected']:\n    tap($more_options_note)\n    tap($settings)\ntap($exit_settings)"}
{"task": "Open the settings page and customize the widget colors", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_widget_colors)"}
{"task": "Remove all done items from the current checklist", "solution": "tap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Open a note or create one if none exists, then open more options for the current note.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Initiate and confirm renaming the checklist", "solution": "long_tap($checklist_item_list[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'New Checklist Name')\ntap($rename_ok)"}
{"task": "Open settings and set the app theme color to Custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\nback()"}
{"task": "Open a checklist or create one if there is none, then remove done items from the current checklist", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Open settings of the app from the main screen.", "solution": "tap($settings)"}
{"task": "Sort items in the current checklist from the home page", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Create a text note. If a note with a new default title is automatically generated, rename it to avoid conflicts.", "solution": "tap($create_note)\nset_text($add_note_title, 'New Note Title')\ntap($text_note_type)\ntap($add_note_ok)\nif any($open_note_title_list.match({'text': 'New Note Title'})):\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Unique New Note Title')\n    tap($rename_ok)"}
{"task": "Open the settings page if the current page is not the settings page, then scroll down the settings page", "solution": "if not 'settings' in get_text($item_title).lower():\n    tap($more_options_checklist)\n    tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the Notes app and create a new checklist", "solution": "tap($open_note)\ntap($create_note)\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else. Then, open the Notes app and rename the current note to 'Grocery List'.", "solution": "if any($open_note_title_list.match({'text': 'Grocery List'})):\n    tap($open_note_title_list.match({'text': 'Grocery List'})[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Some Other Title')\n    tap($rename_ok)\ntap($open_note)\ntap($open_note_title_list.match({'text': 'Some Other Title'})[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Open a checklist or create one if there is none, and then sort the items of the current checklist by name.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings page from the home screen and set the font size to 90%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_90%)\nback()"}
{"task": "Open the settings menu in the Notes app and customize the app colors", "solution": "tap($settings)\ntap($set_colors)\n# Customize theme color\nset_theme_color_index = 0  # put your desired index here\ntap($set_theme_color)\ntap($theme_color_types[set_theme_color_index])\nback()\n# Customize text color\ntap($set_text_color)\nset_text_color_index = 0  # put your desired index here\ntap($set_text_color)\ntap($theme_color_types[set_text_color_index])\nback()\n# Customize background color\ntap($set_background_color)\nset_background_color_index = 0  # put your desired index here\ntap($set_background_color)\ntap($theme_color_types[set_background_color_index])\nback()\nback()"}
{"task": "Ensure a checklist is open and visible, then tap on 'more options' for the current checklist", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a note or create one if none exists, then open the more options menu for the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure there is an existing note open, then open the Notes app and lock the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a note or create one if there is none, then open more options of the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure there is an existing note open in the Notes app and create a shortcut for the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Ensure there is an existing note open, then lock the current note after accessing more options.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Create a checklist from the home page", "solution": "tap($create_note)\nset_text($add_note_title, 'New Checklist')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Switch the app's theme color to dark from the theme settings", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Enable the show word count option in the Notes app", "solution": "tap($settings)\ntap($set_show_word_count)"}
{"task": "Disable the show word count option in the Notes app. Users can directly disable this option from the home page without additional preparation.", "solution": "tap($set_show_word_count)"}
{"task": "Open the settings menu and set the theme color to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Change the alignment settings in the Notes app", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Ensure a checklist is open and visible, then tap on 'Delete note' to delete the current checklist", "solution": "if 'checklist_item' not in globals():\n    long_tap($open_note)\n    tap($open_note_title_list.match('Checklist')[0])\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings of the app from the home page.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the widget settings and customize the widget colors", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_widget_colors)"}
{"task": "Open the settings page from the home screen and customize the colors of the app.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Create the note titled 'Meeting Minutes' if it doesn't exist, then open it.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Meeting Minutes')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($add_note_ok)\ntap($open_note_title_list.match('Meeting Minutes')[0])"}
{"task": "Set the font size to large in the Notes app settings", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('150%')[0])"}
{"task": "From the home page of the Notes APP, navigate to the settings and check the current font size.", "solution": "tap($settings)\ntap($current_font_size)\ncurrent_size = get_text($current_font_size)\nback()\nprint(current_size)"}
{"task": "Open the Notes app, navigate to the settings, and enable the show word count option.", "solution": "tap($settings)\nif not get_attributes($set_show_word_count)['checked']:\n    tap($set_show_word_count)"}
{"task": "Turn on the make links and emails clickable feature in the Notes app", "solution": "tap($settings)\nif not get_attributes($set_make_links_and_emails_clickable)['checked']:\n    tap($set_make_links_and_emails_clickable)"}
{"task": "Show the current font size in the Notes app.", "solution": "tap($settings)\ntap($current_font_size)\ncurrent_size = get_text($current_font_size)\nback()\nprint(current_size)"}
{"task": "From the home page, set the font size to 100% in the Notes APP", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)\n"}
{"task": "Open more options for the current note", "solution": "tap($more_options_note)\n"}
{"task": "Open a note or create one if there is none, then tap the 'switch to prev item' button to view the previous checklist in the list.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($switch_to_prev_item)\n"}
{"task": "Enable clickable links and emails from the home page", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)\n"}
{"task": "Enable the use of monospaced font from the home page.", "solution": "tap($settings)\ntap($set_use_monospaced_font)\n"}
{"task": "Enable the incognito mode for keyboards from the home page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open more options for the current checklist from the home page", "solution": "tap($switch_to_next_item)\ntap($more_options_checklist)"}
{"task": "Check the current font size of the app directly from the home page", "solution": "tap($switch_to_next_item)\ntap($settings)\ntap($set_font_size)\nfont_size = get_text($font_size_types.match({'selected': True})[0])\nprint('Current font size is:', font_size)"}
{"task": "If a note with the title 'Travel Itinerary' already exists, rename or delete it, then tap the 'create_note' button to start a new note titled 'Travel Itinerary'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Travel Itinerary')) > 0:\n    tap($open_note_title_list.match('Travel Itinerary')[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Travel Itinerary')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the settings page if the current page is not the settings page, then open the About section in the Notes app", "solution": "if get_text($item_title) != 'Settings':\n    tap($settings)\ntap($about)"}
{"task": "Open the settings menu and customize the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Create the note 'Grocery List' if it doesn't exist, then tap the 'Open Note' button to edit the note titled 'Grocery List'", "solution": "tap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($add_note_ok)\ntap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        tap(notes[i])\n        break"}
{"task": "Create a note titled 'Meeting Notes' if it doesn't exist, then tap the 'Open Note' button to delete the note titled 'Meeting Notes'", "solution": "tap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($add_note_ok)\ntap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Meeting Notes':\n        tap(notes[i])\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        break"}
{"task": "Open the app icon color settings and set the app icon color to red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\n# Assuming there's a button for red color in the app icon color settings\n# This element selector would be specific to the actual UI, assuming it exists\nred_color_button = $something[<index for red button>] \ntap(red_color_button)\ntap($save_set_colors)"}
{"task": "Open the settings menu and then open the theme color settings", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Ensure a note is open and then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure a checklist note is open and then open more options for the current checklist", "solution": "tap($open_note)\nchecklists = [note for note in $open_note_title_list if 'checklist' in get_text(note).lower()]\nif len(checklists) > 0:\n    tap(checklists[0])\ntap($more_options_checklist)"}
{"task": "Open the settings of the app", "solution": "tap($settings)"}
{"task": "Ensure there is an existing checklist open and then open the more options menu for the current checklist", "solution": "tap($open_note)\nchecklists = [note for note in $open_note_title_list if 'checklist' in get_text(note).lower()]\nif len(checklists) > 0:\n    tap(checklists[0])\ntap($more_options_checklist)"}
{"task": "Ensure the checklist 'Birthday Party Plan' exists and then export it as a file", "solution": "tap($open_note)\ntitles = $open_note_title_list\nfor i in range(len(titles)):\n    if get_text(titles[i]) == 'Birthday Party Plan':\n        tap(titles[i])\n        break\ntap($more_options_checklist)\ntap($export_as_file)"}
{"task": "Turn off the make links and emails clickable feature in the Notes app from the home page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_make_links_and_emails_clickable)"}
{"task": "Show information about the Notes app.", "solution": "tap($more_options_note)\ntap($about)"}
{"task": "Open the settings and check the box for 'show a note picker on startup'", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_show_a_note_picker_on_startup)"}
{"task": "Open a note or create one if none exists, then rename the current note to 'Grocery List'.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nget_text($item_title)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Grocery List')\ntap($rename_ok)"}
{"task": "Enable the option to make links and emails clickable in the settings page from the home screen", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_make_links_and_emails_clickable)"}
{"task": "Go to the settings page from the notes main screen", "solution": "tap($more_options_note)\nif 'settings' in get_text($popup_window_elements):\n    tap($settings)"}
{"task": "Ensure there is an existing checklist open, then open more options for the current checklist", "solution": "if get_attributes($note_content).get('editable', False):\n    tap($more_options_checklist)"}
{"task": "Navigate to the settings page and scroll through the settings page.", "solution": "tap($more_options_note)\nif 'settings' in get_text($popup_window_elements):\n    tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'up')\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the settings page if the current page is not the settings page, then customize the widget colors in the settings.", "solution": "if not get_attributes($settings).get('selected', False):\n    tap($more_options_note)\n    if 'settings' in get_text($popup_window_elements):\n        tap($settings)\ntap($set_widget_colors)"}
{"task": "Open the settings of the app and customize the widget colors", "solution": "tap($more_options_note)\nif 'settings' in get_text($popup_window_elements):\n    tap($settings)\ntap($set_widget_colors)"}
{"task": "Open the note titled 'Financial Plan' and close the search box", "solution": "tap($open_note)\n$open_note_title_list.match('Financial Plan')[0].tap()\ntap($search_within_note)\ntap($close_search_box)"}
{"task": "Open the settings page and set the app theme to auto light/dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($close_set_colors)"}
{"task": "Ensure there is a note with the word 'Project' in it, and then open that note to check if it contains the word 'Project.'", "solution": "tap($open_note)\nproject_notes = $open_note_title_list.match('Project')\nif len(project_notes) == 0:\n    raise Exception('No notes with the word \"Project\" found.')\nproject_notes[0].tap()\nif 'Project' not in get_text($note_content):\n    raise Exception('Note does not contain the word \"Project\"')"}
{"task": "Open the settings page in the Notes APP if you are not already there, then set the font size.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "If the current page is not the settings page, open the settings page and scroll the settings page.", "solution": "if 'Settings' not in get_text($item_title):\n    tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "If the current page is not the settings page, open the settings page and then enable incognito mode for keyboards.", "solution": "if not len($settings):\n    tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, \"down\")\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open the settings of the Notes app and change the font size.", "solution": "if not len($settings):\n    tap($more_options_note)\ntap($settings)\ntap($set_font_size)"}
{"task": "If a note with the title 'Daily Journal' already exists, rename its title to something else, then start creating a new note and set its title to 'Daily Journal'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Daily Journal')) > 0:\n    tap($open_note_title_list.match('Daily Journal')[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Daily Journal') \n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'Daily Journal')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Ensure there is a note open with an active search box, then close the search box in the current note", "solution": "if len($close_search_box) == 0:\n    # Assuming note_content refers to open note\n    tap($more_options_note)\n    tap($search_within_note)\nclose($close_search_box)"}
{"task": "If a checklist note with items 'Passport', 'Tickets', 'Charger' already exists, rename or modify it, then create a new checklist note and include items like 'Passport', 'Tickets', 'Charger'.", "solution": "tap($open_note)\nchecklist_items = ['Passport', 'Tickets', 'Charger']\nexisting_checklist = [item for item in $open_note_title_list if all([item for item in get_text($checklist_item) in checklist_items])]\nif existing_checklist:\n    tap(existing_checklist[0])\n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Old Checklist') \n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'New Checklist')\ntap($checklist_type)\ntap($add_note_ok)\nfor item in checklist_items:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, item)\n    tap($add_checklist_item_ok)"}
{"task": "Ensure there is an existing checklist open, then sort the current checklist items by title", "solution": "tap($more_options_checklist)\ntap($more_option_checklist_buttons.match('sort by')[0])\ntap($sort_checklist_items)\ntap($sort_checklist_items_types.match('Title')[0])\ntap($sort_checklist_items_ok)"}
{"task": "Navigate to customization settings and customize the colors of the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)"}
{"task": "Open the settings page and set the text color of the app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_text_color)"}
{"task": "Navigate to the theme settings and set the theme color to dark.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)"}
{"task": "Open the settings of the app and enable the display save success messages option", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_display_save_success_messages)"}
{"task": "Open the settings page and set the background color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)"}
{"task": "Open customization settings in the Notes app and customize the text color to blue", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\nset_text($set_text_color, 'blue')"}
{"task": "Check the current font size directly from the home page of the Notes app.", "solution": "tap($settings)\ntap($current_font_size)\nfont_size = get_text($current_font_size)\nprint(font_size)\nback()"}
{"task": "Open the settings page and set the primary color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Open the settings of the app to show the word count", "solution": "tap($settings)\ntap($set_show_word_count)"}
{"task": "Ensure no existing note has the title 'Meeting Notes' and then create a new note with the title 'Meeting Notes'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Meeting Notes':\n        return\nback()\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($add_note_ok)"}
{"task": "Ensure there is at least one note in the app and then open the most recently edited note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\n    return\n\n# Open the most recently edited note, assuming the list is sorted by edit time\nmost_recent_note = notes[0]\ntap(most_recent_note)"}
{"task": "Ensure there is at least one existing note and open it", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap(notes[0])"}
{"task": "Open the settings page and change the app theme to light mode", "solution": "tap($open_note)\nback()\n\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($close_set_colors)"}
{"task": "If a note with the title 'Meeting Minutes' already exists, rename that note title to something else, then rename the current note to 'Meeting Minutes'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Meeting Minutes':\n        tap(note)\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Note ' + str(len(notes)+1))\n        tap($rename_ok)\n        break\n\n# Rename the current note to 'Meeting Minutes'\ntap(notes[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Minutes')\ntap($rename_ok)"}
{"task": "If a checklist note with the title 'Packing List' already exists, rename or delete it, then tap the 'create_note' button to start a new checklist titled 'Packing List'", "solution": "notes = $open_note_title_list.match('Packing List')\nif notes:\n    tap($open_note)\n    tap(notes[0])\n    more_options = $more_options_note.match({'selected': True})\n    if more_options:\n        tap(more_options[0])\n        tap($rename_note)\n        set_text($rename_input, 'Old Packing List')\n        tap($rename_ok)\n    else:\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Packing List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open a note or create one if there is none, then scroll through the items using the 'switch_item' scrollbar", "solution": "open_notes = $open_note_title_list\nif not open_notes:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nfor _ in range(len($open_note_title_list)):\n    scroll($switch_item, 'down')"}
{"task": "Open a note or create one if there is none, then view the title of the current item by looking at the 'item_title' text.", "solution": "open_notes = $open_note_title_list\nif not open_notes:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nitem_title = get_text($item_title)\nprint(item_title)"}
{"task": "Open an existing note or create a new one if there is none, then delete the current note", "solution": "open_notes = $open_note_title_list\nif not open_notes:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Ensure the checklist 'Fitness Goals' exists and print it", "solution": "fitness_goals = $open_note_title_list.match('Fitness Goals')\nif not fitness_goals:\n    tap($create_note)\n    set_text($add_note_title, 'Fitness Goals')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap(fitness_goals[0])\nprint('Fitness Goals checklist opened.')"}
{"task": "Create a new note and select 'Text Note' type from the home page", "solution": "tap($create_note)\ntap($text_note_type)"}
{"task": "Open the settings page and set the app theme to dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Create a note if necessary and make it the current note, then lock the current note", "solution": "tap($create_note)\ntap($text_note_type)\ntap($add_note_ok)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\ntap(notes[0])\ntap($more_options_note)"}
{"task": "Create a note if necessary, make it the current note, and then delete the current note.", "solution": "tap($create_note)\ntap($text_note_type)\ntap($add_note_ok)\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open a checklist or create one if there is none, then sort the checklist by custom order.", "solution": "try:\n    open_note()\n    checklist_elements = $open_note_title_list.match({'type': 'checklist'})\n    if len(checklist_elements) > 0:\n        tap(checklist_elements[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($custom_type)\n    tap($sort_checklist_items_ok)\nfinally:\n    back()\n    "}
{"task": "Set the theme of the Notes app to Auto light/dark from the settings, accessible from the home screen.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)\nback()\ntap($exit_settings)\n"}
{"task": "Open the settings menu and update the primary color to green.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_primary_color)\nset_text($customize_primary_color, 'green')\ntap($save_set_colors)\nback()\ntap($exit_settings)\n"}
{"task": "Set and confirm the sort type for the checklist", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\n# Here you'd specify the sort type required, e.g.,\ntap($title_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open a checklist or create one if there is none, then open the settings page through checklist more options", "solution": "try:\n    open_note()\n    checklist_elements = $open_note_title_list.match({'type': 'checklist'})\n    if len(checklist_elements) > 0:\n        tap(checklist_elements[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($settings)\nfinally:\n    back()\n    "}
{"task": "Open the theme color settings in the Notes app and set the theme color to blue", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Set the theme color to dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\nback()"}
{"task": "Open the color customization settings in the app and customize the colors", "solution": "tap($settings)\ntap($set_colors)\n"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n\ttap($create_note)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($checklist_type)\n\ttap($add_note_ok)\nelse:\n\ttap(notes[0])\ntap($more_options_checklist)"}
{"task": "Open the color customization settings, customize the colors, and save the customized colors", "solution": "tap($settings)\ntap($set_colors)\n# Customize colors, for example:\ntap($set_text_color)\ntap($theme_color_dark_red)\nback()\ntap($save_set_colors)"}
{"task": "Open the settings menu in the Notes app and set the theme color to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Create the note titled 'Project Plan' if it doesn't exist, then open the note titled 'Project Plan'", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nproject_plan_titles = open_notes.match('Project Plan')\nif len(project_plan_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Project Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap(open_notes.match('Project Plan')[0])"}
{"task": "Open settings and set the alignment to right in the Notes app", "solution": "tap($settings)\ntap($set_alignment)\n# Assuming there's an option for 'Right' alignment within the alignment setting window\ntap($alignment_right)\ntap($save_alignment)"}
{"task": "Open settings", "solution": "tap($settings)"}
{"task": "Open an existing note or create a new one, then view more options of the current note", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes) > 0:\n    tap(open_notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open settings and customize the text color of the app to blue", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\nset_text($set_text_color, 'blue')\ntap($save_set_colors)"}
{"task": "Open a checklist or create one if there is none, then view more options of the current checklist", "solution": "\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a note or create one if none exists, then enable clickable links and emails in the note.", "solution": "\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Ensure there are multiple notes or checklist items to switch between, then switch to the next note or checklist item.", "solution": "\nwhile len($open_note_title_list) < 2:\n    tap($create_note)\n    set_text($add_note_title, f'Note {len($open_note_title_list) + 1}')\n    tap($text_note_type)\n    tap($add_note_ok)\nswip($switch_to_next_item, 'down')"}
{"task": "Open a note or create one if none exists, then disable clickable links and emails in notes.", "solution": "\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Open the color setting popup window and then close it.", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Ensure that the note titled 'Grocery List' exists and open it", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        tap(notes[i])\n        break"}
{"task": "Ensure a note is open and search for the term 'Meeting' within it", "solution": "tap($search_within_note)\nset_text($search_text, 'Meeting')"}
{"task": "Ensure there is a selected checklist item and rename it to 'Buy Milk'", "solution": "long_tap($checklist_item_list.match({'selected': true})[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Buy Milk')\ntap($rename_ok)"}
{"task": "Ensure there is an existing note open, then search within the current note", "solution": "tap($search_within_note)\nset_text($search_text, 'Meeting')"}
{"task": "Open a checklist note or create one if none exists, then open the more options menu for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Create the note 'Project Plan' if it doesn't exist, then search for the term 'deadline' within the note titled 'Project Plan'", "solution": "tap($create_note)\nnote_exists = False\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Project Plan':\n        note_exists = True\n        tap($open_note_title_list[i])\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Project Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($search_within_note)\nset_text($search_text, 'deadline')"}
{"task": "From the home screen, open the settings page and set the theme color of the app to blue.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\n# Since the task does not provide the exact selector for 'blue', 'custom' is selected instead\ntap($save_set_colors)"}
{"task": "Ensure a checklist is open and visible, then open 'Settings' from the more options menu of the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Create the note titled 'Shopping List' if it doesn't exist, and then edit the content of the note to add 'milk, eggs, and bread'", "solution": "tap($create_note)\nnote_exists = False\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Shopping List':\n        note_exists = True\n        tap($open_note_title_list[i])\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($note_content)\nset_text($note_content, 'milk, eggs, and bread')"}
{"task": "Open the alignment settings in the Notes APP and set the alignment to right", "solution": "tap($settings)\ntap($set_alignment)\ntap($theme_color_custom)"}
{"task": "If a note with the title 'Grocery List' already exists, rename that note to something else. Then, create a new text note titled 'Grocery List' and confirm.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Grocery List':\n        tap(open_notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Grocery List Old')\n        tap($rename_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the alignment settings in the app and set the alignment to center", "solution": "tap($settings)\ntap($set_alignment)\ntap($custom_type)"}
{"task": "Open a checklist if none is currently open, then sort the checklist items by custom order", "solution": "if not get_attributes($checklist_item_list):\n    tap($open_note)\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        tap(notes[i])\n        checklist_items = $checklist_item_list\n        if get_attributes(checklist_items):\n            break\n    tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "If a note with the title 'Weekend To-Do' already exists, rename the note title to something else, then create a new checklist note titled 'Weekend To-Do' and confirm", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nfor i in range(len(open_notes)):\n    if get_text(open_notes[i]) == 'Weekend To-Do':\n        tap(open_notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Weekend To-Do Old')\n        tap($rename_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Weekend To-Do')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open the settings menu and show the current font size", "solution": "tap($settings)\ncurrent_font_size = get_text($current_font_size)\nprint(current_font_size)"}
{"task": "Open the note titled 'To-Do List', add the item 'Call plumber' if it doesn't exist, and then check off the item 'Call plumber'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'To-Do List':\n        tap(notes[i])\n        break\nchecklist_items = $checklist_item_list\nitem_exists = False\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Call plumber':\n        item_exists = True\n        break\nif not item_exists:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Call plumber')\n    tap($add_checklist_item_ok)\nfor i in range(len(checklist_items)):\n    if get_text(checklist_items[i]) == 'Call plumber':\n        tap(checklist_items[i])\n        break"}
{"task": "Ensure a checklist is open and visible, then open more options for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Create the note titled 'Travel Plans' if it doesn't exist, then open the 'more options' menu for the note titled 'Travel Plans'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_exists = False\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Travel Plans':\n        note_exists = True\n        tap(notes[i])\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Plans')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Travel Plans':\n            tap(notes[i])\n            break\ntap($more_options_note)"}
{"task": "Open the settings menu and customize the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0: \n    tap($create_note)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open and then close the color customization window", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open or create a note, then open the settings page through note more options", "solution": "if len($open_note_title_list) == 0: \n    tap($create_note)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the settings menu in the Notes app if not already there and scroll through the settings page.", "solution": "if get_attributes($settings)['selected'] == False:\n    tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open or create a note if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0: \n    tap($create_note)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure there is an existing checklist open, then open 'more options' for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Ensure there is an existing note open, then open settings from 'more options' of the current note", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "If the current page is not the settings page, open the settings page. Then, set the theme of the app to light.", "solution": "try:\n    tap($settings)\nexcept:\n    pass\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\nback()"}
{"task": "Create a new note and select 'Checklist' type from the home page without any preparatory steps.", "solution": "tap($create_note)\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open a checklist note or create one, make it the current checklist, and remove done items from it.", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    for i in range(len(note_titles)):\n        tap(note_titles[i])\n        if 'checklist item' in [get_attributes($checklist_item_list)[0]]:  # Look for checklist indication\n            break\n        else:\n            back()  # Not a checklist, go back\nexcept:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Make sure there are done items in the current checklist and remove them.", "solution": "\nnumber_of_items = len($checklist_item_list)\ndone_items = $checklist_item_list.match({'checked': true})\nif len(done_items) > 0:\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)\n"}
{"task": "Ensure the note titled 'Grocery List' exists and then open it.", "solution": "\nopen_note_titles = $open_note_title_list\nnote_exists = False\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Grocery List':\n        note_exists = True\n        tap(open_note_titles[i])\n        break\nif not note_exists:\n    print('Note titled \"Grocery List\" does not exist.')\n"}
{"task": "Open the settings of the app and customize the colors.", "solution": "\ntap($settings)\ntap($set_colors)\n# Customize theme color, text color, background color, primary color, and app icon color\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($close_set_colors)\ntap($save_set_colors)\n"}
{"task": "Create a note titled 'Project Plan' if it doesn't exist, then open the Notes app and open the file for the note titled 'Project Plan'", "solution": "\n# Create note if it does not exist\ntap($open_note)\nopen_note_titles = $open_note_title_list\nnote_exists = False\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Project Plan':\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Project Plan')\n    tap($text_note_type)\n    tap($add_note_ok)\n# Open file for 'Project Plan'\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Project Plan':\n        tap(open_note_titles[i])\n        break\ntap($more_options_note)\ntap($open_file)\n"}
{"task": "Ensure the note contains the keyword 'project' and then search for the keyword 'project' within the current note", "solution": "\n# Ensure the note contains the keyword 'project'\nnote_content = get_text($note_content)\nif 'project' in note_content:\n    tap($search_within_note)\n    set_text($search_text, 'project')\nelse:\n    print('The note does not contain the keyword \"project\".')\n"}
{"task": "Ensure a checklist note is open and sort the current checklist items by date created", "solution": "if not $checklist_item_list:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    for note_title in note_titles:\n        tap(note_title)\n        if $checklist_item_list:\n            break\nelse:\n    if not $checklist_item_list:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings page if the current page is not the settings page, then set the theme of the app to dark.", "solution": "if not $settings:\n    tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one, make it the current checklist, and then sort checklist items by title.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor note_title in note_titles:\n    tap(note_title)\n    if $checklist_item_list:\n        break\nelse:\n    if not $checklist_item_list:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure a checklist note is open and sort the current checklist items by custom order", "solution": "if not $checklist_item_list:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    for note_title in note_titles:\n        tap(note_title)\n        if $checklist_item_list:\n            break\nelse:\n    if not $checklist_item_list:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Navigate to font settings and set the font size to 60%", "solution": "if not $settings:\n    tap($settings)\ntap($set_font_size)\ntap($font_size_60%)\n"}
{"task": "If the 'Daily Tasks' note has less than two checklist items, add multiple checklist items to it and then scroll through the checklist items.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\ndaily_tasks = open_note_titles.match('Daily Tasks')\nif len(daily_tasks) > 0:\n    tap(daily_tasks[0])\n    checklist_items = $checklist_item_list\n    if len(checklist_items) < 2:\n        for i in range(2 - len(checklist_items)):\n            tap($add_checklist_item)\n            set_text($add_checklist_item_title, f'Checklist Item {i+1}')\n            tap($add_checklist_item_ok)\n    else:\n        scroll($checklist_item_list, 'down')\n"}
{"task": "Open a checklist note or create one if none exists, then open more options for the current checklist.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles) > 0:\n    for note in open_note_titles:\n        tap(note)\n        if $checklist_item_list:\n            tap($more_options_checklist)\n            break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)\n"}
{"task": "Open the settings menu and set the theme of the app to Dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()\nback()\n"}
{"task": "Ensure the text 'Conference Call' is present in the current note, then search for 'Conference Call' within the note.", "solution": "content = get_text($note_content)\nif 'Conference Call' not in content:\n    set_text($note_content, 'Conference Call')\ntap($search_within_note)\nset_text($search_text, 'Conference Call')\n"}
{"task": "Open a checklist note or create one if none exists, mark some items as done, and then remove the done items from the current checklist.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif len(open_note_titles) > 0:\n    for note in open_note_titles:\n        tap(note)\n        if $checklist_item_list:\n            checklist_items = $checklist_item_list\n            for item in checklist_items:\n                tap(item)\n            tap($more_options_checklist)\n            tap($remove_done_checklist_items)\n            break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    for i in range(3):\n        tap($add_checklist_item)\n        set_text($add_checklist_item_title, f'Checklist Item {i+1}')\n        tap($add_checklist_item_ok)\n    tap($checklist_item_list[0])\n    tap($checklist_item_list[1])\n    tap($checklist_item_list[2])\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)\n"}
{"task": "Ensure the checklist item 'Eggs' exists in the 'Shopping List' note. If it doesn't exist, add it, and then delete the checklist item 'Eggs' from the note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nshopping_list_note = notes.match('Shopping List')\nif len(shopping_list_note) > 0:\n    tap(shopping_list_note[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($checklist_type)\n    tap($add_note_ok)\ntitle = get_text($item_title)\nwhile title != 'Shopping List':\n    tap($switch_to_next_item)\n    title = get_text($item_title)\nchecklist_items = $checklist_item_list\nitem_match = checklist_items.match('Eggs')\nif len(item_match) == 0:\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Eggs')\n    tap($add_checklist_item_ok)\n    tap($add_checklist_item_cancel)\n    item_match = checklist_items.match('Eggs')\nif len(item_match) > 0:\n    long_tap(item_match[0])\n    tap($delete_selected_checklist_item)\n"}
{"task": "Open a checklist note or create one if none exists, then sort the items of the current checklist by title.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nis_checklist_found = False\nfor i in range(len(notes)):\n    tap(notes[i])\n    is_checklist = len($checklist_item_list) > 0\n    if is_checklist:\n        is_checklist_found = True\n        break\nif not is_checklist_found:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Ensure a note is open and visible, then open settings from the current note's more options", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nif len(open_notes) > 0:\n    tap(open_notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)\n"}
{"task": "Change the font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\nback()\n"}
{"task": "Change the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)\nback()\n"}
{"task": "Open the settings menu in the Notes app if not already there, then scroll up the settings page.", "solution": "try:\n    scroll($scroll_settings_page, \"up\")\nexcept:\n    tap($settings)\n    scroll($scroll_settings_page, \"up\")"}
{"task": "Open the settings menu in the Notes app and customize the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open or create a checklist note if there is none, then open more options for the current checklist.", "solution": "if len($open_note_title_list) == 0:   \n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)   \nelse:\n    tap($switch_to_next_item)\n    try: \n        while len(get_attributes($checklist_item_list)) <= 0:\n            tap($switch_to_next_item)\n        tap($more_options_checklist)\n    except: \n        tap($switch_to_prev_item)\n        tap($more_options_checklist)"}
{"task": "Open the widget settings if not already there, then customize the colors of the widget.", "solution": "try:\n    tap($set_widget_colors)\nexcept:\n    tap($settings)\n    tap($set_widget_colors)"}
{"task": "Starting from the home page, tap the 'Open Note' button to view your most recent note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])"}
{"task": "Open the settings of the Notes app and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '90%'})[0])"}
{"task": "Open the settings of the Notes app and set the font size to 100%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '100%'})[0])"}
{"task": "Open the settings of the Notes app and set the font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '125%'})[0])"}
{"task": "Open the settings page if the current page is not the settings page, then set the theme of the app to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match({'text': 'Dark red'})[0])"}
{"task": "Open the settings of the app and enable 'Use Incognito mode of keyboards'", "solution": "tap($settings)\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open the settings page if the current page is not the settings page, and then set the theme of the app to white.", "solution": "\nif len($settings) == 0:\n    tap($more_options_note)\n    tap($settings)\nelse:\n    tap($settings)\n\nif not get_attributes($theme_color_white)['selected']:\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_white)\n    tap($save_set_colors)\n"}
{"task": "If the current page is not the settings page, open the settings page. Then, set the theme of the app to black and white.", "solution": "\nif len($settings) == 0:\n    tap($more_options_note)\n    tap($settings)\nelse:\n    tap($settings)\n\nif not get_attributes($theme_color_black_white)['selected']:\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_black_white)\n    tap($save_set_colors)\n"}
{"task": "If the current page is not the settings page, open the settings page, then scroll through the settings page.", "solution": "\nif len($settings) == 0:\n    tap($more_options_note)\n    tap($settings)\nelse:\n    tap($settings)\n\nscroll($scroll_settings_page, 'down')\n"}
{"task": "Ensure there is an existing checklist open, then open settings from 'more options' of the current checklist", "solution": "\ntap($more_options_checklist)\ntap($settings)\n"}
{"task": "Open the settings of the Notes app and disable 'Use Incognito mode of keyboards'", "solution": "\nif len($settings) == 0:\n    tap($more_options_note)\n    tap($settings)\nelse:\n    tap($settings)\n\nif get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)\n"}
{"task": "Check the Notes app for an existing note titled 'Meeting Notes' and, if found, rename it to something else before creating a new note with the title 'Meeting Notes'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor idx in range(len(note_titles)):\n    if get_text(note_titles[idx]) == 'Meeting Notes':\n        tap(note_titles[idx])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Meeting Notes')\n        tap($rename_ok)\n        back()\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the current note and tap on 'More options'", "solution": "tap($more_options_note)"}
{"task": "If a note with the title 'Shopping List' already exists, rename that note to something else. Then open the Notes app and rename the current note to 'Shopping List'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor idx in range(len(note_titles)):\n    if get_text(note_titles[idx]) == 'Shopping List':\n        tap(note_titles[idx])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Shopping List')\n        tap($rename_ok)\n        back()\n        break\nback()\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Shopping List')\ntap($rename_ok)"}
{"task": "Open a note or a checklist and tap on 'More Options'", "solution": "tap($more_options_note)"}
{"task": "Open the Notes app, create a note titled 'Daily Tasks' if it doesn't exist, and then create a shortcut for the note titled 'Daily Tasks'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nexists = False\nfor idx in range(len(note_titles)):\n    if get_text(note_titles[idx]) == 'Daily Tasks':\n        exists = True\n        break\nback()\nif not exists:\n    tap($create_note)\nset_text($add_note_title, 'Daily Tasks')\ntap($text_note_type)\ntap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Create the note titled 'Private Journal' if it doesn't exist, then open the Notes app and lock the note titled 'Private Journal'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nexisting_notes = [get_text(note) for note in notes]\nif 'Private Journal' not in existing_notes:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Private Journal')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    private_note_idx = existing_notes.index('Private Journal')\n    tap(notes[private_note_idx])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the settings page from the home page and customize the colors in the app", "solution": "tap($settings)\ntap($set_colors)\n# Customize the exact color customization as required\ntap($customize_theme)\nselect_theme_option = $theme_color_types.match('Dark')\nif len(select_theme_option) > 0:\n    tap(select_theme_option[0])\ntap($save_set_colors)"}
{"task": "Open the settings page from the home page and set the text color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\n# Customize the exact text color as required\ntap($save_set_colors)"}
{"task": "Open the settings page from the home page and set the background color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Customize the exact background color as required\ntap($save_set_colors)"}
{"task": "Ensure no conflicting note titles exist and add a new note of type 'text note'.", "solution": "tap($open_note)\nnote_titles = [get_text(note) for note in $open_note_title_list]\nunique_title = False\nsuffix = 1\nnew_note_title = 'New Note'\nwhile not unique_title:\n    if new_note_title in note_titles:\n        new_note_title = f'New Note {suffix}'\n        suffix += 1\n    else:\n        unique_title = True\n        break\nback()\ntap($create_note)\nset_text($add_note_title, new_note_title)\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Select a note or have a note open, then confirm the deletion of the current note.", "solution": "tap($open_note)\n# If there are any notes, select the first one\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open or create a note if there is none, then lock the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open or create a note if there is none, then open the file of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open the specific note to be deleted and choose the option to delete the current note.", "solution": "tap($open_note)\n# Open the specific note to be deleted, assuming it is the first one in the list\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)"}
{"task": "Open the theme color settings in the app and change the theme color", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "If the current page is not the settings page, open the settings page. Then, exit the settings page.", "solution": "\nif not get_attributes($settings)[\"selected\"]:\n    tap($more_options_note)\n    tap($settings)\ntap($exit_settings)\n"}
{"task": "Open the settings page and enable 'Use monospaced font'", "solution": "\ntap($settings)\ntap($set_use_monospaced_font)\ntap($exit_settings)\n"}
{"task": "Open the settings of the Notes app and enable 'Enable line wrap'", "solution": "\ntap($settings)\ntap($set_enable_line_wrap)\ntap($exit_settings)\n"}
{"task": "Navigate to font settings and set the font size to 75%.", "solution": "\ntap($settings)\ntap($set_font_size)\ntap($font_size_75%)\ntap($exit_settings)\n"}
{"task": "Open a new note from the home page", "solution": "\ntap($open_note)\ntap($create_note)\n"}
{"task": "Ensure no conflicting checklist note titles exist and add a new note of type 'checklist'", "solution": "titles = $open_note_title_list\nexisting_titles = [get_text(title) for title in titles]\nnew_title = 'Checklist Note'\nif new_title not in existing_titles:\n    tap($create_note)\n    set_text($add_note_title, new_title)\n    tap($checklist_type)\n    tap($add_note_ok)"}
{"task": "Open the note to be edited or create a new one, then edit the content of the current note to 'Meeting notes at 10 am'", "solution": "titles = $open_note_title_list\nnote_to_edit = [title for title in titles if 'Meeting notes at 10 am' in get_text(title)]\nif len(note_to_edit) > 0:\n    tap(note_to_edit[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Temporary Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nset_text($note_content, 'Meeting notes at 10 am')"}
{"task": "If a note with the title 'Meeting Notes' already exists, rename that existing note to something else, then rename the current note to 'Meeting Notes'.", "solution": "titles = $open_note_title_list\nmeeting_notes = [title for title in titles if get_text(title) == 'Meeting Notes']\nif len(meeting_notes) > 0:\n    tap(meeting_notes[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Meeting Notes')\n    tap($rename_ok)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open a note and tap on 'Search' within the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($search_within_note)"}
{"task": "Open a note that can be locked if none is currently opened and then lock the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Temporary Lockable Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a note and tap the 'More options' button to see additional features for the current note.", "solution": "tap($open_note)\ntap($more_options_note)"}
{"task": "Open a note that can be deleted if none is currently opened, then delete the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the current note and rename it to 'Shopping List'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Shopping List')\ntap($rename_ok)"}
{"task": "Have a note open and then open more options for the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the current note and lock it", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Navigate to the settings page from the home page and set the font size of the app to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'selected': false})[7])"}
{"task": "Navigate to the settings page from the home page and set the font size of the app to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'selected': false})[8])"}
{"task": "Open more options for the current checklist, ensuring there is an open checklist to access", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Navigate to the settings page from the home page and set the font size of the app to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'selected': false})[9])"}
{"task": "Open the settings from the home page.", "solution": "tap($settings)"}
{"task": "Open the settings menu in the Notes app and set the font size.", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Open settings and set the background color of the Notes app to blue", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)"}
{"task": "Open a checklist note or create one if there is none, then tap on the 'more options' button for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0: \n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the app settings", "solution": "tap($settings)"}
{"task": "Open a note or create one if there is none, then open more options in the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0: \n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings and uncheck the box for 'show a note picker on startup'", "solution": "tap($settings)\ncheckbox = $set_show_a_note_picker_on_startup\nattributes = get_attributes(checkbox)\nif attributes['selected']:\n    tap(checkbox)"}
{"task": "Enable word count display directly from the home page in the Notes app.", "solution": "tap($settings)\ntap($set_show_word_count)\nback()"}
{"task": "Activate clickable links and emails in the Notes app from the home page.", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)\nback()"}
{"task": "Switch to using a monospaced font in the Notes app directly from the home page.", "solution": "tap($settings)\ntap($set_use_monospaced_font)\nback()"}
{"task": "If a note with the title 'Shopping List' already exists, rename the note title to something else. Then, create a new note titled 'Shopping List'.", "solution": "tap($open_note)\nopen_titles = $open_note_title_list\nfor i in range(len(open_titles)):\n    if get_text(open_titles[i]) == 'Shopping List':\n        long_tap(open_titles[i])\n        tap($rename_note)\n        set_text($rename_input, 'Old Shopping List')\n        tap($rename_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Shopping List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open settings and change the app icon color to red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\n# assuming 'red' corresponds to one of the selection options in a popup\n# and it's at the index we select based on prior knowledge.\n# Since we have no such index stated here, this is a placeholder.\n# Replace the index appropriately.\ntap($theme_color_types[2])  # example index\ntap($save_set_colors)"}
{"task": "Ensure a checklist is open and visible, then display all items in the current checklist", "solution": "tap($open_note)\n# assuming we have a checklist open\nitems = $checklist_item_list\nfor i in range(len(items)):\n    print(get_text(items[i]))"}
{"task": "Open settings and set the background color of the app to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\n# assuming 'white' corresponds to one of the selection options in a popup\n# and it's at the index we select based on prior knowledge.\n# Since we have no such index stated here, this is a placeholder.\n# Replace the index appropriately.\ntap($theme_color_types[4])  # example index\ntap($save_set_colors)"}
{"task": "Open the settings in the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Open settings and update the primary color of the app to green", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\n# assuming 'green' corresponds to one of the selection options in a popup\n# and it's at the index we select based on prior knowledge.\n# Since we have no such index stated here, this is a placeholder.\n# Replace the index appropriately.\ntap($theme_color_types[3])  # example index\ntap($save_set_colors)"}
{"task": "Open the settings page and disable 'Use monospaced font'", "solution": "tap($settings)\nif get_attributes($set_use_monospaced_font)['checked']:\n    tap($set_use_monospaced_font)"}
{"task": "Open the settings of the Notes app and disable 'Enable line wrap'", "solution": "tap($settings)\nif get_attributes($set_enable_line_wrap)['checked']:\n    tap($set_enable_line_wrap)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else; then create a new note titled 'Grocery List'", "solution": "tap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Grocery List':\n        tap($open_note_title_list[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Grocery List')\n        tap($rename_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open the settings of the app and set alignment", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "From the home page, create a new checklist note", "solution": "tap($create_note)\nset_text($add_note_title, 'New Checklist')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Ensure there is an existing checklist open, then access more options to lock the current checklist.", "solution": "tap($more_options_checklist)\ntap($more_option_checklist_buttons.match('lock note')[0])\ntap($lock_note_ok)"}
{"task": "Open the settings of the Notes APP and switch the app theme to dark red mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open the settings of the app and set the app theme to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Open the Settings to enable the dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Open the settings of the app and activate the Black & White theme", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Open settings and set the primary color of the app to green", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom)"}
{"task": "If the current page is not the settings page, open the settings page. Then, exit the settings page.", "solution": "if len($scroll_settings_page) == 0:\n    tap($settings)\ntap($exit_settings)"}
{"task": "Rename the note and confirm the renaming", "solution": "tap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'New Note Title')\ntap($rename_ok)"}
{"task": "Open settings and set the app icon color to red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_custom)"}
{"task": "Open a note or create one if there is none, then scroll to switch to the next item in the Notes app", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nscroll($note_content, 'down')"}
{"task": "Open multiple notes in the application, then switch to the previous note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\ntap(notes[0])\ntap($open_note)\ntap(notes[1])\ntap($switch_to_prev_item)"}
{"task": "Open a note or create one if there is none, then open the more options menu for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note or create one if none exists, then open more options of the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure the word 'courage' exists in the note titled 'Book Quotes'. Then, search for 'courage' in that note and go to the previous match.", "solution": "if len($open_note_title_list) == 0 or not any(get_text(note) == 'Book Quotes' for note in $open_note_title_list):\n    tap($create_note)\n    set_text($add_note_title, 'Book Quotes')\n    tap($text_note_type)\n    tap($add_note_ok)\nnote_to_edit = [note for note in $open_note_title_list if get_text(note) == 'Book Quotes'][0]\ntap(note_to_edit)\nif 'courage' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + '\\ncourage')\ntap($search_within_note)\nset_text($search_text, 'courage')\ntap($prev_matched_text)"}
{"task": "Open multiple notes in the application and switch to the next note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\ntap(notes[0])\ntap($open_note)\ntap(notes[1])\ntap($switch_to_next_item)"}
{"task": "Navigate to the settings page from the home page and set the font size of the app to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('300%')[0])"}
{"task": "Navigate to the settings page from the home page to show the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)\nprint(get_text($font_size_types.match({'selected': True})[0]))"}
{"task": "Open the settings page from the home page and show the current font size of the app", "solution": "tap($settings)\ntap($current_font_size)\nprint(get_text($font_size_types.match({'selected': True})[0]))"}
{"task": "Open the current note and then open the file of the note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open the settings and customize the colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Ensure a note is open and then edit the note content to include 'Meeting at 10 AM'", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    set_text($note_content, 'Meeting at 10 AM')"}
{"task": "Ensure a note is open and then open more options for the current note", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)"}
{"task": "Navigate to the settings page and set the app font size to 50%", "solution": "\ntap($settings)\ntap($set_font_size)\ntap($font_size_50%)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure there is an existing note open and save the changes made to the note.", "solution": "\ntap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    tap($save_note)"}
{"task": "Navigate to the settings page and set the app font size to 60%", "solution": "\ntap($settings)\ntap($set_font_size)\ntap($font_size_60%)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure no note with the title 'Meeting Tasks' exists and create a new note titled 'Meeting Tasks' with note type 'Checklist'", "solution": "tap($open_note)\nif len($open_note_title_list.match('Meeting Tasks')) > 0:\n    long_tap($open_note_title_list.match('Meeting Tasks')[0])\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Meeting Tasks')\ntap($checklist_type)\ntap($add_note_ok)\nback()"}
{"task": "Open a note or create one if there is none, then open the more options menu for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Perform a search within the note and scroll to the previous matching search result within the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'search_term')\ntap($prev_matched_text)"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Ensure that there is at least one note in the note list, then open the first note in the note title list.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])"}
{"task": "Ensure the note titled 'Shopping List' exists and then open it", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Shopping List':\n        tap(note)\n        break"}
{"task": "Ensure a note is open and then type 'Buy milk' in the current note", "solution": "if not get_attributes($note_content)['selected']:\n    tap($open_note)\n    notes = $open_note_title_list\n    tap(notes[0])\nset_text($note_content, 'Buy milk')"}
{"task": "Navigate to the settings page and set the app font size to 150%", "solution": "tap($settings)\nfont_sizes = $font_size_types\nfor size in font_sizes:\n    if get_text(size) == '150%':\n        tap(size)\n        break\nback()"}
{"task": "If a note with the title 'Holiday Plans' already exists, rename that note to something else, then rename the note titled 'Vacation Plans' to 'Holiday Plans'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor note in notes:\n    if get_text(note) == 'Holiday Plans':\n        tap(note)\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Holiday Plans - Renamed')\n        tap($rename_ok)\n        break\nfor note in notes:\n    if get_text(note) == 'Vacation Plans':\n        tap(note)\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Holiday Plans')\n        tap($rename_ok)\n        break"}
{"task": "Navigate to the settings page and set the app font size to 100%", "solution": "tap($settings)\nfont_sizes = $font_size_types\nfor size in font_sizes:\n    if get_text(size) == '100%':\n        tap(size)\n        break\nback()"}
{"task": "Open the custom theme color settings in the Notes APP and change the theme to a custom color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\n"}
{"task": "Open settings and set the theme color of the app to light", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\n"}
{"task": "Open the font size settings in the app and set the font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '125%'})[0])\n"}
{"task": "Open the Notes app from the home screen and customize the app colors in the settings", "solution": "tap($settings)\ntap($set_colors)\n"}
{"task": "Open settings and set the theme color of the app to dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\n"}
{"task": "Ensure the note titled 'Project Ideas' exists and create a shortcut for it.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Project Ideas':\n        tap(note_titles[i])\n        break\ntap($more_options_note)\ntap($create_shortcut)\n"}
{"task": "Open about section in the Notes app from the home page", "solution": "tap($more_options_note)\ntap($about)\n"}
{"task": "Open the settings menu from the home page", "solution": "tap($more_options_note)\ntap($settings)\n"}
{"task": "Navigate to the settings page from the home page and set the font size to 50%.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match('50%')[0])\n"}
{"task": "Open the search box and then close it.", "solution": "tap($search_within_note)\ntap($close_search_box)\n"}
{"task": "Ensure the note titled 'Sensitive Information' exists, and then lock it.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nsensitive_note = note_titles.match('Sensitive Information')\nif len(sensitive_note) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Sensitive Information')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap(sensitive_note[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "If a note with the title 'Project Plan' already exists, rename or delete it, then create a new note titled 'Project Plan'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nproject_note = note_titles.match('Project Plan')\nif len(project_note) > 0:\n    tap(project_note[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Project Plan')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open an existing note or create a new note and make it the current note, then open settings from the more options menu and set the alignment of the app.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_alignment)"}
{"task": "First, check if a note with the title 'Project Plan' already exists. If it does, rename or delete it to avoid naming conflicts. Then, create a new note titled 'Project Plan' and add 'Timeline and milestones' as the content for the new note.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nproject_note = note_titles.match('Project Plan')\nif len(project_note) > 0:\n    tap(project_note[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Project Plan')\ntap($text_note_type)\ntap($add_note_ok)\ntap($note_content)\nset_text($note_content, 'Timeline and milestones')\ntap($save_note)"}
{"task": "Open a checklist note or create one to make it the current checklist, then set the alignment of the app after opening settings from the more options menu for the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Checklist')) > 0:\n    tap($open_note_title_list.match('Checklist')[0])\nelse:\n    tap($create_note)\nset_text($add_note_title, 'Checklist')\ntap($checklist_type)\ntap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\ntap($set_alignment)"}
{"task": "Ensure you are on the settings page in the Notes app, then exit the settings page", "solution": "tap($exit_settings)"}
{"task": "Open settings, set the theme color to dark mode, and save the changes", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Initiate the creation of a new note and confirm its creation", "solution": "tap($create_note)\ntap($add_note_ok)"}
{"task": "Ensure a note is open and visible, then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the current note and rename it to 'Project Plan'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Project Plan')\ntap($rename_ok)"}
{"task": "Open the note titled 'Groceries List' and then open the options for the 'Groceries List' note", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nnote_title = open_note_titles.match('Groceries List')[0]\ntap(note_title)\ntap($more_options_note)"}
{"task": "Open an existing note or create a new note to make it the current note, then customize the colors of the app by opening the settings menu from the more options menu.", "solution": "try:\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    if len(open_note_titles) > 0:\n        tap(open_note_titles[0])\n    else:\n        raise Exception('No existing notes')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Ensure there is no existing note titled 'Grocery List' by renaming or deleting it if necessary, then create a new note titled 'Grocery List' with note type 'Text'.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor note in open_note_titles:\n    if get_text(note) == 'Grocery List':\n        tap(note)\n        tap($more_options_note)\n        try:\n            tap($rename_note)\n            set_text($rename_input, 'Remove_Grocery_List')\n            tap($rename_ok)\n        except:\n            tap($delete_note)\n            tap($delete_note_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open or create a checklist note to make it the current checklist, then open the settings menu from the more options menu to customize the colors of the app.", "solution": "try:\n    tap($open_note)\n    open_note_titles = $open_note_title_list\n    for note in open_note_titles:\n        tap(note)\n        if get_attributes($checklist_item_list):\n            break\n    else:\n        raise Exception('No checklist notes available')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\ntap($set_colors)"}
{"task": "Ensure that the note titled 'Budget 2023' exists and then export it as a file", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor note in open_note_titles:\n    if get_text(note) == 'Budget 2023':\n        tap(note)\n        tap($more_options_note)\n        tap($export_as_file)\n        break\nelse:\n    raise Exception('Budget 2023 note does not exist')"}
{"task": "Show information about the Notes app starting from the home page", "solution": "tap($open_note)\ntap($more_options_note)\ntap($about)"}
{"task": "If a note with the title 'Project Checklist' already exists, rename that note to something else. Then, rename the current note from 'Work Tasks' to 'Project Checklist' and confirm.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Project Checklist':\n        tap(open_note_titles[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Temporary Name')\n        tap($rename_ok)\n        back()\n        break\nopen_note_titles = $open_note_title_list\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Work Tasks':\n        tap(open_note_titles[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Project Checklist')\n        tap($rename_ok)\n        break"}
{"task": "Open or create a note titled 'Personal Diary' and lock it.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nexisting_note = False\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Personal Diary':\n        existing_note = True\n        tap(open_note_titles[i])\n        break\nif not existing_note:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Personal Diary')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open a checklist note titled 'Grocery Items' if it exists, or create it if it does not, and then print the current checklist titled 'Grocery Items'", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nexisting_note = False\nfor i in range(len(open_note_titles)):\n    if get_text(open_note_titles[i]) == 'Grocery Items':\n        existing_note = True\n        tap(open_note_titles[i])\n        break\nif not existing_note:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Grocery Items')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($print_note)"}
{"task": "Open the settings menu starting from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Ensure the word 'deadline' exists in the current note and then search for it.", "solution": "set_text($note_content, get_text($note_content) + ' deadline')\ntap($search_within_note)\nset_text($search_text, 'deadline')"}
{"task": "Ensure the word 'budget' exists in the current note, then find its previous occurrence.", "solution": "set_text($note_content, get_text($note_content) + ' budget')\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($prev_matched_text)"}
{"task": "Open an existing note from the Notes APP on a smartphone starting from the home page.", "solution": "tap($open_note)\ntap($open_note_title_list[0])"}
{"task": "If a note with the title 'Meeting Notes' already exists, rename the existing note title to something else and then rename the current note to 'Meeting Notes'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Meeting Notes')\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Note')\n    tap($rename_ok)\nset_text($note_content, get_text($note_content))\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Ensure the word 'project' exists in the current note and then find the next occurrence of the word 'project' in the current note.", "solution": "set_text($note_content, get_text($note_content) + ' project')\ntap($search_within_note)\nset_text($search_text, 'project')\ntap($next_matchhed_text)"}
{"task": "Open a checklist note or create one if none exists, then open more options of the current checklist.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match({'type': 'checklist'})[0])\ntap($more_options_checklist)"}
{"task": "Ensure the 'Daily Journal' note has at least one entry, then edit the note by deleting the last entry.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Daily Journal')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Daily Journal')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match('Daily Journal')[0])\nentries = get_text($note_content).split('\\n')\nlast_entry = entries[-1] if len(entries) > 0 and entries[-1].strip() != '' else None\nif last_entry:\n    new_content = '\\n'.join(entries[:-1])\n    set_text($note_content, new_content)\ntap($save_note)"}
{"task": "Ensure there are unsaved changes in the note titled 'Workout Routine' and then save the note after making edits.", "solution": "tap($open_note)\ntap($open_note_title_list.match('Workout Routine')[0])\nset_text($note_content, 'Updated Workout Routine')\ntap($save_note)"}
{"task": "Open the note titled 'Travel Checklist' and then open more options for it", "solution": "tap($open_note)\ntap($open_note_title_list.match('Travel Checklist')[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if none exists, then tap 'more options' and 'Sort by' to sort the checklist items by 'Title'.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match({'type': 'checklist'})[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings page if the current page is not the settings page, then update the font size to 200%.", "solution": "if 'settings_page' not in globals() or not settings_page:\n    tap($settings)\n    settings_page = True\nif get_attributes($font_size_200%)['checked'] == False:\n    tap($set_font_size)\n    tap($font_size_200%)\n    tap($set_font_size_ok)"}
{"task": "Open a note that allows accessing more options if none is currently opened, then open more options for the current note", "solution": "if 'note_opened' not in globals() or not note_opened:\n    tap($open_note)\n    tap($open_note_title_list[0])\n    note_opened = True\ntap($more_options_note)"}
{"task": "If the current page is not the settings page, open the settings page and then increase the font size to 250%", "solution": "if 'settings_page' not in globals() or not settings_page:\n    tap($settings)\n    settings_page = True\nif get_attributes($font_size_250%)['checked'] == False:\n    tap($set_font_size)\n    tap($font_size_250%)\n    tap($set_font_size_ok)"}
{"task": "Open the Notes APP settings from the home page", "solution": "tap($settings)"}
{"task": "Open a checklist note that allows accessing more options if none is currently opened, then open more options for the current checklist", "solution": "if 'checklist_opened' not in globals() or not checklist_opened:\n    tap($open_note)\n    tap($open_note_title_list[0])\n    checklist_opened = True\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if none exists, then tap 'more options' and 'Sort by' to sort the checklist items by 'Date created'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure the word 'appointment' exists in the current note and then search for 'appointment' within the current note to go to the next match", "solution": "if 'appointment' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' appointment')\ntap($search_within_note)\nset_text($search_text, 'appointment')\ntap($next_matchhed_text)"}
{"task": "Open a checklist note or create one if none exists, then tap 'more options', tap 'Sort by', and sort the checklist items by 'Custom'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist note or create one if there is none, then open the checklist options.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings and check the box for 'autosave notes'", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nif not get_attributes($set_autosave_notes)['checked']:\n    tap($set_autosave_notes)"}
{"task": "Open a checklist if none is currently open, then save the current sort type of the checklist", "solution": "if not get_attributes($checklist_item_list):\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'Sample Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Open or create a note if there is none, then export the current note as a file.", "solution": "if not get_attributes($open_note):\n    tap($open_note)\n    if len($open_note_title_list) == 0:\n        tap($create_note)\n        set_text($add_note_title, 'Sample Note')\n        tap($text_note_type)\n        tap($add_note_ok)\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the text color settings in the app and change the text color.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_text_color)"}
{"task": "Open the settings page if the current page is not the settings page, then set the font size to 100%", "solution": "if not get_attributes($settings) and not get_attributes($scroll_settings_page):\n    tap($settings)\\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "Open the background color settings in the Notes APP and change the background color.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_background_color)"}
{"task": "Open the settings and uncheck the box for 'autosave notes'", "solution": "tap($settings)\nboxes = $settings\nfor box in boxes:\n    if get_text(box) == 'autosave notes' and get_attributes(box)['checked']:\n        tap(box)\n        break"}
{"task": "Open the settings and check the box for 'display save success messages'", "solution": "tap($settings)\nboxes = $settings\nfor box in boxes:\n    if get_text(box) == 'display save success messages' and not get_attributes(box)['checked']:\n        tap(box)\n        break"}
{"task": "Set a new theme color for the app by navigating to the settings from the home page", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types[<idx_for_new_theme_color>])\ntap($save_set_colors)"}
{"task": "Navigate to settings from the home page and change the text color of the app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\ntap($theme_color_types[<idx_for_new_text_color>])\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one if none exists, choose a sort type, and confirm the sorting type of checklist items by tapping 'OK'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($note_titles[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_types[<idx_for_sort_type>])\ntap($sort_checklist_items_ok)"}
{"task": "Create the note titled 'Meeting Minutes' if it doesn't exist, then open the note 'Meeting Minutes'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('Meeting Minutes')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap(notes.match('Meeting Minutes')[0])"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nall_notes = $open_note_title_list\nif len(all_notes.match({'selected': True})) > 0 and get_attributes(all_notes.match({'selected': True})[0])['selected']:\n    current_note_index = [i for i, note in enumerate(all_notes) if get_attributes(note)['selected']][0]\n    if 'checklist' in get_text(current_note_index).lower():\n        tap($more_options_checklist)\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Checklist')\n        tap($checklist_type)\n        tap($add_note_ok)\n        tap($more_options_checklist)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)"}
{"task": "If a note with the title 'Project Meeting' already exists, rename the existing note to something else and then rename the note 'Meeting Minutes' to 'Project Meeting'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('Project Meeting')) > 0:\n    tap(notes.match('Project Meeting')[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Note')\n    tap($rename_ok)\ntap(notes.match('Meeting Minutes')[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Project Meeting')\ntap($rename_ok)"}
{"task": "Open the settings page if the current page is not the settings page, then set the font size to 150%", "solution": "if len($scroll_settings_page) == 0:\n    tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Open the settings page if the current page is not the settings page, then open the font size settings", "solution": "if len($scroll_settings_page) == 0:\n    tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)"}
{"task": "Open app settings", "solution": "tap($settings)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by title", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "If a note titled 'Travel Packing List' already exists, delete it or rename it, then create a new checklist note titled 'Travel Packing List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Travel Packing List')\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)\n    if len($more_option_note_buttons.match('Delete note')) > 0:\n        tap($delete_note)\n        tap($delete_note_ok)\n    else:\n        tap($rename_note)\n        set_text($rename_input, 'Old Travel Packing List')\n        tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Travel Packing List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Navigate to the settings page from the home page and set the font size to 100%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist or create one if there is none, then sort the current checklist items by tapping 'Sort by' and confirm with 'OK'", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) == 0:  # If no notes exist\n        tap($create_note)\n        tap($checklist_type)\n        set_text($add_note_title, 'New Checklist')\n        tap($add_note_ok)\n    else:\n        tap(note_titles[0])\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($title_type)\n    tap($sort_checklist_items_ok)\nexcept Exception as e:\n    print(e)"}
{"task": "Open a note or create one if none exists, then enable the use of monospaced font in the note.", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) == 0:  # If no notes exist\n        tap($create_note)\n        tap($text_note_type)\n        set_text($add_note_title, 'New Note')\n        tap($add_note_ok)\n    else:\n        tap(note_titles[0])\n    tap($more_options_note)\n    tap($settings)\n    tap($set_use_monospaced_font)\n    back()  # Exit settings\nexcept Exception as e:\n    print(e)"}
{"task": "Open the settings menu in the Notes app and turn off autosave for notes.", "solution": "try:\n    tap($more_options_note)\n    tap($settings)\n    tap($set_autosave_notes)\n    back()  # Exit settings\nexcept Exception as e:\n    print(e)"}
{"task": "Ensure a checklist is open and visible, then open more options for the current checklist", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) == 0:  # If no notes exist\n        tap($create_note)\n        tap($checklist_type)\n        set_text($add_note_title, 'New Checklist')\n        tap($add_note_ok)\n    else:\n        tap(note_titles[0])\n    tap($more_options_checklist)\nexcept Exception as e:\n    print(e)"}
{"task": "Open the current note and then open more options for the current note", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) == 0:  # If no notes exist\n        tap($create_note)\n        tap($text_note_type)\n        set_text($add_note_title, 'New Note')\n        tap($add_note_ok)\n    else:\n        tap(note_titles[0])\n    tap($more_options_note)\nexcept Exception as e:\n    print(e)"}
{"task": "Open the settings page if the current page is not the settings page, then modify the font size to 100%.", "solution": "if not get_attributes($settings)[\"selected\"]:\n    tap($settings)\nif not get_attributes($font_size_100%)[\"selected\"]:\n    tap($current_font_size)\n    tap($font_size_100%)"}
{"task": "Ensure there is an existing note open, then delete the current note after accessing more options.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) > 0:\n    tap(note_titles[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Open the settings page if the current page is not the settings page and change the font size to 125%.", "solution": "if not get_attributes($settings)[\"selected\"]:\n    tap($settings)\nif not get_attributes($font_size_125%)[\"selected\"]:\n    tap($current_font_size)\n    tap($font_size_125%)"}
{"task": "If the current page is not the settings page, open the settings page and then set the font size to 150%", "solution": "if not get_attributes($settings)[\"selected\"]:\n    tap($settings)\nif not get_attributes($font_size_150%)[\"selected\"]:\n    tap($current_font_size)\n    tap($font_size_150%)"}
{"task": "Open the settings of the app to enable making links and emails clickable", "solution": "if not get_attributes($settings)[\"selected\"]:\n    tap($settings)\nif not get_attributes($set_make_links_and_emails_clickable)[\"selected\"]:\n    tap($set_make_links_and_emails_clickable)"}
{"task": "Open the more options menu for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Open the search box and then close the search box", "solution": "tap($search_within_note)\ntap($close_search_box)"}
{"task": "Open more options in the current note on the home page", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the Notes app from the home page and create a new text note", "solution": "tap($open_note)\ntap($create_note)\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings of the Notes app and change the font to monospaced.", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Open the settings page if the current page is not the settings page, and then adjust the font size to 175%", "solution": "attributes = get_attributes($settings)\nif not attributes['selected']: tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '175%'})[0])"}
{"task": "Open the settings of the app and enable the option to show a note picker on startup", "solution": "tap($settings)\ntap($set_show_a_note_picker_on_startup)"}
{"task": "Open or create a checklist note and then open more options for the current checklist", "solution": "openNoteAttributes = get_attributes($open_note)\nif openNoteAttributes['selected']: tap($open_note)\ntap($create_note)\ntap($checklist_type)\ntap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Navigate to font settings and set the font size to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '90%'})[0])"}
{"task": "Open the widget customization section within app settings to customize the widget colors for the Notes app.", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Ensure there are at least three notes available, then open the third note in the list.", "solution": "tap($open_note)\nif len($open_note_title_list) < 3:\n    tap($create_note)\n    set_text($add_note_title, 'Note 1')\n    tap($add_note_ok)\n    tap($create_note)\n    set_text($add_note_title, 'Note 2')\n    tap($add_note_ok)\n    tap($create_note)\n    set_text($add_note_title, 'Note 3')\n    tap($add_note_ok)\ntap($open_note_title_list[2])"}
{"task": "Open Settings", "solution": "tap($settings)"}
{"task": "Navigate to theme settings to customize theme colors.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Navigate to theme settings and change theme to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)"}
{"task": "Navigate to theme settings and change theme to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Open a note and then open more options for the current note", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nif len(note_list) > 0:\n    tap(note_list[0])\ntap($more_options_note)"}
{"task": "If a note with the title 'Meeting Notes' already exists, rename the note title to something else, then create a new note with the title 'Meeting Notes'.", "solution": "tap($open_note)\ntitle_list = $open_note_title_list.match('Meeting Notes')\nif len(title_list) > 0:\n    tap(title_list[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Renamed Note')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($add_note_ok)"}
{"task": "Open a note that allows accessing more options if none is currently opened, then open more options for the current note and access settings.", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nif len(note_list) > 0:\n    tap(note_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the current checklist file", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nif len(note_list) > 0:\n    tap(note_list[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open the font size settings in the app and show the current font size", "solution": "tap($settings)\ntap($set_font_size)\ntap($current_font_size)\ncurrent_size = get_text($current_font_size)\ncurrent_size"}
{"task": "From the home screen, go to settings and enable 'show a note picker on startup'.", "solution": "tap($settings)\nif get_attributes($set_show_a_note_picker_on_startup)['checked'] == False:\n    tap($set_show_a_note_picker_on_startup)"}
{"task": "Open settings and disable the display save success messages option.", "solution": "tap($settings)\nif get_attributes($set_display_save_success_messages)['checked'] == True:\n    tap($set_display_save_success_messages)"}
{"task": "Open a checklist note or create one if there is none, then open more options in the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a note or create one if there is none, then lock the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Ensure notes exist and export all notes", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Sample Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($export_notes)"}
{"task": "From the home screen, open the settings menu and activate 'autosave notes'.", "solution": "tap($settings)\ntap($set_autosave_notes)\nback()"}
{"task": "Open the app settings, navigate to the theme color settings, and set the theme color to dark.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()"}
{"task": "Have the file ready and import notes from the file", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Sample Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($import_notes)"}
{"task": "In the settings of the Notes APP, turn on 'display save success messages' option.", "solution": "tap($settings)\ntap($set_display_save_success_messages)\nback()"}
{"task": "Open settings and enable automatic backups", "solution": "tap($settings)\ntap($set_enable_automatic_backups)"}
{"task": "Open the settings menu and enable Incognito mode for keyboards", "solution": "tap($settings)\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open settings and disable automatic backups", "solution": "tap($settings)\nif get_attributes($set_enable_automatic_backups)[\"checked\"]:\n    tap($set_enable_automatic_backups)"}
{"task": "Open the settings menu and enable line wrap", "solution": "tap($settings)\ntap($set_enable_line_wrap)"}
{"task": "Open the note titled 'Meeting Minutes' and print the current note.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nmeeting_minutes_note = [item for item in open_note_titles if get_text(item) == 'Meeting Minutes']\nif meeting_minutes_note:\n    tap(meeting_minutes_note[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "Open the settings page if the current page is not the settings page, then view the current font size", "solution": "if len($scroll_settings_page) == 0:\n    tap($more_options_note)\n    tap($settings)\ntap($current_font_size)"}
{"task": "Go to settings from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Create the note titled 'Travel Itinerary' if it doesn't exist and then create a shortcut for it.", "solution": "found_note = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == \"Travel Itinerary\":\n        tap($open_note_title_list[i])\n        found_note = True\n        break\nif not found_note:\n    back()\n    tap($create_note)\n    set_text($add_note_title, \"Travel Itinerary\")\n    tap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open or create a checklist note, then open more options for the current checklist", "solution": "checklist_found = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    tap($more_options_checklist)\n    checklist_found = True\n    break\nif not checklist_found:\n    back()\n    tap($create_note)\n    set_text($add_note_title, \"New Checklist\")\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note or create one if there is none, then open the more options menu for the current note", "solution": "note_found = False\ntap($open_note)\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    tap($more_options_note)\n    note_found = True\n    break\nif not note_found:\n    back()\n    tap($create_note)\n    set_text($add_note_title, \"New Note\")\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open an existing note or create a new note, then set the text color to red.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($set_colors)\ntap($set_text_color)\n# Assuming the color red is represented with some predefined ID or attribute\nred_color = $theme_color_types.match({'selected': false})[0]\ntap(red_color)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings page if the current page is not the settings page, then enable line wrap.", "solution": "if not 'settings' in get_text($item_title).lower():\n    tap($more_options_note)\n    tap($settings)\ncheckbox = get_attributes($set_enable_line_wrap)\nif not checkbox['checked']:\n    tap($set_enable_line_wrap)\nback()"}
{"task": "Open the settings page if the current page is not the settings page, then set alignment of the app to center", "solution": "if not 'settings' in get_text($item_title).lower():\n    tap($more_options_note)\n    tap($settings)\ntap($set_alignment)\ncenter_alignment = $theme_color_types.match({'selected': false})[0]\ntap(center_alignment)\ntap($save_set_colors)\nback()"}
{"task": "Open an existing note or create a new note, then set the text color to black.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)\ntap($set_colors)\ntap($set_text_color)\n# Assuming the color black is represented with some predefined ID or attribute\nblack_color = $theme_color_types.match({'selected': false})[0]\ntap(black_color)\ntap($save_set_colors)\nback()"}
{"task": "Open the feature that triggers the color customization popup, then close the color customization popup.", "solution": "tap($more_options_note)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open the Notes app settings and enable the 'Show keyboard on startup' setting", "solution": "tap($settings)\ncheckbox = get_attributes($set_show_keyboard_on_startup)\nif not checkbox['checked']:\n    tap($set_show_keyboard_on_startup)\n"}
{"task": "Ensure there are multiple notes in the list, then switch to the previous item in the notes list.", "solution": "tap($open_note)\nif len($open_note_title_list) > 1:\n    tap($switch_to_prev_item)\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\n    tap($switch_to_prev_item)\n"}
{"task": "Open the Notes app settings and set the app theme to Black & White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)\n"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by date created.", "solution": "tap($open_note)\nif len($open_note_title_list.match('checklist')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('checklist')[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)\n"}
{"task": "Open the Notes app settings and set the app theme to Custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)\n"}
{"task": "Open the Notes app settings from the home page to configure the #todo section", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open any note or create one if none exist, then show the title of the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nnote_title = get_text($item_title)\nnote_title"}
{"task": "Open the Notes app settings and then navigate to the Font size settings", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)"}
{"task": "If the current page is not the settings page, open the settings page. Once the settings page is open, go back from the settings page.", "solution": "try:\n    tap($more_options_note)\n    tap($settings)\nexcept:\n    pass\nback()"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings, navigate to theme color options, and set the theme color to dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($close_set_colors)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Ensure at least one note exists and is open, then open the more options of the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings menu and set the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\ntap($exit_settings)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "def set_up_new_checklist():\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\n\nif len($open_note_title_list) == 0:\n    set_up_new_checklist()\nelse:\n    tap($open_note)\n    opened = False\n    for i in range(len($open_note_title_list)):\n        tap($open_note_title_list[i])\n        if len($checklist_item_list) > 0:\n            opened = True\n            break\n    if not opened:\n        set_up_new_checklist()\ntap($more_options_checklist)"}
{"task": "Open the settings menu and set the font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\n"}
{"task": "Open the settings of the Notes app starting from the home page", "solution": "tap($settings)\n"}
{"task": "Open the settings menu and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)\n"}
{"task": "Open the settings page and change the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\n"}
{"task": "Open the settings menu and set the font size to 250% in the Notes APP on your smartphone.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)\n"}
{"task": "Customize the colors in the customization settings and then save the customized colors in the Notes app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Open a note and tap the 'More options' button", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Navigate to the settings page from the home page and check the current font size of the app", "solution": "tap($settings)\nfont_size_text = get_text($current_font_size)\nback()"}
{"task": "Have a checklist open and tap the 'More options' button in the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Open more options for the current note after having a note open.", "solution": "tap($more_options_note)"}
{"task": "Open the note titled 'Birthday Wishes' from the home page", "solution": "tap($open_note)\nnotes = $open_note_title_list\nbirthday_note = notes.match('Birthday Wishes')\ntap(birthday_note[0])"}
{"task": "Open a checklist note or create one and make it the current checklist, then sort the items in the current checklist by Custom", "solution": "tap($open_note)\nnotes = $open_note_title_list\nchecklist = notes.match({'selected': False})\nif len(checklist) > 0:\n    tap(checklist[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    if not get_attributes($checklist_type)['selected']:\n        tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure that the note titled 'User Manual' exists, has an attached file, and then open the attached file", "solution": "tap($open_note)\nnotes = $open_note_title_list\nuser_manual = notes.match('User Manual')\nif len(user_manual) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'User Manual')\n    if not get_attributes($text_note_type)['selected']:\n        tap($text_note_type)\n    tap($add_note_ok)\ntap(user_manual[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "If the current page is not the settings page, open the settings page, then exit the settings page.", "solution": "try:\n    get_text($scroll_settings_page)\nexcept:\n    tap($settings)\nback()"}
{"task": "Open an existing note or create a new note, make it the current note, and then open more options in the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    if not get_attributes($text_note_type)['selected']:\n        tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Ensure a note is open, then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the note titled 'Ideas for Blog' and add a new entry 'Explore AI in Healthcare'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Ideas for Blog')\nnote = notes[0]\ntap(note)\ntap($note_content)\nset_text($note_content, get_text($note_content) + '\\nExplore AI in Healthcare')\ntap($save_note)"}
{"task": "Ensure there are multiple notes available, then switch to the note before the current one using the 'switch_to_prev_item' button.", "solution": "assert len($open_note_title_list) > 1\ncurrent_note = $open_note_title_list.match({'selected': True})[0] # Assuming one is always selected\nprev_note_idx = $open_note_title_list.index(current_note) - 1\nif prev_note_idx < 0:\n    prev_note_idx = len($open_note_title_list) - 1\ntap($switch_to_prev_item)"}
{"task": "Open the settings page and change the app icon color to blue.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_app_icon_color)\n# Assuming there's a list to choose from and Blue is the 4th item\ntap($theme_color_types[3])\ntap($save_set_colors)"}
{"task": "Ensure a checklist note is open and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0]) # Assuming the note at index 0 is a checklist note\ntap($more_options_checklist)"}
{"task": "Ensure there are multiple notes available, then switch to the note after the current one using the 'switch_to_next_item' button.", "solution": "if len($open_note_title_list) > 1:\n    tap($switch_to_next_item)\nelse:\n    print('Not enough notes to switch.')"}
{"task": "Open a note or create one if there is none, then open more options for the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings menu from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the settings page and scroll", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Ensure there is an existing note open, then open more options for the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note_title[0])\ntap($more_options_note)"}
{"task": "Open a checklist note if none is currently opened, then access more options for the current checklist and customize colors", "solution": "if len($item_title) == 0 or 'Checklist' not in get_text($item_title):\n    tap($open_note)\n    checklists = $open_note_title_list.match('Checklist')\n    if len(checklists) > 0:\n        tap(checklists[0])\ntap($more_options_checklist)\ntap($set_colors)"}
{"task": "Open the settings page from the home page and set a custom theme by accessing customize colors in settings.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)\nback()"}
{"task": "Open the current note to ensure it is active on the UI, then export the current note as a file.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Navigate to theme settings and change theme to black & white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings page from the home page, then select dark_red from the theme color types.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings menu and enable the display save success messages feature", "solution": "tap($settings)\nscroll($settings, 'down')\ntap($set_display_save_success_messages)"}
{"task": "Ensure no existing checklist note has the title 'Workout Routine' and then create a new checklist note titled 'Workout Routine.'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Workout Routine':\n        return\nback()\ntap($create_note)\nset_text($add_note_title, 'Workout Routine')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open or create a note, then open the more options for the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings menu in the Notes app and check the font size setting", "solution": "tap($settings)\ntap($current_font_size)\nback()"}
{"task": "Turn on Incognito mode for the keyboard in the Notes app from the home page", "solution": "tap($settings)\nscroll($settings, 'down')\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open a checklist note or create one if there is none, then sort the current checklist items by custom order", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nsw = get_text($item_title)\nif 'checklist' not in sw:\n    tap($create_note)\n    set_text($add_note_title, 'New checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Ensure note has 'Settings' in more options, then open the app settings from the current note options", "solution": "assert 'Settings' in [get_text(btn) for btn in $more_option_note_buttons]\ntap($more_options_note)\ntap($settings)"}
{"task": "Open a checklist note or create one if there is none, then confirm the sorting type for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nsw = get_text($item_title)\nif 'checklist' not in sw:\n    tap($create_note)\n    set_text($add_note_title, 'New checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nsw = get_text($item_title)\nif 'checklist' not in sw:\n    tap($create_note)\n    set_text($add_note_title, 'New checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the Font size settings from the Settings and show the current font size setting in the app.", "solution": "tap($settings)\ntap($set_font_size)\ncurrent_size = get_text($current_font_size)\nprint(current_size)"}
{"task": "Open a note or create one if there is none, then open more options for the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the Font size settings from the Settings and set the font size of the app to 50%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Open a checklist note or create one if it doesn't exist, then view all items in the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nfor item in $checklist_item_list:\n    print(get_text(item))"}
{"task": "Open the app settings", "solution": "tap($settings)"}
{"task": "If the current page is not the settings page, open the settings page first, then exit the settings page.", "solution": "if 'settings_page' not in get_attributes($settings):\n    tap($settings)\nback()"}
{"task": "Open the settings menu and increase the font size in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%) # Increase the font size to 125%\nback() # Go back to the settings menu\nback() # Go back to the main screen"}
{"task": "Enable line wrap in the Notes app from the home page", "solution": "tap($settings)\ntap($set_enable_line_wrap)\nback() # Go back to the main screen"}
{"task": "Open any existing note and then open the more options menu for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse: \n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Navigate to the Notes app's settings on the home page and set the font size to 175%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\nback()"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Add text containing 'deadline' into the note and then find the previous occurrence of 'deadline' in the current note", "solution": "tap($note_content)\nset_text($note_content, 'deadline')\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($prev_matched_text)"}
{"task": "Open a checklist note or create one if there is none, then open the more options menu of the current checklist", "solution": "tap($open_note)\nchecklist_exists = False\nfor i in range(len($open_note_title_list)):\n    tap($open_note_title_list[i])\n    if 'checklist' in get_text($item_title).lower():\n        checklist_exists = True\n        break\nif not checklist_exists:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the Notes app settings to customize the app's colors.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Insert text containing 'project' into the note, then find the next occurrence of 'project' in the current note", "solution": "tap($note_content)\nset_text($note_content, 'project')\ntap($search_within_note)\nset_text($search_text, 'project')\ntap($next_matchhed_text)"}
{"task": "Navigate to the settings page from the home page and set the primary color of the app to red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_types.match({'text': 'Dark red'}))\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Set the font size of the app to 200% directly from settings on the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '200%'}))\ntap($sort_checklist_items_ok)\ntap($exit_settings)"}
{"task": "Open the Notes app settings and set the theme color of the app to custom.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($exit_settings)"}
{"task": "Set the font size of the Notes APP to 250% from the settings on the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '250%'}))\ntap($sort_checklist_items_ok)\ntap($exit_settings)"}
{"task": "Open the app settings from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the Notes app settings and enable 'place cursor to the end of note'.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "Create the note titled 'Meeting Notes' if it doesn't exist, then open the note titled 'Meeting Notes'.", "solution": "tap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)\ntap($open_note)\nopen_notes_list = $open_note_title_list\nfor note in open_notes_list:\n    if get_text(note) == 'Meeting Notes':\n        tap(note)\n        break"}
{"task": "Navigate to the settings page from the home page and enable the 'Show word count' option", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_show_word_count)"}
{"task": "Open the Notes app settings and enable 'show keyboard on startup'", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Open a checklist note or create one if there is none, and then open more options of the current checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open more options in the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Sort the checklist items by Custom", "solution": "tap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Confirm the sorting of the checklist items directly on the current checklist from the home page.", "solution": "tap($create_note)\ntap($checklist_type)\ntap($add_note_ok)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Enable showing keyboard on startup from the Notes APP home page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_show_keyboard_on_startup)\nback()"}
{"task": "Open the settings menu", "solution": "tap($settings)"}
{"task": "Open the settings menu and enable clickable links and emails", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Open the settings menu and enable monospaced font", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Ensure the color customization window is open, then close the current color customization window.", "solution": "tap($close_set_colors)"}
{"task": "Open the theme color settings in the Notes APP and set the theme color to dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)"}
{"task": "Open the settings of the Notes app and disable the option to show a note picker on startup", "solution": "tap($open_note)\ntap($settings)\nif get_attributes($set_show_a_note_picker_on_startup)['checked']:\n    tap($set_show_a_note_picker_on_startup)\nback()"}
{"task": "Navigate to font settings and set the font size to 100%", "solution": "tap($open_note)\ntap($settings)\ntap($set_font_size)\nif not get_attributes($font_size_100%)['selected']:\n    tap($font_size_100%)\nback()"}
{"task": "Open the settings of the app to enable the autosave notes feature", "solution": "tap($open_note)\ntap($settings)\nif not get_attributes($set_autosave_notes)['checked']:\n    tap($set_autosave_notes)\nback()"}
{"task": "Ensure an existing checklist is open, then access more options to delete the current checklist.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Navigate to font settings and set the font size to 125%", "solution": "tap($open_note)\ntap($settings)\ntap($set_font_size)\nif not get_attributes($font_size_125%)['selected']:\n    tap($font_size_125%)\nback()"}
{"task": "Open the current checklist to ensure it is active, then export it as a file", "solution": "tap($open_note)\nlong_tap($checklist_item_list)\ntap($more_options_checklist)\ntap($export_as_file)"}
{"task": "Navigate to font settings and set the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Open a checklist and then open more options for the current checklist", "solution": "tap($open_note)\nlong_tap($checklist_item_list)\ntap($more_options_checklist)"}
{"task": "Open the current note and print it", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "Open the settings menu in the Notes app", "solution": "tap($settings)"}
{"task": "Open the current checklist and rename it to 'Shopping List'", "solution": "tap($more_options_checklist)\ntap($more_option_checklist_buttons.match('Rename note')[0])\nset_text($rename_input, 'Shopping List')\ntap($rename_ok)"}
{"task": "Open the color settings and set the primary color of the app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_types.match('Custom')[0])\ntap($save_set_colors)"}
{"task": "Open the color settings and set the app icon color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\ntap($theme_color_types.match('Custom')[0])\ntap($save_set_colors)"}
{"task": "Open the current note and lock it", "solution": "tap($more_options_note)\ntap($more_option_note_buttons.match('Lock note')[0])\ntap($lock_note_ok)"}
{"task": "Open a note and lock it", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($more_option_note_buttons.match('Lock note')[0])\ntap($lock_note_ok)"}
{"task": "Navigate to font settings and set the font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "Navigate to font settings and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Navigate to font settings and set the font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)"}
{"task": "Open a note that allows accessing more options and then open more options of the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a note and delete the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings page and change the font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "Open the settings in the Notes App and navigate to theme color options to set the app theme color", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open a note or create one if there is none, then tap 'more options' on the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings of the app and set the theme color to light mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)"}
{"task": "Open a note or create one if there is none, then tap 'Settings' after tapping 'more options' on the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open a checklist note or create one if there is none, then open the more options for the current checklist", "solution": "if len($open_note_title_list) == 0: \n    tap($open_note) \n    tap($create_note) \n    set_text($add_note_title, 'Checklist') \n    tap($checklist_type) \n    tap($add_note_ok) \ntap($more_options_checklist)"}
{"task": "Open any existing checklist note and then open the more options menu for the current checklist.", "solution": "tap($open_note) \nchecklists = $open_note_title_list.match({'selected': false}) \nfor checklist in checklists: \n    tap(checklist) \n    if len($checklist_item_list) > 0: \n        tap($more_options_checklist) \n        break"}
{"task": "Open settings", "solution": "tap($open_note) \ntap($more_options_note) \ntap($settings)"}
{"task": "From the home page of the Notes APP, navigate directly to and open the settings of the app", "solution": "tap($open_note) \ntap($more_options_note) \ntap($settings)"}
{"task": "Ensure the note has 'Settings' in more options and then open the settings from the note options.", "solution": "tap($open_note) \ntap($more_options_note) \nif 'Settings' in [get_text(btn) for btn in $more_option_note_buttons]: \n    tap($settings)"}
{"task": "Navigate to font settings and set the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Open the settings page from the home page and set the font size of the app to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)"}
{"task": "Open the note where the alignment needs to be changed and set the alignment in the Notes app.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($set_alignment)"}
{"task": "Create checklist items, mark them as done, and then remove the completed items from the current checklist", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($checklist_item_list[0])\ntap($checklist_item_list[1])\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Open a checklist and then open the checklist's more options", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings page from the home page, then set the font size of the app to 90%.", "solution": "tap($settings)\ntap($font_size)\ntap($font_size_types.match(\"90%\")[0])"}
{"task": "Open the current checklist to ensure it is active on the UI and then lock it", "solution": "tap($open_note)\ntap($checklist_item_list[0])\ntap($more_options_checklist)\ntap($lock_note)"}
{"task": "Open app settings", "solution": "tap($settings)"}
{"task": "Open the app settings and customize the note app colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings page from the home page and set the font size of the app to 100%", "solution": "tap($settings)\ntap($font_size)\ntap($font_size_types.match(\"100%\")[0])"}
{"task": "Ensure there is an existing note open and create a shortcut for the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($more_options_note)\noptions = $more_options_note.match('Create shortcut')\ntap(options[0])"}
{"task": "Open the settings of the app from the home page", "solution": "tap($open_note)\nback()\ntap($more_options_note)\noptions = $more_options_note.match('Settings')\ntap(options[0])"}
{"task": "Open the settings page if the current page is not the settings page, then customize the app colors.", "solution": "if 'Settings' not in get_text($item_title):\n    tap($open_note)\n    back()\n    tap($more_options_note)\n    options = $more_options_note.match('Settings')\n    tap(options[0])\ntap($set_colors)"}
{"task": "Disable showing keyboard on startup directly from the home page.", "solution": "tap($settings)\nsettings_options = $settings.match('Show keyboard on startup')\nif get_attributes(settings_options[0])['checked']:\n    tap(settings_options[0])\nback()"}
{"task": "Ensure there is an existing note open, then open 'more options' for the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\ntap($more_options_note)"}
{"task": "Open the Font size settings from the Settings and change the app's font size to 50%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'selected': False})[0])\nif get_text($font_size_types.match({'selected': False})[0]) != '50%':\n    tap($font_size_types.match({'selected': False})[0])"}
{"task": "From the home page, go to settings and set the font size of the app to 300%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'selected': False})[-1])\nif get_text($font_size_types.match({'selected': False})[-1]) != '300%':\n    tap($font_size_types.match({'selected': False})[-1])"}
{"task": "Open a note or create one if there is none, then open more options of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Create the note 'Meeting Minutes' if it doesn't exist, then create a shortcut for the current note titled 'Meeting Minutes'.", "solution": "exists = False\ntap($open_note)\nfor note in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[note]) == 'Meeting Minutes':\n        tap($open_note_title_list[note])\n        exists = True\n        break\nif not exists:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open the Font size settings from the Settings and change the app's font size to 60%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'selected': False})[1])\nif get_text($font_size_types.match({'selected': False})[1]) != '60%':\n    tap($font_size_types.match({'selected': False})[1])"}
{"task": "Open the theme color settings in the app and set the theme color to dark red", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)"}
{"task": "Navigate to customization settings and customize the app colors.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)"}
{"task": "Open the theme color settings in the app and set the theme color to white", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)"}
{"task": "Navigate to theme settings and set the theme color to dark mode", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)"}
{"task": "Open the theme color settings in the app and set the theme color to black and white", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)"}
{"task": "Open the more options menu of the current note", "solution": "tap($more_options_note)"}
{"task": "Open the settings menu by first accessing the more options menu for the current note", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the theme settings and change the theme of the Notes app to White", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Open the theme settings in the Notes app and set the theme to Black & White", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Open the theme customization settings in the Notes app and customize the theme color to Custom.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Open more options for the current note from the home page", "solution": "tap($more_options_note)"}
{"task": "Open more options for the current checklist from the home page", "solution": "tap($more_options_checklist)"}
{"task": "Open the app settings", "solution": "tap($settings)"}
{"task": "Ensure there is a note titled 'Travel Itinerary' and then print it", "solution": "tap($open_note); notes = $open_note_title_list; travel_itinerary_note = notes.match('Travel Itinerary'); if len(travel_itinerary_note) > 0:     tap(travel_itinerary_note[0]);     tap($more_options_note);     tap($print_note)"}
{"task": "Open the settings in the Notes app from the main screen", "solution": "tap($settings)"}
{"task": "Open an existing note or create a new note, then set the background color to white", "solution": "try:\n    tap($open_note)\n    # Assuming open_note_title_list contains at least one note\n    if len($open_note_title_list) > 0:\n        tap($open_note_title_list[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($add_note_ok)\nexcept:\n    # Directly in the current opened note screen\n    pass\nfinally:\n    tap($more_options_note)\n    tap($settings)\n    tap($set_colors)\n    tap($set_background_color)\n    tap($set_background_color.match('White'))\n    tap($save_set_colors)\n    back()"}
{"task": "If the current page is not the settings page, open the settings page and then set the theme of the app to custom.", "solution": "try:\n    tap($settings)\nexcept:\n    tap($more_options_note)\n    tap($settings)\nfinally:\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_custom)"}
{"task": "Open the custom theme color settings in the app and set the theme color to custom", "solution": "try:\n    tap($settings)\nexcept:\n    tap($more_options_note)\n    tap($settings)\nfinally:\n    tap($set_colors)\n    tap($set_theme_color)\n    tap($theme_color_custom)"}
{"task": "Open an existing note or create a new note and set the background color to black", "solution": "try:\n    tap($open_note)\n    # Assuming open_note_title_list contains at least one note\n    if len($open_note_title_list) > 0:\n        tap($open_note_title_list[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($add_note_ok)\nexcept:\n    # Directly in the current opened note screen\n    pass\nfinally:\n    tap($more_options_note)\n    tap($settings)\n    tap($set_colors)\n    tap($set_background_color)\n    tap($set_background_color.match('Black'))\n    tap($save_set_colors)\n    back()"}
{"task": "Open a note containing the word 'budget' and find the next occurrence of the word 'budget' in the current note", "solution": "tap($open_note)\ntap($open_note_title_list.match('budget')[0])\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Ensure there is no checklist titled 'Supermarket List' and then rename the checklist titled 'Grocery List' to 'Supermarket List'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nsupermarket_list_exists = any('Supermarket List' in get_text(note) for note in notes)\nif supermarket_list_exists:\n    grocery_list_exists = True\nelse:\n    grocery_note = next(note for note in notes if 'Grocery List' in get_text(note), None)\n    if grocery_note:\n        tap(grocery_note)\n        tap($more_options_checklist)\n        tap($rename_note)\n        set_text($rename_input, 'Supermarket List')\n        tap($rename_ok)"}
{"task": "Open the font size settings and set the font size of the app to 90%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_90%)\nback()"}
{"task": "Set the font size to 150% in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)\nback()"}
{"task": "Set the font size to 75% in the Notes APP settings.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)\nback()"}
{"task": "Open the Notes app and set the font size to 175%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\nback()"}
{"task": "Open a checklist note or create one if there is none, then open more options in the current checklist.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note, perform a search, and close the search box for matching text within the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'search text')\ntap($close_search_box)"}
{"task": "Navigate to the settings page and toggle the 'show a note picker on startup' checkbox", "solution": "tap($settings)\nset_attributes = get_attributes($set_show_a_note_picker_on_startup)\nif not set_attributes['checked']:\n    tap($set_show_a_note_picker_on_startup)\nback()"}
{"task": "Open the settings from the current note by first ensuring a note is available and open. If no note exists, create a new one.", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($settings)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else. Then create a new note titled 'Grocery List'.", "solution": "found_grocery_list = False\nif len($open_note_title_list) > 0:\n    for i in range(len($open_note_title_list)):\n        if get_text($open_note_title_list[i]) == 'Grocery List':\n            tap($open_note_title_list[i])\n            tap($more_options_note)\n            tap($rename_note)\n            set_text($rename_input, 'Renamed Note')\n            tap($rename_ok)\n            found_grocery_list = True\n            break\nif not found_grocery_list:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Set the font size to 200% in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '200%'})[0])"}
{"task": "Set the font size to 250% in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '250%'})[0])"}
{"task": "Set the font size to 300% in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '300%'})[0])"}
{"task": "Open the font size settings and set the font size of the app to 100%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '100%'})[0])"}
{"task": "Create a checklist titled 'Completed Tasks' if it doesn't exist, then delete the checklist titled 'Completed Tasks'", "solution": "tap($open_note)\nif not len($open_note_title_list.match('Completed Tasks')): \n    tap($create_note)\n    set_text($add_note_title, 'Completed Tasks')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Completed Tasks')[0])\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the settings of the app and set the theme color to dark mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\nback()"}
{"task": "Open a checklist note or create one if there is none, then tap 'more options' and select 'Settings'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings of the app and set the theme color to dark red mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)\nback()"}
{"task": "Open the settings of the Notes APP and change the font size to 50%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)\nback()"}
{"task": "Open the settings page and toggle 'show keyboard on startup' checkbox", "solution": "tap($settings)\nattrs = get_attributes($set_show_keyboard_on_startup)\nif not attrs['checked']:\n    tap($set_show_keyboard_on_startup)\nback()"}
{"task": "Open the settings of the Notes App from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Set the theme color of the Notes app to auto light/dark", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($close_set_colors)"}
{"task": "Show the information about the Notes App", "solution": "tap($more_options_note)\ntap($about)"}
{"task": "Set the theme color of the Notes APP to light", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($close_set_colors)"}
{"task": "Set the theme color of the Notes app to dark on your smartphone.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($close_set_colors)"}
{"task": "Open the widget customization section within app settings and customize the widget colors.", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Open the font size settings within the app settings and set the font size of the app.", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Open the settings page from the home page and set the font size of the app to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)"}
{"task": "Ensure a note is open and then open more options for the current note.", "solution": "tap($more_options_note)"}
{"task": "Open the current checklist and then open more options for it", "solution": "tap($more_options_checklist)"}
{"task": "Open the settings of the Notes app and disable the autosave notes feature.", "solution": "tap($settings)\nif get_attributes($set_autosave_notes)['checked'] == True:\n    tap($set_autosave_notes)\nback()"}
{"task": "Create checklist items, mark some as done, and then remove the done items from the current checklist.", "solution": "tap($create_note)\ntap($checklist_type)\ntap($add_note_ok)\nfor i in range(5):\n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, f'Checklist item {i+1}')\n    tap($add_checklist_item_ok)\nfor i in range(2):\n    tap($checklist_item_list[i])\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "If no note is currently open, open a note, then open more options for the current note.", "solution": "if not get_text($item_title):\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open or create a note if there is none and then create a shortcut for the current note.", "solution": "if not get_text($item_title):\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open a checklist if none is currently open, then open more options for the current checklist.", "solution": "if not get_text($item_title):\n    tap($open_note)\n    tap($open_note_title_list[0])\n    tap($checklist_type)\ntap($more_options_checklist)"}
{"task": "Navigate to the settings page and toggle the \"autosave notes\" checkbox.", "solution": "tap($settings)\ncheckbox = get_attributes($set_autosave_notes)['checked']\nif checkbox:\n\ttap($set_autosave_notes)"}
{"task": "Open or create a checklist note if there is none, then open the settings from the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n\ttap($create_note)\n\ttap($checklist_type)\n\ttap($add_note_ok)\nelse:\n\ttitle = get_text($open_note_title_list[0])\n\tif 'checklist' not in title.lower():\n\t\ttap($create_note)\n\t\ttap($checklist_type)\n\t\ttap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Check if a note titled 'Work Tasks' exists. If it does, rename the existing note to a different title, then create a new note titled 'Work Tasks'.", "solution": "tap($open_note)\nexists = False\nfor i in range(len($open_note_title_list)):\n\tif get_text($open_note_title_list[i]) == 'Work Tasks':\n\t\texists = True\n\t\ttap($open_note_title_list[i])\n\t\ttap($more_options_note)\n\t\ttap($rename_note)\n\t\tset_text($rename_input, 'Old Work Tasks')\n\t\ttap($rename_ok)\n\t\tback()\n\t\tbreak\nif not exists:\n\ttap($create_note)\n\tset_text($add_note_title, 'Work Tasks')\n\ttap($text_note_type)\n\ttap($add_note_ok)"}
{"task": "Create the note titled 'Project Plan' if it doesn't exist, then open the note titled 'Project Plan'", "solution": "title_existed = False\ntap($open_note)\nfor title in range(len($open_note_title_list)):\n\tif get_text($open_note_title_list[title]) == 'Project Plan':\n\t\ttitle_existed = True\n\t\ttap($open_note_title_list[title])\n\t\tbreak\nif not title_existed:\n\ttap($create_note)\n\tset_text($add_note_title, 'Project Plan')\n\ttap($text_note_type)\n\ttap($add_note_ok)\n\ttap($open_note)\nfor title in range(len($open_note_title_list)):\n\tif get_text($open_note_title_list[title]) == 'Project Plan':\n\t\ttap($open_note_title_list[title])\n\t\tbreak"}
{"task": "Navigate to the settings page and toggle 'display save success messages' checkbox", "solution": "tap($settings)\ncheckbox = get_attributes($set_display_save_success_messages)['checked']\nif checkbox:\n\ttap($set_display_save_success_messages)"}
{"task": "Create the note titled 'Weekly Report' if it doesn't exist, then export it as a file.", "solution": "def create_and_export_note(note_title):\n    tap($create_note)\n    set_text($add_note_title, note_title)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    notes = $open_note_title_list\n    if note_title not in [get_text(note) for note in notes]:\n        tap($create_note)\n        set_text($add_note_title, note_title)\n        tap($text_note_type)\n        tap($add_note_ok)\n        tap($open_note)\n    note = notes.match(note_title)[0]\n    tap(note)\n    tap($more_options_note)\n    tap($export_as_file)\n\ncreate_and_export_note('Weekly Report')"}
{"task": "Navigate to customization settings and open color customization settings for the app.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Create the checklist titled 'Shopping List' if it doesn't exist, then export the checklist titled 'Shopping List' as a file.", "solution": "def create_and_export_checklist(checklist_title):\n    tap($create_note)\n    set_text($add_note_title, checklist_title)\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($open_note)\n    notes = $open_note_title_list\n    if checklist_title not in [get_text(note) for note in notes]:\n        tap($create_note)\n        set_text($add_note_title, checklist_title)\n        tap($checklist_type)\n        tap($add_note_ok)\n        tap($open_note)\n    note = notes.match(checklist_title)[0]\n    tap(note)\n    tap($more_options_checklist)\n    tap($export_as_file)\n\ncreate_and_export_checklist('Shopping List')"}
{"task": "Navigate to the settings page from the home page and enable the 'Make links and emails clickable' option", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Create the note titled 'Birthday Invitation' if it doesn't exist, then print the note titled 'Birthday Invitation'", "solution": "def create_and_print_note(note_title):\n    tap($create_note)\n    set_text($add_note_title, note_title)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    notes = $open_note_title_list\n    if note_title not in [get_text(note) for note in notes]:\n        tap($create_note)\n        set_text($add_note_title, note_title)\n        tap($text_note_type)\n        tap($add_note_ok)\n        tap($open_note)\n    note = notes.match(note_title)[0]\n    tap(note)\n    tap($more_options_note)\n    tap($print_note)\n\ncreate_and_print_note('Birthday Invitation')"}
{"task": "Open a note or create a new one if none exist, then open the more options menu for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the settings page from the home page and change the app icon color to red.", "solution": "tap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_app_icon_color)\nset_text($customize_app_icon_color, 'red')\ntap($save_set_colors)"}
{"task": "Open the font size settings and change the font size of the Notes app to 50%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Open the font size settings in the Notes app, then set the font size to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open the font size settings and increase the font size to 300% in the Notes app", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Navigate to the settings page and tap 'export notes'", "solution": "tap($settings)\ntap($export_notes)"}
{"task": "Open or create a note if there is none, then show the information of the app from the current note.", "solution": "notes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\ntap($more_options_note)\ntap($about)"}
{"task": "Navigate to the settings page and tap 'import notes'", "solution": "tap($settings)\ntap($import_notes)"}
{"task": "Open the current checklist to ensure it is visible, then delete the checklist", "solution": "tap($checklist_item_list)\ntap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Navigate to the settings page and change the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Open the settings page from the home page and set the font size of the app to 150%", "solution": "tap($more_options_note)\ntap($rename_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Navigate to customization settings and then customize the colors in the Notes app.", "solution": "tap($more_options_note)\ntap($rename_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open the current checklist to ensure it is active, then sort the checklist items by title.", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_by_title)\ntap($sort_checklist_items_ok)"}
{"task": "Create checklist items, mark them as done, and then remove completed items from the current checklist", "solution": "tap($open_note)\nlong_tap($checklist_item)\ntap($mark_as_done)\ntap($remove_done_checklist_items)\ntap($sort_checklist_items)"}
{"task": "Navigate to the settings page from the home page and change the font size to 100% in the Notes app", "solution": "tap($more_options_note)\ntap($rename_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_100%)"}
{"task": "Open a checklist note or create one if there is none, then open the settings from the checklist options", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings page and set the alignment of the app to left", "solution": "tap($settings)\ntap($set_alignment)"}
{"task": "Open a note or create one if there is none, then set the font size to 300%", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($settings)\ntap($set_font_size)\ntap($font_size_300%)\ntap($sort_checklist_items_ok)"}
{"task": "Show the current font size", "solution": "tap($settings)\ntap($current_font_size)\nget_text($current_font_size)"}
{"task": "Open a note or create one if there is none, then set cursor to place at the end of the note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($settings)\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "Open a checklist note or create one if it doesn't exist, then open the more options of the current checklist", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title)\nelse:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Add a checklist item named 'Read Book' and then select and rename it to 'Complete Book'", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Read Book')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list.match({'text': 'Read Book'}))\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Complete Book')\ntap($rename_ok)"}
{"task": "Open the app's settings and set the font size to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)\nback()"}
{"task": "Open the settings of the app and adjust the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)\nback()"}
{"task": "Go to Settings", "solution": "tap($settings)"}
{"task": "From the home page, navigate to the settings and set the theme color of the Notes app to White.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('White')[0])\ntap($save_set_colors)"}
{"task": "Open the settings menu and enable word count display in the Notes app", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_show_word_count)"}
{"task": "Open the theme settings and set the theme color to light", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('light')[0])\ntap($save_set_colors)"}
{"task": "Create at least two checklist items if there are fewer than two, then open the second checklist item.", "solution": "tap($add_checklist_item)\ntap($add_more_checklist_item)\ntap($add_checklist_item_ok)\nif len($checklist_item_list) < 2: \n    tap($add_checklist_item)\n    set_text($add_checklist_item_title, 'Second Item')\n    tap($add_checklist_item_ok)\ntap($checklist_item_list[1])"}
{"task": "Navigate to the settings from the home page, and set the theme color of the Notes APP to Black & White.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('Black & White')[0])\ntap($save_set_colors)"}
{"task": "Open a checklist note or create one if there is none, then open the settings from the more options menu of the current checklist", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) > 0:\n        tap(note_titles[0])\n    else:\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($settings)\nexcept:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\n    tap($more_options_checklist)\n    tap($settings)"}
{"task": "Open the settings from the home page and customize the colors of the Notes app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a note or create one if there is none, then open more options for the current note.", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) > 0:\n        tap(note_titles[0])\n    else:\n        tap($create_note)\n        tap($text_note_type)\n        tap($add_note_ok)\n    tap($more_options_note)\nexcept:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($more_options_note)"}
{"task": "Open the settings, navigate to the color customization option, adjust the app colors, and save the new settings.", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a note or create one if there is none, then open the more options for the current note", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) > 0:\n        tap(note_titles[0])\n    else:\n        tap($create_note)\n        tap($text_note_type)\n        tap($add_note_ok)\n    tap($more_options_note)\nexcept:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($more_options_note)"}
{"task": "Open a checklist note if it doesn't exist or create one, then open more options of the current checklist", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'Checklist Note')    tap($checklist_type)    tap($add_note_ok)tap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then open the more options for the current checklist", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'Checklist Note')    tap($checklist_type)    tap($add_note_ok)tap($more_options_checklist)"}
{"task": "Open the Font size settings from the Settings and set the font size to 150%", "solution": "tap($settings)tap($set_font_size)tap($font_size_150%)"}
{"task": "Ensure at least one note exists, open a note, and then go to settings from the current note", "solution": "if len($open_note_title_list) > 0:    tap($open_note_title_list[0])else:    tap($create_note)    set_text($add_note_title, 'New Note')    tap($text_note_type)    tap($add_note_ok)tap($more_options_note)tap($settings)"}
{"task": "Open the settings menu from the home page", "solution": "tap($settings)"}
{"task": "Open the more options menu for the current checklist and then access the settings.", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings page and scroll through it.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the settings page from the home page and enable Auto light/dark theme mode in theme settings", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)"}
{"task": "Open any existing checklist note and sort the checklist items by date created.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\ntap(note_titles[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings page from the home page and select the light theme in theme settings", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)"}
{"task": "Navigate to the settings page and change the font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"250%\"))"}
{"task": "Open customization settings and set the text color to blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)\ntap($theme_color_types.match(\"Auto light / dark\"))\nback()"}
{"task": "Navigate to the settings page and change the font size to 300%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"300%\"))"}
{"task": "Open customization settings and set the background color to grey", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\ntap($theme_color_types.match(\"Auto light / dark\"))\nback()"}
{"task": "Navigate to the settings page and display the current font size of the app.", "solution": "tap($settings)\ntap($current_font_size)\nfont_size = get_text($font_size_types.match({'selected':true}))\nprint(font_size)"}
{"task": "Open customization settings and set the primary color to green.", "solution": "\ntap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom)\ntap($save_set_colors)\nback()\n"}
{"task": "Open and print the note titled 'Recipe for Lasagna'", "solution": "\ntap($open_note)\nopen_note_title_list = $open_note_title_list\nopen_note_title_elements = open_note_title_list.match(\"Recipe for Lasagna\")\nif len(open_note_title_elements) > 0:\n    tap(open_note_title_elements[0])\n    tap($more_options_note)\n    tap($print_note)\n"}
{"task": "Open the settings", "solution": "\ntap($settings)\n"}
{"task": "Navigate to the settings page from the home page and show information about the app", "solution": "\ntap($settings)\ntap($about)\n"}
{"task": "Open the current note and rename it to 'Meeting Notes'", "solution": "\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)\n"}
{"task": "If the current page is not the settings page, open the settings page. Then exit the settings page.", "solution": "if get_attributes($settings).get('selected', False) == False:\n    tap($settings)\ntap($exit_settings)"}
{"task": "Create the checklist titled 'Daily Tasks' if it doesn't exist, and then print the checklist titled 'Daily Tasks'", "solution": "tap($create_note)\nset_text($add_note_title, 'Daily Tasks')\ntap($checklist_type)\ntap($add_note_ok)\ntap($open_note)\nnotes = $open_note_title_list.match('Daily Tasks')\nif len(notes) > 0:\n    tap(notes[0])"}
{"task": "Open the current note and rename it to 'Meeting Minutes - 2023-10-05'", "solution": "tap($open_note)\ntitle_elements = $open_note_title_list.match({'selected': True})\nif len(title_elements) > 0:\n    tap(title_elements[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Minutes - 2023-10-05')\ntap($rename_ok)"}
{"task": "Open the current checklist and access more options", "solution": "tap($switch_item)\ntap($more_options_checklist)"}
{"task": "Ensure 'budget' is a term within the note titled 'Financial Plan', then search for the term 'budget' within the note.", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Financial Plan')\nif len(notes) > 0:\n    tap(notes[0])\nnote_content = get_text($note_content)\nif 'budget' not in note_content:\n    note_content += '\\nbudget'\n    set_text($note_content, note_content)\n    tap($save_note)\ntap($search_within_note)\nset_text($search_text, 'budget')"}
{"task": "Open the current note and then open more options for it", "solution": "tap($open_note)\ntap($more_options_note)"}
{"task": "Open the current checklist and then access more options for the checklist", "solution": "tap($open_note)\ntap($more_options_checklist)"}
{"task": "Ensure a checklist note is open and then open more options for the current checklist", "solution": "tap($checklist_item)\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the Notes app and navigate to the settings", "solution": "tap($settings)"}
{"task": "Create the note 'Project Ideas' if it doesn't exist and interact with more options for the note titled 'Project Ideas'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(note) == 'Project Ideas' for note in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Project Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\nnote_titles = $open_note_title_list\nfor note in note_titles:\n    if get_text(note) == 'Project Ideas':\n        tap(note)\n        tap($more_options_note)\n        break"}
{"task": "If a note with the title 'Daily Journal' already exists, rename it to something else. Then, select the text note type while creating a new note titled 'Daily Journal'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif any(get_text(note) == 'Daily Journal' for note in note_titles):\n    for note in note_titles:\n        if get_text(note) == 'Daily Journal':\n            tap(note)\n            tap($more_options_note)\n            tap($rename_note)\n            set_text($rename_input, 'Renamed Daily Journal')\n            tap($rename_ok)\n            break\ntap($create_note)\nset_text($add_note_title, 'Daily Journal')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "If a checklist with the title 'Travel Packing' already exists, rename it to something else. Then select the checklist type while creating a new checklist titled 'Travel Packing'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif any(get_text(note) == 'Travel Packing' for note in note_titles):\n    for note in note_titles:\n        if get_text(note) == 'Travel Packing':\n            tap(note)\n            tap($more_options_note)\n            tap($rename_note)\n            set_text($rename_input, 'Renamed Travel Packing')\n            tap($rename_ok)\n            break\ntap($create_note)\nset_text($add_note_title, 'Travel Packing')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "First check if a note titled 'Reading List' exists; if it does, rename it to something else. Then, confirm the creation of a new note titled 'Reading List'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif any(get_text(note) == 'Reading List' for note in note_titles):\n    for note in note_titles:\n        if get_text(note) == 'Reading List':\n            tap(note)\n            tap($more_options_note)\n            tap($rename_note)\n            set_text($rename_input, 'Renamed Reading List')\n            tap($rename_ok)\n            break\ntap($create_note)\nset_text($add_note_title, 'Reading List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Create a note titled 'Grocery List' if it doesn't exist, then open the note titled 'Grocery List'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif not any(get_text(note) == 'Grocery List' for note in note_titles):\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\nnote_titles = $open_note_title_list\nfor note in note_titles:\n    if get_text(note) == 'Grocery List':\n        tap(note)\n        break"}
{"task": "Check if the current note contains the word 'meeting' and add it if it does not, then find the next occurrence of 'meeting' within the current note", "solution": "if 'meeting' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' meeting')\ntap($search_within_note)\nset_text($search_text, 'meeting')\ntap($next_matchhed_text)"}
{"task": "Open any existing note and save the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($save_note)"}
{"task": "Open the settings page from the home page and set the theme color of the app to white", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap(theme_color_types.match(\"White\"))\ntap($save_set_colors)"}
{"task": "Open the customize colors settings and adjust the colors of the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open any existing note and search for the word 'meeting' within it.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'meeting')\ntap($next_matchhed_text)"}
{"task": "Set the font size to 125% in the Notes app by accessing the settings on the home page.", "solution": "\n# Set the font size to 125% in the Notes app by accessing the settings on the home page\ntap($settings)\ntap($set_font_size)\ntap($font_size_125%)\nback()\nback()\n"}
{"task": "Open any note or create one if there is none, then save the current note.", "solution": "\n# Open any note or create one if there is none, then save the current note\ntap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($save_note)\nback()\n"}
{"task": "Import notes", "solution": "\n# Import notes\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($import_notes)\nback()\n"}
{"task": "Add the term 'urgent' to the note if it doesn't exist, then search the current note for the term 'urgent'", "solution": "\n# Add the term 'urgent' to the note if it doesn't exist, then search the current note for the term 'urgent'\nif 'urgent' not in get_text($note_content):\n    set_text($note_content, get_text($note_content) + ' urgent')\n    tap($save_note)\ntap($search_within_note)\nset_text($search_text, 'urgent')\ntap($next_matched_text)\n"}
{"task": "Open the Notes app from the home page", "solution": "\n# Open the Notes app from the home page\n# No action needed as the script execution assumes the Notes app is already opened.\n"}
{"task": "Open or create a checklist note if there is none, and then show the information of the app from the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($about)"}
{"task": "Navigate to the settings page from the home page and set the background color of the Notes app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)"}
{"task": "Open an existing note or create a new note, then set the cursor to place at the end of the note when editing.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($note_content)\nset_text($set_place_cursor_to_the_end_of_note, 'true')"}
{"task": "Navigate to the settings page from the home page and set the primary color of the notes app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Ensure there is at least one note present and then tap on 'Open Note'.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type) or tap($checklist_type)\n    set_text($add_note_title, 'Sample Note')\n    tap($add_note_ok)\ntap($open_note)"}
{"task": "Open the settings page from the home page and set the theme color of the app to black and white.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "Open the widget customization settings and customize the widget colors", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Ensure the word 'deadline' is in the note, then find the previous occurrence of 'deadline' within the current note.", "solution": "note_content = get_text($note_content)\nif 'deadline' not in note_content:\n    set_text($note_content, note_content + ' deadline')\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($prev_matched_text)"}
{"task": "Open any existing note, search for the word \"project\", and then tap the \"Next\" button to find the next occurrence of \"project\" within the note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'project')\ntap($next_matchhed_text)"}
{"task": "Open the font size settings and set the font size of the app", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Create the note titled 'Old Recipes' if it doesn't exist, then delete the note titled 'Old Recipes'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes.match('Old Recipes')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Old Recipes')\n    tap($add_note_ok)\ntap(notes.match('Old Recipes')[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Navigate to theme settings to set the theme color of the app.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open the current checklist, locate 'Buy milk', and move it to the top of the list", "solution": "tap($switch_to_next_item)\ntap($more_options_checklist)\nlong_tap($checklist_item_list.match('Buy milk'))\ntap($move_selected_item_to_the_top)"}
{"task": "Ensure 'budget' is a term used multiple times in the note 'Financial Plan'. Then, go to the previous instance of 'budget' in the note titled 'Financial Plan'.", "solution": "tap($open_note)\ntap($open_note_title_list.match('Financial Plan')[0])\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($prev_matched_text)"}
{"task": "Open the settings of the Notes app", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the settings page from the home screen", "solution": "tap($settings);"}
{"task": "Open any note to enable the more options menu, then open more options in the current note.", "solution": "tap($open_note);\nopen_notes = $open_note_title_list.match({});\nif len(open_notes) > 0:\n    tap(open_notes[0]);\n    tap($more_options_note);\n"}
{"task": "Customize the colors of the app by accessing the settings page", "solution": "tap($settings);\ntap($set_colors);\n"}
{"task": "Open a checklist note or create one if there is none, then open more options in the current checklist", "solution": "tap($open_note);\nopen_notes = $open_note_title_list.match({});\nopen_or_create_checklist = False\nfor note in open_notes:\n    if 'checklist' in get_text(note).lower():\n        tap(note)\n        open_or_create_checklist = True\n        break;\nif not open_or_create_checklist:\n    tap($create_note);\n    set_text($add_note_title, 'Checklist');\n    tap($checklist_type);\n    tap($add_note_ok);\ntap($more_options_checklist);\n"}
{"task": "Set the font size to 60% in the Notes APP on your smartphone.", "solution": "tap($settings);\ntap($set_font_size);\nfont_sizes = $font_size_types.match({});\nfor font_size in font_sizes:\n    if get_text(font_size) == '60%':\n        tap(font_size);\n        break;\ntap($sort_checklist_items_ok);\n"}
{"task": "Open the current checklist, locate 'Buy milk,' and move it to the bottom of the list.", "solution": "tap($more_options_checklist)\ntap($checklist_item_list.match({'text': 'Buy milk'}))\nlong_tap($checklist_item_list.match({'text': 'Buy milk'}))\ntap($move_selected_item_to_the_buttom)"}
{"task": "Ensure 'budget' is a term used multiple times in the note titled 'Financial Plan', then find the next instance of 'budget' in the note.", "solution": "tap($open_note)\ntap($open_note_title_list.match('Financial Plan'))\nset_text($note_content, 'budget budget budget')\ntap($search_within_note)\nset_text($search_text, 'budget')\ntap($next_matchhed_text)"}
{"task": "Open the Notes app settings and show the about section", "solution": "tap($settings)\ntap($about)"}
{"task": "Ensure there are notes available and then export all notes.", "solution": "if len($open_note_title_list) > 0:\n    tap($settings)\n    tap($export_notes)"}
{"task": "Ensure a checklist note with the item 'Buy groceries' is open, then move the checklist item 'Buy groceries' to the bottom of the list.", "solution": "tap($more_options_checklist)\ntap($checklist_item_list.match({'text': 'Buy groceries'}))\nlong_tap($checklist_item_list.match({'text': 'Buy groceries'}))\ntap($move_selected_item_to_the_buttom)"}
{"task": "Open a note or create one if there is none, then open the more options of the current note", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    if len(note_titles) > 0:\n        tap(note_titles[0])\n    else:\n        tap($create_note)\n        set_text($add_note_title, 'New Note')\n        tap($text_note_type)\n        tap($add_note_ok)\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n\ntap($more_options_note)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Create the note titled 'Shopping List' if it doesn't exist, then open it.", "solution": "try:\n    tap($open_note)\n    note_titles = $open_note_title_list\n    match_titles = note_titles.match('Shopping List')\n    if len(match_titles) > 0:\n        tap(match_titles[0])\n    else:\n        raise ValueError('Note not found')\nexcept:\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)\n    open_notes = $open_note_title_list.match('Shopping List')\n    tap(open_notes[0])"}
{"task": "Open the settings of the app and customize the colors", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open the settings of the app and set the background color of the app to blue", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_background_color)\n# Assuming more steps are needed to select 'blue' color in the color picker\n# Since we do not have exact elements for color picker,\n# This part could vary depending on the actual implementation of the color selection\n# Example:\n# tap($select_blue_color) # this step is hypothetical\n# tap($save_background_color)\n# Final step to save if there's an OK/Save button\n# tap($save_set_colors)"}
{"task": "Open the settings menu and set links and emails to be clickable in the Notes app", "solution": "tap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Open the theme settings and set the theme color to dark", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)"}
{"task": "Open the settings menu and switch to a monospaced font in the Notes app", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "If a note titled 'Grocery List' does not exist, create it, and then scroll through the items until you find the note titled 'Grocery List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        tap(notes[i])\n        break\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Grocery List':\n            tap(notes[i])\n            break"}
{"task": "Open any note or create one if there is none, then delete the current note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\nelse:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)"}
{"task": "Change the app's font size to 100%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_100%)\ntap($sort_checklist_items_ok)"}
{"task": "Open the font size settings within the app settings and set the font size of the app", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Change the app's font size to 125%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)\ntap($sort_checklist_items_ok)"}
{"task": "Open the app settings to show the current font size of the app", "solution": "tap($settings)\ntap($current_font_size)"}
{"task": "Ensure there is at least one existing note, then open the latest note", "solution": "open_note_button_exists = len($open_note) > 0\nif open_note_button_exists:\n    tap($open_note)\n    note_titles = $open_note_title\n    if len(note_titles) > 0:\n        tap(note_titles[-1])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Show the current font size of the app", "solution": "tap($settings)\ntap($current_font_size)\nfont_sizes = $font_size_types\nselected_size = [size for size in font_sizes if get_attributes(size)['selected']]\nprint(get_text(selected_size[0]))\ntap($exit_settings)"}
{"task": "Change theme color to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Change the theme color to black & white in the Notes APP settings", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Change the theme color to a custom setting through the theme color settings on the Notes app settings page.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Set the font size to 50% in the Notes APP settings.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)\ntap($sort_checklist_items_ok)\ntap($exit_settings)"}
{"task": "Set the font size to 60% using the settings page in the Notes APP on your smartphone.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"60%\"))\ntap($save_set_colors)"}
{"task": "Set the font size to 90% in the Notes APP settings", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"90%\"))\ntap($save_set_colors)"}
{"task": "Set the font size to 100%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"100%\"))\ntap($save_set_colors)"}
{"task": "Set the font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"125%\"))\ntap($save_set_colors)"}
{"task": "Set the font size to 150% in the Notes APP settings.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"150%\"))\ntap($save_set_colors)"}
{"task": "Open the current note and delete it.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open any existing note, search for the word 'deadline', and tap the 'Previous' button to find the previous occurrence of 'deadline' within the note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'deadline')\ntap($prev_matched_text)"}
{"task": "Open a note and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a checklist and then open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the settings page from the home page and set a custom theme color for the app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Ensure there is at least one previous note relative to the current one, then switch to the note before the current one.", "solution": "if get_attributes($switch_to_prev_item).get('scrollable', False):\n    tap($switch_to_prev_item)\nelse:\n    print('There is no previous note relative to the current one.')"}
{"task": "From the home page, navigate to settings and set the theme color of the app to Custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Ensure there is at least one note after the current one, then switch to the note following the current one.", "solution": "if get_attributes($switch_to_next_item).get('scrollable', False):\n    tap($switch_to_next_item)\nelse:\n    print('There is no note after the current one.')"}
{"task": "Open a checklist note or create one if there is none, then display the checklist items for the current checklist.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(notes[0])\nitems = $checklist_item_list\nfor item in items:\n    print(get_text(item))"}
{"task": "Create a checklist titled 'Grocery List' if it doesn't exist, then create a shortcut for it.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_exists = False\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Grocery List':\n        tap(notes[i])\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($create_shortcut)"}
{"task": "Starting from the home page, access the settings from the app's more options menu.", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Go to the app settings and show the word count option.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_show_word_count)"}
{"task": "Ensure that links and emails are clickable within the app settings directly from the home page.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Open the Font size settings from the Settings and set the font size to 175%", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "Open the settings page to customize colors", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open the current checklist, locate the item named 'Buy milk', and rename it to 'Purchase milk'", "solution": "tap($checklist_item_list.match('Buy milk'))\nlong_tap($checklist_item[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, 'Purchase milk')\ntap($rename_ok)"}
{"task": "Add content mentioning 'Q3 Budget' inside the note 'Finance Plan' and then search for the term 'Q3 Budget' within the note titled 'Finance Plan'", "solution": "tap($open_note)\ntap($open_note_title_list.match('Finance Plan')[0])\nset_text($note_content, 'Q3 Budget')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'Q3 Budget')"}
{"task": "Open the current checklist, locate the item 'Buy milk', and delete it", "solution": "tap($checklist_item_list.match('Buy milk'))\nlong_tap($checklist_item[0])\ntap($delete_selected_checklist_item)\ntap($delete_note_ok)"}
{"task": "Open the settings of the Notes app and enable Incognito mode for keyboards", "solution": "tap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_use_incognito_mode_of_keyboards)\nback()"}
{"task": "If a checklist with the title 'Groceries' already exists, rename it to something else, then create a new checklist with the title 'Groceries'", "solution": "tap($open_note)\ntitles = [get_text(item) for item in $open_note_title_list]\nif 'Groceries' in titles:\n    idx = titles.index('Groceries')\n    tap($open_note_title_list[idx])\n    tap($more_options_checklist)\n    tap($rename_note)\n    set_text($rename_input, 'Groceries - old')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Groceries')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Open the theme settings and set the theme color to dark red.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Open the theme settings and set the theme color to white", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "Open the font size settings and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Navigate to the settings from the home page and enable the Auto Light/Dark theme color option.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)"}
{"task": "Navigate to the Notes APP settings from the home page and set the font size to 50%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Open the settings of the Notes app and turn on line wrap", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_enable_line_wrap)\nback()"}
{"task": "If a note with the title 'Office Tasks' already exists, rename it to something else. Then, rename the current note titled 'Work Tasks' to 'Office Tasks'.", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nexisting_note = note_titles.match('Office Tasks')\nif len(existing_note) > 0:\n    tap(existing_note[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Office Tasks Renamed')\n    tap($rename_ok)\nopen_work_note = note_titles.match('Work Tasks')\nif len(open_work_note) > 0:\n    tap(open_work_note[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Office Tasks')\n    tap($rename_ok)\nback()"}
{"task": "Navigate to the settings page from the home page and enable the setting to show the keyboard on startup.", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_show_keyboard_on_startup)\nback()"}
{"task": "Search within the note 'Holiday Plans' and then close the search box", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nholiday_note = note_titles.match('Holiday Plans')\nif len(holiday_note) > 0:\n    tap(holiday_note[0])\n    tap($search_within_note)\n    tap($close_search_box)\nback()"}
{"task": "Navigate to the settings page from the home page and enable the setting to show a note picker on startup", "solution": "tap($more_options_checklist)\ntap($settings)\ntap($set_show_a_note_picker_on_startup)\nback()"}
{"task": "Open the settings of the app from the home page", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    back()\ntap($more_options_note.match('Settings'))"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checkbox.match('Checklist'))\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open a note or checklist with multiple items to ensure there are multiple items available to navigate between and then switch to the previous item.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'First Item')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($switch_to_prev_item)"}
{"task": "Open a note or checklist with multiple items to ensure there are multiple items available to navigate between, then switch to the next item.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'First Item')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($switch_to_next_item)"}
{"task": "Open the settings menu and scroll through the settings page", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    back()\ntap($settings)\nscroll($scroll_settings_page, 'down')"}
{"task": "Open the font size settings and set the font size to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"250%\"))"}
{"task": "Open any existing note and rename the current note to 'Meeting Notes'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "Open any existing note and lock the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open the more options menu for the current note from the home page", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Create a note titled 'Project Plan' if it doesn't exist, then lock the note.", "solution": "tap($open_note)\nif len($open_note_title_list.match(\"Project Plan\")) == 0:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Project Plan')\n    tap($add_note_ok)\ntap($open_note)\ntap($open_note_title_list.match(\"Project Plan\"))\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open any existing note, conduct a search within the note, and then close the search box.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'test')\ntap($close_search_box)"}
{"task": "Go to the app settings from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the app settings and customize the colors of the app", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Open the theme settings within the app settings and set the theme color to light", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)"}
{"task": "Find, open, and lock the note titled 'Personal Diary.'", "solution": "tap($open_note)\ntap($open_note_title_list.match('Personal Diary')[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Navigate to the settings page from the home page and enable the setting to autosave notes", "solution": "tap($settings)\ntap($set_autosave_notes)"}
{"task": "Open the settings of the Notes app and set the text alignment to center", "solution": "tap($settings)\ntap($set_alignment)\ntap($current_font_size)[1)"}
{"task": "Navigate to the settings page from the home page and enable the setting to display save success messages", "solution": "tap($settings)\ntap($set_display_save_success_messages)"}
{"task": "Open the current checklist and then open the more options menu of that checklist", "solution": "tap($checklist_item_list)\ntap($more_options_checklist)"}
{"task": "Open the current checklist and then print it", "solution": "tap($checklist_item_list)\ntap($more_options_checklist)\ntap($print_note)"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else, then create a new note titled 'Grocery List'", "solution": "tap($open_note)\nexisting_notes = $open_note_title_list.match('Grocery List')\nif len(existing_notes) > 0:\n    tap(existing_notes[0])\n    tap($more_options_note)\n    tap($rename_note)\n    set_text($rename_input, 'Old Grocery List')\n    tap($rename_ok)\nback()\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($add_note_ok)"}
{"task": "Add a checklist item named 'Water Plants' and then select and delete the checklist item 'Water Plants'", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Water Plants')\ntap($add_checklist_item_ok)\nlong_tap($checklist_item_list.match({'text': 'Water Plants'})[0])\ntap($delete_selected_checklist_item)"}
{"task": "Open a checklist in the Notes APP and add 'New Task' as a checklist item", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'New Task')\ntap($add_checklist_item_ok)"}
{"task": "Add a checklist item named 'Exercise' and then scroll through the checklist items to select 'Exercise'", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Exercise')\ntap($add_checklist_item_ok)\nscroll($checklist_item_list, 'down')\nlong_tap($checklist_item_list.match({'text': 'Exercise'})[0])"}
{"task": "Open the settings of the Notes app and change the current font size to 100%.", "solution": "tap($settings)\ntap($current_font_size)\ntap($font_size_100%)\nback()"}
{"task": "Enable show keyboard on startup directly from settings on the home page.", "solution": "tap($settings)\ntap($set_show_keyboard_on_startup)"}
{"task": "Enable show note picker on startup from the settings on the home page", "solution": "tap($settings)\ntap($set_show_a_note_picker_on_startup)"}
{"task": "Open the Notes app and navigate to the settings on the home page, then enable the autosave notes feature.", "solution": "tap($settings)\ntap($set_autosave_notes)"}
{"task": "Open the current note and delete it", "solution": "tap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Enable display save success messages from the settings on the home page", "solution": "tap($settings)\ntap($set_display_save_success_messages)"}
{"task": "Open the Notes APP on your smartphone, navigate to the app settings on the home page, and enable monospaced font.", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Open the Font size settings from the Settings and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Open the Font size settings from the Settings and check the current font size", "solution": "tap($settings)\ntap($set_font_size)\ntap($current_font_size)\ncurrent_font_size = get_attributes($current_font_size)\ncurrent_font_size"}
{"task": "Ensure a checklist note is open and then sort the checklist items by date", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings, navigate to the color customization option, and close the customize colors popup", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Create the note titled 'Gym Schedule' if it does not exist, then scroll through the note titles and open 'Gym Schedule'", "solution": "tap($create_note)\nset_text($add_note_title, 'Gym Schedule')\ntap($text_note_type)\ntap($add_note_ok)\nwhile True:\n    notes = $open_note_title_list\n    for i in range(len(notes)):\n        title = get_text(notes[i])\n        if title == 'Gym Schedule':\n            tap(notes[i])\n            return\n    scroll($open_note_title_list, 'down')"}
{"task": "Open the settings of the app and update the app's font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('125%'))\nback()"}
{"task": "Open a note or create one if there is none, then delete the current note.", "solution": "tap($open_note)\nnotes = $open_note_title_list\ntap(notes[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open or create a checklist note, then open the settings menu from the more options of the current checklist.", "solution": "tap($create_note)\nset_text($add_note_title, 'New Checklist')\ntap($checklist_type)\ntap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open the settings of the Notes app and set the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('150%'))\nback()"}
{"task": "Open the font size settings and set the font size of the app to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)"}
{"task": "Set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%)"}
{"task": "Open the font size settings and set the font size of the app to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Set the font size of the app to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_60%)"}
{"task": "Open a checklist note and sort the current checklist by custom", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    tap($more_options_checklist)\n    tap($sort_checklist_items)\n    tap($custom_type)\n    tap($sort_checklist_items_ok)"}
{"task": "Create checklist items, mark them as done, and then remove done items from the current checklist.", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_checklist_item_ok)\nl = len($checklist_item_list)\nfor i in range(l):\n    tap($checklist_item_list[i])\ntap($more_options_checklist)\ntap($remove_done_checklist_items)"}
{"task": "Open the more options menu for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Open the more options menu for the current note and then open the settings", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open the customize colors popup and then close it", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open the customize colors settings to allow for modifying the colors of the Notes app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings, navigate to the color customization option, and save the customized colors", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open the settings, navigate to theme color options, and set the theme color to blue.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Create a note titled 'Meeting Notes' if it doesn't exist, and then open the note", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Meeting Notes':\n        tap(notes[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Notes')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(notes)):\n        if get_text(notes[i]) == 'Meeting Notes':\n            tap(notes[i])\n            break"}
{"task": "Ensure a note is open and in edit mode, then save the current note after editing.", "solution": "tap($note_content)\ntap($save_note)"}
{"task": "Ensure a note is open and search for the word 'project' within the current note", "solution": "tap($note_content)\ntap($search_within_note)\nset_text($search_text, 'project')"}
{"task": "Ensure a note is open and then open more options for the current note", "solution": "if not get_attributes($open_note)['selected']:\n    tap($open_note)\ntap($more_options_note)"}
{"task": "Ensure a note is open and search for the text 'meeting' within the current note.", "solution": "if not get_attributes($open_note)['selected']:\n    tap($open_note)\ntap($search_within_note)\nset_text($search_text, 'meeting')"}
{"task": "Open the Notes app settings and enable dark red theme color.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark_red)\ntap($save_set_colors)"}
{"task": "Set the primary color of the app from the settings on the home page", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Ensure a note is open and then open more options in the current note", "solution": "if not get_attributes($open_note)['selected']:\n    tap($open_note)\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then tap on more options in the checklist and change the font size to 50%", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($current_font_size)\ntap($font_size_types.match('50%')[0])\ntap($sort_checklist_items_ok)"}
{"task": "Open a checklist note or create one if there is none, then open more options in the checklist and set the font size to 60%", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($current_font_size)\ntap($font_size_types.match('60%')[0])\ntap($sort_checklist_items_ok)"}
{"task": "Open the Notes App and set the font size to 50% from the settings available on the home page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('50%')[0])"}
{"task": "Open the settings menu and change the font size of the app to 250%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('250%')[0])"}
{"task": "Open a checklist note or create one if there is none, then go to the more options checklist and adjust the font size to 75%", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($current_font_size)\ntap($font_size_types.match('75%')[0])\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings menu to customize the app colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings menu and exit the settings page", "solution": "tap($settings)\ntap($exit_settings)"}
{"task": "Apply color customizations to the Notes App and save the customized colors.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Open the theme settings and set the theme color of the notes app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open the settings menu in the Notes app and show the word count", "solution": "tap($settings)\ntap($set_show_word_count)"}
{"task": "Create a checklist titled 'Holiday Packing' if it doesn't exist and then lock it.", "solution": "tap($create_note)\nset_text($add_note_title, 'Holiday Packing')\ntap($add_note_types.match('checklist_type'))\ntap($add_note_ok)\nif len($open_note_title_list.match('Holiday Packing')) == 0:\n    tap($open_note)\ntap($open_note_title_list.match('Holiday Packing')[0])\ntap($more_options_checklist)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Navigate to the settings from the home page and enable the dark theme color for the app.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Open the settings menu to enable making links and emails clickable in the Notes app", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_make_links_and_emails_clickable)"}
{"task": "Ensure a note titled 'Trip Itinerary' exists and then open the file of the note titled 'Trip Itinerary'", "solution": "tap($create_note)\nset_text($add_note_title, 'Trip Itinerary')\ntap($add_note_ok)\nif len($open_note_title_list.match('Trip Itinerary')) == 0:\n    tap($open_note)\ntap($open_note_title_list.match('Trip Itinerary')[0])\ntap($more_options_note)\ntap($open_file)"}
{"task": "Open any existing note and then open more options in the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open a checklist note or create one if there is none, then tap on 'More options' in the current checklist", "solution": "\nnotes_list = $open_note_title_list\nif len(notes_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(notes_list[0])\ntap($more_options_checklist)\n"}
{"task": "Open any note or create one if there is none, then open the more options of the current note", "solution": "\nnotes_list = $open_note_title_list\nif len(notes_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap(notes_list[0])\ntap($more_options_note)\n"}
{"task": "Mark some checklist items as done and then remove done items from the current checklist", "solution": "\n# Open the first checklist\nnotes_list = $open_note_title_list\nif len(notes_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap(notes_list[0])\n\nchecklist_items = $checklist_item_list\nfor i in range(min(3, len(checklist_items))):\n    tap(checklist_items[i])\ntap($more_options_checklist)\ntap($remove_done_checklist_items)\n"}
{"task": "Set the font size to 60% in the Notes App from the settings on the home page", "solution": "\ntap($settings)\ntap($set_font_size)\ntap($font_size_60%)\nback()\n"}
{"task": "Open the settings of the Notes APP from the home page", "solution": "\ntap($settings)\n"}
{"task": "Open the settings menu and set the font size to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'checked': False})[10])"}
{"task": "Create a checklist titled 'Office Supplies' if it doesn't exist, then open the file of the checklist titled 'Office Supplies'", "solution": "tap($create_note)\nif len($open_note_title_list.match('Office Supplies')) == 0:\n    set_text($add_note_title, 'Office Supplies')\n    tap($checklist_type)\n    tap($add_note_ok)\n# Open the file\nopen_note = $open_note_title_list.match('Office Supplies')[0]\ntap(open_note)\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Create a new note and select the text type for it", "solution": "tap($create_note)\nset_text($add_note_title, 'New Note')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Enable incognito mode of keyboards in the Notes app settings", "solution": "tap($settings)\nif not get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "If the note titled 'Recipe Ideas' does not exist, create it. Then, open the Notes APP, access the more options of the note titled 'Recipe Ideas', and lock it.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Recipe Ideas')) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Recipe Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)\ntitle_recipe_ideas = $open_note_title_list.match('Recipe Ideas')[0]\ntap(title_recipe_ideas)\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Add multiple checklist items and then sort them by title.", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 1')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 2')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Item 3')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings menu and set the font size of the app to 300%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%['selected'] = true)"}
{"task": "Navigate to the home page of the Notes App, go to settings, and set the font size to 75%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_75%['selected'] = true)\nback()"}
{"task": "Add multiple checklist items and sort the current checklist items by date created", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'Checklist Item 1')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Checklist Item 2')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Checklist Item 3')\ntap($add_to_the_top)\ntap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Set the font size to 90% in the Notes App from the settings on the home page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_90%['selected'] = true)\nback()"}
{"task": "Open any note or create one if there is none, then rename the current note to 'Meeting Notes'", "solution": "if len($open_note_title_list) > 0:\n\ttap($open_note_title_list[0])\nelse:\n\ttap($create_note)\n\ttap($text_note_type)\n\tset_text($add_note_title, 'New Note')\n\ttap($add_note_ok)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Meeting Notes')\ntap($rename_ok)"}
{"task": "If a checklist with the title 'Grocery List' already exists, rename that checklist to something else and then rename the current checklist to 'Grocery List'", "solution": "\ntap($open_note)\nfor item in $open_note_title_list:\n\tif get_text(item) == 'Grocery List':\n\t\tlong_tap(item)\n\t\ttap($more_options_checklist)\n\t\ttap($rename_note)\n\t\tset_text($rename_input, 'Old Grocery List')\n\t\ttap($rename_ok)\n\t\tbreak\ntap($create_note)\ntap($checklist_type)\nset_text($add_note_title, 'Grocery List')\ntap($add_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then change the font size to 90% by accessing the more options checklist", "solution": "\ntap($open_note)\nfor note in $open_note_title_list:\n\tif 'Checklist' in get_text(note):\n\t\ttap(note)\n\t\tbreak\nelse:\n\ttap($create_note)\n\ttap($checklist_type)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\ntap($set_font_size)\ntap($font_size_90%)\ntap($exit_settings)"}
{"task": "Open a note or create one if there is none, then show the title of the current item", "solution": "\ntap($open_note)\nif len($open_note_title_list) > 0:\n\ttap($open_note_title_list[0])\nelse:\n\ttap($create_note)\n\ttap($text_note_type)\n\tset_text($add_note_title, 'New Note')\n\ttap($add_note_ok)\nprint(get_text($item_title))"}
{"task": "Open a checklist note or create one if there is none, then set the font size to 100% through the more options checklist", "solution": "\ntap($open_note)\nfor checklist in $open_note_title_list:\n\tif 'Checklist' in get_text(checklist):\n\t\ttap(checklist)\n\t\tbreak\nelse:\n\ttap($create_note)\n\ttap($checklist_type)\n\tset_text($add_note_title, 'New Checklist')\n\ttap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)\ntap($set_font_size)\ntap($font_size_100%)\ntap($exit_settings)"}
{"task": "Set the font size to 90% in the Notes app on your smartphone.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"90%\"))"}
{"task": "Open the more options menu for the current note and navigate to the settings page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Set the font size to 100% in the Notes APP on your smartphone", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"100%\"))"}
{"task": "From the home page, navigate to the Notes app settings and increase the font size to 60%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"60%\"))"}
{"task": "Set the font size to 125% in the Notes APP on a smartphone.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"125%\"))"}
{"task": "Export notes", "solution": "tap($settings)\ntap($export_notes)"}
{"task": "Ensure a checklist note with the item 'Buy groceries' is open, then rename the checklist item 'Buy groceries' to 'Purchase groceries'", "solution": "open_checklist_item_title = 'Buy groceries'\nopen_checklist_item_new_title = 'Purchase groceries'\ntap($open_note)\ntap($open_note_title_list.match({'text': open_checklist_item_title})[0])\nlong_tap($checklist_item_list.match({'text': open_checklist_item_title})[0])\ntap($rename_selected_checklist_item)\nset_text($rename_input, open_checklist_item_new_title)\ntap($rename_ok)"}
{"task": "Set the text color of the Notes APP by accessing the settings directly from the home page.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)"}
{"task": "Open a checklist note with the item 'Buy groceries' and delete the item 'Buy groceries'", "solution": "open_checklist_item_title = 'Buy groceries'\ntap($open_note)\ntap($open_note_title_list.match({'text': open_checklist_item_title})[0])\nlong_tap($checklist_item_list.match({'text': open_checklist_item_title})[0])\ntap($delete_selected_checklist_item)"}
{"task": "Open the current checklist and then delete it", "solution": "tap($more_options_checklist)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open a checklist note or create one if there is none, then update the font size to 125% via more options in the checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)\ntap($font_size_types.match('125%'))\ntap($sort_checklist_items_ok)\nback()"}
{"task": "Open a checklist note or create one if there is none, then adjust the font size to 150% from the more options checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)\ntap($font_size_types.match('150%'))\ntap($sort_checklist_items_ok)\nback()"}
{"task": "Open a note or create one if there is none, then open more options in the current note and change the font size to 50% through settings", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_font_size)\ntap($font_size_types.match('50%'))\ntap($sort_checklist_items_ok)\nback()"}
{"task": "Rename a note to any new title and confirm the rename operation for the current note", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'New Note Title')\ntap($rename_ok)"}
{"task": "Rename a checklist to any new title and then confirm the rename operation for the current checklist", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note)\n    tap($open_note_title_list[0])\nelif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($rename_note)\nset_text($rename_input, 'New Checklist Title')\ntap($rename_ok)"}
{"task": "Ensure a note is open, then move to the next match of 'milestones' within the current note.", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nlong_tap($note_content)\nset_text($search_text, 'milestones')\ntap($next_matchhed_text)"}
{"task": "Set the background color of the app from the settings on the home page", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_background_color)\nselect_background_color = $theme_color_custom\nif not get_attributes(select_background_color)['selected']:\n    tap(select_background_color)\ntap($save_set_colors)"}
{"task": "Open a note or create one if there is none, then open the more options menu of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Open the search box in the current note and then close the search box.", "solution": "tap($search_within_note)\ntap($close_search_box)"}
{"task": "Open a note or create one if there is none, then open the settings from the more options menu of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)"}
{"task": "Ensure a note is open and then open settings from the more options in the current note.", "solution": "if len($open_note_title_list) == 0:\n    tap($open_note)\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the settings of the app and set the font size to 150%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Set the app icon color directly from the settings on the home page", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)"}
{"task": "Change the theme of the app to auto light/dark directly from the settings on the home page.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)"}
{"task": "Change the theme of the app to light from the settings on the home page.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)"}
{"task": "Create the note titled 'Shopping List' if it doesn't exist, then open the note titled 'Shopping List'", "solution": "tap($open_note)\nif not $open_note_title_list.match('Shopping List'):\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match('Shopping List')[0])"}
{"task": "Ensure there is no existing note titled 'Grocery List' and then create a new checklist note titled 'Grocery List'", "solution": "tap($open_note)\nif $open_note_title_list.match('Grocery List'):\n    tap($open_note_title_list.match('Grocery List')[0])\n    tap($more_options_note)\n    tap($delete_note)\n    tap($delete_note_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($checklist_type)\ntap($add_note_ok)"}
{"task": "Set the primary color of the app directly from settings on the home page.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_primary_color)"}
{"task": "Open the settings of the app from the home page", "solution": "tap($settings)"}
{"task": "Set the app icon color directly from the settings on the home page", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_app_icon_color)"}
{"task": "Navigate to the settings page from the home page and show me the information about the app.", "solution": "tap($settings)\ntap($about)"}
{"task": "Create a new note and add a title 'Workout Plan' to it", "solution": "tap($create_note)\nset_text($add_note_title, 'Workout Plan')\ntap($add_note_ok)"}
{"task": "Open the settings of the Notes app and use monospaced font", "solution": "tap($settings)\ntap($set_use_monospaced_font)"}
{"task": "Open the settings of the Notes app and enable Incognito mode for keyboards", "solution": "tap($settings)\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Ensure a checklist note is open and then open more options for the current checklist", "solution": "tap($more_options_checklist)"}
{"task": "Ensure a checklist note is open, then open settings from the more options in the current checklist", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "Open the Notes app settings and customize colors in the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Add items to the checklist note and then sort the current checklist items by custom order", "solution": "tap($add_checklist_item)\nset_text($add_checklist_item_title, 'First Item')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Second Item')\ntap($add_checklist_item_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Third Item')\ntap($add_checklist_item_ok)\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Sort the checklist by a specific type (e.g., custom order, alphabetical order) to ensure there is a specific sort type applied, then confirm the sort type for the current checklist", "solution": "tap($more_options_checklist)\ntap($sort_checklist_items)\ntap($custom_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open any note and create one if there is none, then open settings from the more options in the note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Open the settings of the Notes app and enable line wrapping", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_enable_line_wrap)"}
{"task": "Open a note or create one if there is none, then open more options for the current note", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings in the Notes App from the home page", "solution": "tap($settings)"}
{"task": "Open the current checklist and sort its items by date created", "solution": "tap($open_note_title_list.match({'selected': true}))\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($date_created_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open settings in the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Open the settings page from the home page, then set the font size of the app to 50%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '50%'})[0])"}
{"task": "Open the settings page from the home page and set the font size of the app to 60%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'text': '60%'})[0])"}
{"task": "Open the settings page from the home page and set the theme color to Dark Red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match({'text': 'Dark red'})[0])"}
{"task": "Open the settings page from the home page and set the theme color to White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match({'text': 'White'})[0])"}
{"task": "Open the settings page from the home page and set the theme color to Black & White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match({'text': 'Black & White'})[0])"}
{"task": "Open the more options menu for the current checklist and then open the settings page from the more options checklist menu.", "solution": "tap($more_options_checklist)\ntap($settings)"}
{"task": "From the home page, navigate to the Notes app settings and set the font size to 75%.", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"75%\"))\n"}
{"task": "Set the font size to 100% in the Notes App", "solution": "tap($font_size_types.match(\"100%\"))\n"}
{"task": "From the home page, navigate to and open the settings of the Notes APP", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Set the font size to 125% in the Notes App", "solution": "tap($font_size_types.match(\"125%\"))\n"}
{"task": "Open the settings page from the home page and set the theme color to Custom", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Open a note, then open the more options of the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Open the settings page from the home page and set the font size to 50%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Open a checklist and then open the more options of the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a note that can be searched if not already opened, then input 'budget' in the search box.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'budget')"}
{"task": "Open a checklist note or create one if there is none, then show the list of all checklist items", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nif len($checklist_item_list) > 0:\n    for item in $checklist_item_list:\n        print(get_text(item))\nelse:\n    print('No checklist items found')"}
{"task": "Open a checklist note or create one if there is none, then show the content and state of the first checklist item", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist Note')\n    tap($checklist_type)\n    tap($add_note_ok)\nif len($checklist_item_list) > 0:\n    print(get_text($checklist_item_list[0]))\nelse:\n    print('No checklist items found')"}
{"task": "Open the settings of the Notes app from the home page", "solution": "tap($settings)"}
{"task": "Open the settings menu and set the cursor to automatically go to the end of a note", "solution": "tap($settings)\nif not get_attributes($set_place_cursor_to_the_end_of_note)['checked']:\n    tap($set_place_cursor_to_the_end_of_note)"}
{"task": "Open the settings menu and enable the setting to show the keyboard on startup.", "solution": "tap($settings)\nif not get_attributes($set_show_keyboard_on_startup)['checked']:\n    tap($set_show_keyboard_on_startup)"}
{"task": "Go to settings", "solution": "tap($settings)"}
{"task": "Input a search term in the search box, then tap on 'Previous' to find the previous occurrence.", "solution": "tap($search_within_note)\nset_text($search_text, '<search_term>')\ntap($prev_matched_text)"}
{"task": "Open the app settings, navigate to the font size settings, and set the font size to 175%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "Open the color settings and then close the color settings popup by clicking the close button.", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Open the color settings and save the color settings by clicking the save button.", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Set the font size to 150% in the Notes App", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_150%)"}
{"task": "Navigate to settings from the home page to customize the app colors", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Set the font size to 175% in the Notes App", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)"}
{"task": "Open any note to enable the more options menu and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "If there are fewer than four checklist items, create additional checklist items until there are at least four, then tap on the fourth checklist item", "solution": "if len($checklist_item_list) < 4:\n    needed_items = 4 - len($checklist_item_list)\n    for _ in range(needed_items):\n        tap($add_checklist_item)\n        tap($add_checklist_item_ok)\ntap($checklist_item_list[3])"}
{"task": "Open the color settings and set the theme color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)"}
{"task": "Open the color settings and set the text color of the app.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_text_color)"}
{"task": "Open the color settings and set the background color of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)"}
{"task": "Open a note and search within the current note for the term 'deadline'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($search_within_note)\nset_text($search_text, 'deadline')"}
{"task": "Search within the current note for the term 'deadline' and then go to the previous search result", "solution": "tap($search_within_note)\nset_text($search_text, 'deadline')\ntap($prev_matched_text)"}
{"task": "Ensure there is no existing note titled 'Meeting Notes' and then create a new note with the title 'Meeting Notes'.", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nfor i in range(len(note_list)):\n    if get_text(note_list[i]) == 'Meeting Notes':\n        long_tap(note_list[i])\n        tap($delete_note)\n        tap($delete_note_ok)\ntap($back)\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Open any note and edit the content of the current note to 'Discuss project timeline and milestones'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\nset_text($note_content, 'Discuss project timeline and milestones')\ntap($save_note)\nback()"}
{"task": "Open the settings page and scroll through it.", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\nscroll($scroll_settings_page, 'up')\nback()"}
{"task": "Navigate to settings from the home page and set the theme color of the Notes app to light", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_light)\ntap($save_set_colors)\nback()"}
{"task": "Open a note that contains the word 'timeline' or add 'timeline' to an existing open note, then search for the word 'timeline' within the current note.", "solution": "tap($open_note)\nnote_list = $open_note_title_list\nfor i in range(len(note_list)):\n    tap(note_list[i])\n    if 'timeline' in get_text($note_content):\n        break\n    back()\ntap($note_content)\nset_text($note_content, get_text($note_content) + ' timeline')\ntap($save_note)\ntap($search_within_note)\nset_text($search_text, 'timeline')\ntap($next_matchhed_text)"}
{"task": "Starting from the home page, navigate to the settings to change the theme color of the Notes App to dark.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('Dark')[0])\ntap($close_set_colors)"}
{"task": "From the home page, navigate to settings and set the theme color of the app to dark red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_types.match('Dark red')[0])\ntap($close_set_colors)"}
{"task": "Open any existing note and rename it to 'Project Plan'", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($rename_note)\nset_text($rename_input, 'Project Plan')\ntap($rename_ok)"}
{"task": "Create the note titled 'Daily Journal' if it does not exist and then create a shortcut for the note titled 'Daily Journal'", "solution": "tap($open_note)\nnotes = $open_note_title_list\nnote_titles = [get_text(note) for note in notes]\nif 'Daily Journal' not in note_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Daily Journal')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    notes = $open_note_title_list\n    tap(notes.match('Daily Journal')[0])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open a note that contains the word 'project' multiple times and move to the previous match of 'project' within the current note.", "solution": "tap($open_note)\nnote_with_project = [note for note in $open_note_title_list if 'project' in get_text(note)]\nif note_with_project:\n    tap(note_with_project[0])\n    tap($search_within_note)\n    set_text($search_text, 'project')\n    tap($prev_matched_text)"}
{"task": "Open the Notes app settings and enable the 'Place cursor to the end of note' setting", "solution": "tap($settings)\nset_text($set_place_cursor_to_the_end_of_note, True)"}
{"task": "Show the theme color types available in the settings page of the Notes APP on a smartphone.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntheme_colors = $theme_color_types\n[print(get_text(color)) for color in theme_colors]"}
{"task": "Open a checklist note if it doesn't exist or create one, then open the more options menu for the current checklist.", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif not open_note_titles:\n\ttap($create_note)\n\tset_text($add_note_title, 'My Checklist')\n\tcheckboxes = $add_note_types\n\ttap(checkboxes[1])  # Assuming the second checkbox is for checklist note\n\ttap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Ensure there are multiple notes in the list and then switch to the next item in the notes list.", "solution": "if len($open_note_title_list) < 2:\n\ttap($create_note)\n\tset_text($add_note_title, 'Additional Note')\n\ttap($add_note_ok)\ntap($switch_to_next_item)"}
{"task": "Open a checklist note or create one if there is none, then open more options for the current checklist", "solution": "tap($open_note)\nopen_note_titles = $open_note_title_list\nif not open_note_titles:\n\ttap($create_note)\n\tset_text($add_note_title, 'My Checklist')\n\tcheckboxes = $add_note_types\n\ttap(checkboxes[1])  # Assuming the second checkbox is for checklist note\n\ttap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Enter search mode within the opened note and then exit the search mode.", "solution": "tap($search_within_note)\ntap($close_search_box)"}
{"task": "Search within the current note for the term 'deadline' and find the next occurrence", "solution": "tap($search_within_note)\nset_text($search_text, 'deadline')\ntap($next_matchhed_text)"}
{"task": "If a note with the title 'Shopping List' already exists, rename the note title to something else. Then, create a new note with the title 'Shopping List'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if 'Shopping List' in get_text(notes[i]):\n        tap(notes[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Renamed Note')\n        tap($rename_ok)\n        break\nback()\ntap($create_note)\nset_text($add_note_title, 'Shopping List')\ntap($text_note_type)\ntap($add_note_ok)"}
{"task": "Input a search term in the search box and tap on 'Next' to find the next occurrence", "solution": "set_text($search_text, 'search term')\ntap($next_matchhed_text)"}
{"task": "If the search box is not already open, open it. Then, close the search box.", "solution": "if not get_attributes($search_text)['selected']:\n    tap($search_within_note)\ntap($close_search_box)"}
{"task": "Open a checklist note or create one if there is none and then open the more options of the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open a checklist note or create one if there is none, then open settings from the more options in the checklist.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Open any note or create one if there is none, then create a shortcut for the current note on the home screen", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($create_shortcut)"}
{"task": "Open the settings of the app and set the primary color to red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_types.match('Dark red'))\ntap($save_set_colors)"}
{"task": "Open any note or create one if there is none, then lock the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "If a note with the title 'Project Ideas' already exists, rename the existing note to something else. Then, create a new text note titled 'Project Ideas'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Project Ideas')) > 0:\n    long_tap($open_note_title_list.match('Project Ideas')[0])\n    tap($rename_note)\n    set_text($rename_input, 'Old Project Ideas')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Project Ideas')\ntap($text_note_type)\ntap($add_note_ok)\n"}
{"task": "Open the settings from the home page", "solution": "tap($settings)\n"}
{"task": "If a note with the title 'Grocery List' already exists, rename the note title to something else. Then, create a new note with the title 'Grocery List'.", "solution": "tap($open_note)\nif len($open_note_title_list.match('Grocery List')) > 0:\n    long_tap($open_note_title_list.match('Grocery List')[0])\n    tap($rename_note)\n    set_text($rename_input, 'Old Grocery List')\n    tap($rename_ok)\ntap($create_note)\nset_text($add_note_title, 'Grocery List')\ntap($checklist_type)\ntap($add_note_ok)\n"}
{"task": "Change the font size to large", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_175%)\n"}
{"task": "Open an existing note or create a new one, then open the Settings from the more options in the current note", "solution": "if len($note_content) or len($checklist_item_list):\n    open_note_or_checklist_exists = True\nelse:\n    open_note_or_checklist_exists = False\ntap($open_note)\nif open_note_or_checklist_exists:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Temporary Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($settings)\n"}
{"task": "Create the note titled 'Work Schedule' if it does not exist, then lock the note titled 'Work Schedule'", "solution": "tap($open_note)\nnotes_titles = $open_note_title_list\nif not any([get_text(note) == 'Work Schedule' for note in notes_titles]):\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Work Schedule')\n    tap($add_note_ok)\ntap(notes_titles.match('Work Schedule')[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Open any note to enable and access the more options menu for the current note", "solution": "tap($open_note)\nnotes_titles = $open_note_title_list\nif len(notes_titles) > 0:\n    tap(notes_titles[0])\ntap($more_options_note)"}
{"task": "Ensure that the note titled 'Expense Report' has an attached file and open the attached file if it exists.", "solution": "tap($open_note)\nnotes_titles = $open_note_title_list\nexpense_report_note = [note for note in notes_titles if get_text(note) == 'Expense Report']\nif expense_report_note:\n    tap(expense_report_note[0])\n    tap($more_options_note)\n    try:\n        tap($open_file)\n    except:\n        pass"}
{"task": "Open any note to enable the more options menu, then go to Settings from the more options menu of the current note", "solution": "tap($open_note)\nnotes_titles = $open_note_title_list\nif len(notes_titles) > 0:\n    tap(notes_titles[0])\ntap($more_options_note)\ntap($settings)"}
{"task": "Create the note titled 'Travel Itinerary' if it does not exist, then export it as a file.", "solution": "tap($open_note)\nnotes_titles = $open_note_title_list\nif not any([get_text(note) == 'Travel Itinerary' for note in notes_titles]):\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($add_note_ok)\ntap(notes_titles.match('Travel Itinerary')[0])\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the settings of the app and change the app icon color to green", "solution": "tap($more_options_note); tap($settings); tap($set_colors); tap($set_app_icon_color); set_text($set_app_icon_color, 'green'); tap($save_set_colors); tap($exit_settings)"}
{"task": "Open a checklist note or create one if there is none, then open the file of the current checklist", "solution": "all_notes = $open_note_title_list\nif len(all_notes) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($open_file)"}
{"task": "Open the settings of the app to set the theme color", "solution": "tap($more_options_note); tap($settings); tap($set_theme_color)"}
{"task": "Open any note or create one if there is none, then export the current note as a PDF file", "solution": "all_notes = $open_note_title_list\nif len(all_notes) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open the settings of the app and set the theme color to auto light/dark mode", "solution": "tap($more_options_note); tap($settings); tap($set_theme_color); tap($theme_color_auto_light_dark); tap($exit_settings)"}
{"task": "Change the theme of the Notes APP to dark from the settings on the home page.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_dark)"}
{"task": "Open an existing checklist note or create a new one if none exist, then print the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\nprint(get_text($checklist_item_list))"}
{"task": "Create checklist items, mark them as done, and then remove done items from the current checklist.", "solution": "if get_attributes($checklist_item_list)['exists']:\n    for i in range(3):\n        tap($add_checklist_item)\n        set_text($add_checklist_item_title, f'Item {i+1}')\n        tap($add_checklist_item_ok)\n    for item in $checklist_item_list:\n        tap(item)\n    tap($more_options_checklist)\n    tap($remove_done_checklist_items)"}
{"task": "Open a checklist note if it doesn't exist or create one, then sort the items in the current checklist by title.", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($title_type)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings menu and set the font size to 125%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_125%)"}
{"task": "Open an existing checklist note or create a new one, then open the Settings from the more options in the current checklist", "solution": "if len($open_note_title_list) > 0:\n    tap($open_note_title[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Customize the colors of the app to blue and white using the options available in the settings page", "solution": "tap($set_colors)\ntap($set_background_color)\ntap($theme_color_custom)\nset_text($theme_color_custom, 'white')\ntap($set_text_color)\ntap($theme_color_custom)\nset_text($theme_color_custom, 'blue')\ntap($save_set_colors)"}
{"task": "Customize the widget colors to green and black", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_widget_colors)\nset_text($theme_color_custom, 'green')\nset_text($theme_color_custom, 'black')\ntap($save_set_colors)\ntap($exit_settings)"}
{"task": "Search within the current note for the term 'goals' and then close the search box.", "solution": "tap($search_within_note)\nset_text($search_text, 'goals')\ntap($close_search_box)"}
{"task": "Open a note and then open the note's more options", "solution": "tap($open_note)\ntap($open_note_title[0])\ntap($more_options_note)"}
{"task": "Open a note and then open more options for the current note", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)"}
{"task": "Turn on the 'Show word count' option", "solution": "tap($settings)\nif not get_attributes($set_show_word_count)['checked']:\n    tap($set_show_word_count)"}
{"task": "Open a checklist and open more options for the current checklist", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Open the app settings and enable incognito mode for keyboards", "solution": "tap($settings)\nif not get_attributes($set_use_incognito_mode_of_keyboards)['checked']:\n    tap($set_use_incognito_mode_of_keyboards)"}
{"task": "Enable the 'Show a note picker on startup' setting from the settings page", "solution": "tap($settings)\nif not get_attributes($set_show_a_note_picker_on_startup)['checked']:\n    tap($set_show_a_note_picker_on_startup)"}
{"task": "Enable the 'Autosave notes' setting from the settings page of the Notes APP", "solution": "tap($settings)\ntap($set_autosave_notes)"}
{"task": "Enable the 'Display save success messages' setting from the settings page", "solution": "tap($settings)\ntap($set_display_save_success_messages)"}
{"task": "Open the app settings and disable incognito mode for keyboards", "solution": "tap($settings)\ntap($set_use_incognito_mode_of_keyboards)"}
{"task": "Open the app settings and enable line wrap.", "solution": "tap($settings)\ntap($set_enable_line_wrap)"}
{"task": "Ensure that a note titled 'Recipe' exists in the Notes app, then open the Notes app and export the note titled 'Recipe' as a file.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nfor i in range(len(notes)):\n    if get_text(notes[i]) == 'Recipe':\n        tap(notes[i])\n        break\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Open a checklist note or create one if there is none, so it can be printed during the execution of the main task.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\n"}
{"task": "Open a note or create one if there is none, then tap on more options in the current note and set the font size to 60% via settings", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match('60%')[0])\ntap($sort_checklist_items_ok)\nback()\nback()\n"}
{"task": "From the home page, scroll through the notes and checklists", "solution": "scroll($switch_item, 'down')\nscroll($switch_item, 'up')\ntap($switch_to_next_item)\ntap($switch_to_prev_item)\n"}
{"task": "Open a note or create one if there is none, then set the font size to 75% in the app settings through more options in the current note", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_types.match('75%')[0])\ntap($sort_checklist_items_ok)\nback()\nback()\n"}
{"task": "Open any checklist note and check the list of all checklist items", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\nlen($checklist_item_list)\n"}
{"task": "Enable line wrap in the app settings", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_enable_line_wrap)"}
{"task": "Open the text color settings and set the text color of the notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_colors)\ntap($set_text_color)"}
{"task": "Open a note or create a new one if none exist, then open the more options of the current note", "solution": "tap($open_note)\nif len($open_note_title_list) > 0:\n    tap($open_note_title_list[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Set alignment options in the app settings", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_alignment)"}
{"task": "Create a checklist titled 'Books to Read' if it does not exist, then open the Notes APP, access the more options of the checklist titled 'Books to Read', and lock it.", "solution": "tap($open_note)\nnote_exists = False\nfor i in range(len($open_note_title_list)):\n    if get_text($open_note_title_list[i]) == 'Books to Read':\n        tap($open_note_title_list[i])\n        note_exists = True\n        break\nif not note_exists:\n    tap($create_note)\n    set_text($add_note_title, 'Books to Read')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)\ntap($lock_note)"}
{"task": "Open a checklist note or create one if there is none, then go to Settings from the more options menu of the current checklist", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    title_list = $open_note_title_list\n    for title in title_list:\n        tap(title)\n        content_attributes = get_attributes($note_content)\n        if 'checklist' in content_attributes['class']:\n            break\n    if not any('checklist' in get_attributes(title)['class'] for title in title_list):\n        tap($create_note)\n        tap($checklist_type)\n        tap($add_note_ok)\ntap($more_options_checklist)\ntap($settings)"}
{"task": "Customize the colors of the app from the Settings", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the settings page and then exit the settings page.", "solution": "tap($settings)\nback()"}
{"task": "Open the settings page and access the font size settings.", "solution": "tap($settings)\ntap($set_font_size)"}
{"task": "Open the font size settings in the app settings and set the font size to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_200%)"}
{"task": "Enable automatic backups in the Notes app", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($set_enable_automatic_backups)"}
{"task": "Export all notes from the Notes APP", "solution": "tap($settings)\nscroll($scroll_settings_page, 'down')\ntap($export_notes)"}
{"task": "Open a checklist or create a new one if none exist, then open the more options menu for the current checklist", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Checklist')\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($more_options_checklist)"}
{"task": "Open the Notes app, create a note titled 'Travel Itinerary' if it doesn't exist, and print the note titled 'Travel Itinerary'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Travel Itinerary')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Travel Itinerary')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($save_note)\nnotes = $open_note_title_list.match('Travel Itinerary')\ntap(notes[0])\ntap($more_options_note)\ntap($print_note)"}
{"task": "Ensure a note titled 'Old Reminders' exists in the Notes app, then open the Notes app and delete the note titled 'Old Reminders'", "solution": "tap($open_note)\nnotes = $open_note_title_list.match('Old Reminders')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Old Reminders')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($save_note)\nnotes = $open_note_title_list.match('Old Reminders')\ntap(notes[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open the font size settings and set the font size of the app to 200%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match(\"200%\"))"}
{"task": "Customize colors in the app", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open a checklist or create a new one if none exist, then open the more options of the current checklist", "solution": "tap($open_note)\nif len($open_note_title_list) == 0:\n    tap($create_note)\n    tap($checklist_type)\n    set_text($add_note_title, \"New Checklist\")\n    tap($add_note_ok)\ntap($open_note_title_list[0])\ntap($more_options_checklist)"}
{"task": "Ensure the 'Weekly Summary' note exists in the Notes APP, and if it does not, create it. Then, open the Notes APP and open the note file for 'Weekly Summary'.", "solution": "tap($open_note)\ntitles = [get_text($open_note_title_list[i]) for i in range(len($open_note_title_list))]\nif 'Weekly Summary' not in titles:\n    tap($create_note)\n    set_text($add_note_title, \"Weekly Summary\")\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match(\"Weekly Summary\"))"}
{"task": "If the checklist titled 'Shopping List' does not exist, create it. Then, open the Notes APP and open the checklist file for 'Shopping List'.", "solution": "tap($open_note)\ntitles = [get_text($open_note_title_list[i]) for i in range(len($open_note_title_list))]\nif 'Shopping List' not in titles:\n    tap($create_note)\n    set_text($add_note_title, \"Shopping List\")\n    tap($checklist_type)\n    tap($add_note_ok)\ntap($open_note_title_list.match(\"Shopping List\"))"}
{"task": "Open a note or create one if there is none, then access more options in the note and change the font size to 90% in the settings", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_90%)\nback()"}
{"task": "Create the note titled 'Grocery List' if it does not exist, then open the note titled 'Grocery List'", "solution": "notes = $open_note_title_list.match('Grocery List')\nif len(notes) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'Grocery List')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note_title_list.match('Grocery List')[0])"}
{"task": "Open a note or create one if there is none, then change the font size to 100% in the settings via the more options note button.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_100%)\nback()"}
{"task": "Open a note or create one if there is none, then open more options in the note and set the font size to 125% in the app settings", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_125%)\nback()"}
{"task": "Open a note or create one if none exists, then update the font size to 150% by accessing settings through more options in the note.", "solution": "if len($open_note_title_list) == 0:\n    tap($create_note)\n    set_text($add_note_title, 'New Note')\n    tap($text_note_type)\n    tap($add_note_ok)\nelse:\n    tap($open_note)\n    tap($open_note_title_list[0])\ntap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_150%)\nback()"}
{"task": "Create a note titled 'Workout Routine' if it doesn't exist, then open the Notes app and open the note titled 'Workout Routine'", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nfor i in range(len(notes_list)):\n    if get_text(notes_list[i]) == 'Workout Routine':\n        tap(notes_list[i])\n        break\nelse:\n    tap($create_note)\n    set_text($add_note_title, 'Workout Routine')\n    tap($text_note_type)\n    tap($add_note_ok)\n    tap($open_note)\n    for i in range(len(notes_list)):\n        if get_text(notes_list[i]) == 'Workout Routine':\n            tap(notes_list[i])\n            break"}
{"task": "Ensure no existing note titled 'Birthday Gift Ideas' exists and then open the Notes app to add a new note about 'Birthday Gift Ideas'", "solution": "tap($open_note)\nnotes_list = $open_note_title_list\nfor i in range(len(notes_list)):\n    if get_text(notes_list[i]) == 'Birthday Gift Ideas':\n        tap(notes_list[i])\n        tap($more_options_note)\n        tap($delete_note)\n        tap($delete_note_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Birthday Gift Ideas')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Open the settings in the Notes app from the home page", "solution": "tap($more_options_note)\ntap($settings)"}
{"task": "Open app settings and customize the colors of the app", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_colors)"}
{"task": "Set the font size to 175% from the settings page", "solution": "tap($more_options_note)\ntap($settings)\ntap($set_font_size)\ntap($font_size_175%)\ntap($sort_checklist_items_ok)"}
{"task": "Open the settings menu and enable the setting to show a note picker on startup", "solution": "tap($settings)\ntap($set_show_a_note_picker_on_startup)"}
{"task": "Open the Notes app and add a new checklist item called 'Buy groceries'", "solution": "tap($create_note)\ntap($checklist_type)\ntap($add_note_ok)\ntap($add_checklist_item)\nset_text($add_checklist_item_title, 'Buy groceries')\ntap($add_checklist_item_ok)"}
{"task": "Open the settings menu and enable the autosave notes feature", "solution": "tap($settings)\ntap($set_autosave_notes)"}
{"task": "Ensure no existing note has the title 'Meeting Minutes,' then create a new note with the title 'Meeting Minutes.'", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nfound = False\nfor i in range(len(note_titles)):\n    if get_text(note_titles[i]) == 'Meeting Minutes':\n        found = True\n        break\nif not found:\n    back()\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($text_note_type)\n    tap($add_note_ok)"}
{"task": "Open a note or create one if there is none, then open the more options menu for the current note", "solution": "tap($open_note)\nnote_titles = $open_note_title_list\nif len(note_titles) == 0:\n    back()\n    tap($create_note)\n    tap($text_note_type)\n    tap($add_note_ok)\ntap($more_options_note)"}
{"task": "Set the font size to 200% in the Notes APP", "solution": "tap($set_font_size)\ntap($font_size_200%)"}
{"task": "Set the font size to 250% from the settings page in the Notes APP", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)"}
{"task": "Change the app's font size to 75%", "solution": "tap($set_font_size)\ntap($font_size_75%)"}
{"task": "Change the app's font size to 90% from the settings page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_90%)"}
{"task": "Open the widget customization section within app settings and customize the colors of the widget.", "solution": "tap($settings)\ntap($set_widget_colors)"}
{"task": "Open the customize colors popup window and then close it.", "solution": "tap($settings)\ntap($set_colors)\ntap($close_set_colors)"}
{"task": "Create a note titled 'Shopping List' if it doesn't exist, then lock the note titled 'Shopping List'.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nexisting_titles = [get_text(note) for note in open_notes]\nif 'Shopping List' not in existing_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Shopping List')\n    tap($text_note_type)\n    tap($add_note_ok)\nback()\ntap($open_note)\nnotes = $open_note_title_list.match('Shopping List')\ntap(notes[0])\ntap($more_options_note)\ntap($lock_note)\ntap($lock_note_ok)"}
{"task": "Create a note titled 'Meeting Minutes' if it doesn't exist, then open the note and export it as a file", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nexisting_titles = [get_text(note) for note in open_notes]\nif 'Meeting Minutes' not in existing_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Meeting Minutes')\n    tap($text_note_type)\n    tap($add_note_ok)\nback()\ntap($open_note)\nnotes = $open_note_title_list.match('Meeting Minutes')\ntap(notes[0])\ntap($more_options_note)\ntap($export_as_file)"}
{"task": "Create a note titled 'Weekly Report' if it doesn't exist, then delete the note titled 'Weekly Report'.", "solution": "tap($open_note)\nopen_notes = $open_note_title_list\nexisting_titles = [get_text(note) for note in open_notes]\nif 'Weekly Report' not in existing_titles:\n    tap($create_note)\n    set_text($add_note_title, 'Weekly Report')\n    tap($text_note_type)\n    tap($add_note_ok)\nback()\ntap($open_note)\nnotes = $open_note_title_list.match('Weekly Report')\ntap(notes[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Open any existing note and edit the content to say 'Buy groceries'.", "solution": "tap($open_note)\nnotes = $open_note_title_list\nif len(notes) > 0:\n    tap(notes[0])\n    set_text($note_content, 'Buy groceries')\n    tap($save_note)"}
{"task": "Open the app settings, navigate to the font size settings, and set the font size to 250%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'value': '250%'})[0])"}
{"task": "Open any existing note and delete the note that's currently open", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\ntap($delete_note)\ntap($delete_note_ok)"}
{"task": "Set the font size to 75% in the Notes APP settings", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'value': '75%'})[0])"}
{"task": "Set the font size of the app to 90% from the settings page", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match({'value': '90%'})[0])"}
{"task": "Open the Theme settings to set the theme color", "solution": "tap($settings)\ntap($set_colors)"}
{"task": "Open the font size settings and set the font size of the app to 250%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_250%)"}
{"task": "Navigate from the home page of the Notes app to settings and set the theme color to Black & White", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_black_white)\ntap($save_set_colors)"}
{"task": "From the home page, navigate to settings in the Notes app and customize the theme color to Custom.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_custom)\ntap($save_set_colors)"}
{"task": "Start from the home page, navigate to the Notes app settings, and reduce the font size to 50%", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_50%)"}
{"task": "Open the font size settings and set the font size of the app to 300%", "solution": "tap($set_font_size)\ntap($font_size_300%)"}
{"task": "Set the font size of the app to 100% by accessing the settings page.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_types.match('100%')[0])\n"}
{"task": "Open any existing note and access more options for the current note.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_note)\n"}
{"task": "Open any existing checklist note and remove the completed items from the checklist.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($remove_done_checklist_items)\n"}
{"task": "Open any existing checklist note and sort the checklist items by title.", "solution": "tap($open_note)\ntap($open_note_title_list[0])\ntap($more_options_checklist)\ntap($sort_checklist_items)\ntap($sort_checklist_items_types.match('Title')[0])\ntap($sort_checklist_items_ok)\n"}
{"task": "Open the settings page from the home page and set the app icon color to red", "solution": "tap($settings)\ntap($set_colors)\ntap($set_app_icon_color)\nset_text($set_app_icon_color, 'red')\ntap($save_set_colors)\n"}
{"task": "Open the settings page from the home page and save the customized colors of the app", "solution": "tap($settings)\ntap($set_colors)\ntap($save_set_colors)"}
{"task": "Open the settings page from the home page and enable auto light/dark theme for the app", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_auto_light_dark)\ntap($save_set_colors)"}
{"task": "Open the settings page from the home page and set the theme color to white mode", "solution": "tap($settings)\ntap($set_colors)\ntap($set_theme_color)\ntap($theme_color_white)\ntap($save_set_colors)"}
{"task": "If a note with the title 'Meeting Notes' already exists, rename the note title to something else. Then, create a new note with the title 'Meeting Notes'.", "solution": "tap($open_note)\nopen_titles = $open_note_title_list\nfor i in range(len(open_titles)):\n    if get_text(open_titles[i]) == 'Meeting Notes':\n        tap(open_titles[i])\n        tap($more_options_note)\n        tap($rename_note)\n        set_text($rename_input, 'Old Meeting Notes')\n        tap($rename_ok)\n        break\ntap($create_note)\nset_text($add_note_title, 'Meeting Notes')\ntap($add_note_ok)"}
{"task": "Open the notes app and navigate to the settings page from the home page, then change the background color to yellow.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_background_color)\nset_text($set_background_color, 'Yellow')\ntap($save_set_colors)"}
{"task": "Open the app settings, navigate to the font size settings, and set the font size to 300%.", "solution": "tap($settings)\ntap($set_font_size)\ntap($font_size_300%)"}
{"task": "Open the note editing settings and enable the setting to place cursor to the end of the note.", "solution": "tap($settings)\ntap($set_place_cursor_to_the_end_of_note)"}
{"task": "Open the settings page from the home page and set the primary color of the app to green.", "solution": "tap($settings)\ntap($set_colors)\ntap($set_primary_color)\ntap($theme_color_custom)\nset_text($customize_primary_ok, 'green')\ntap($save_set_colors)"}
{"task": "Open the Notes app and navigate to the Settings from the main screen.", "solution": "tap($settings)"}
{"task": "Open the customize colors settings and modify app colors in the Notes app", "solution": "tap($settings)\ntap($set_colors)"}
